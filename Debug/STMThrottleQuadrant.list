
STMThrottleQuadrant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009024  08009024  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800902c  0800902c  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000120  08009158  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  08009158  00020d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011555  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bf  00000000  00000000  000316a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00034768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c177  00000000  00000000  00036190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b42  00000000  00000000  00052307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966d7  00000000  00000000  00063e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003940  00000000  00000000  000fa570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000120 	.word	0x20000120
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008f94 	.word	0x08008f94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000124 	.word	0x20000124
 80001d4:	08008f94 	.word	0x08008f94

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2uiz>:
 80008b4:	004a      	lsls	r2, r1, #1
 80008b6:	d211      	bcs.n	80008dc <__aeabi_d2uiz+0x28>
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d211      	bcs.n	80008e2 <__aeabi_d2uiz+0x2e>
 80008be:	d50d      	bpl.n	80008dc <__aeabi_d2uiz+0x28>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d40e      	bmi.n	80008e8 <__aeabi_d2uiz+0x34>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	fa23 f002 	lsr.w	r0, r3, r2
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d102      	bne.n	80008ee <__aeabi_d2uiz+0x3a>
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	4770      	bx	lr
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b974 	b.w	8000bf4 <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	9d08      	ldr	r5, [sp, #32]
 800092a:	4604      	mov	r4, r0
 800092c:	468e      	mov	lr, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d14d      	bne.n	80009ce <__udivmoddi4+0xaa>
 8000932:	428a      	cmp	r2, r1
 8000934:	4694      	mov	ip, r2
 8000936:	d969      	bls.n	8000a0c <__udivmoddi4+0xe8>
 8000938:	fab2 f282 	clz	r2, r2
 800093c:	b152      	cbz	r2, 8000954 <__udivmoddi4+0x30>
 800093e:	fa01 f302 	lsl.w	r3, r1, r2
 8000942:	f1c2 0120 	rsb	r1, r2, #32
 8000946:	fa20 f101 	lsr.w	r1, r0, r1
 800094a:	fa0c fc02 	lsl.w	ip, ip, r2
 800094e:	ea41 0e03 	orr.w	lr, r1, r3
 8000952:	4094      	lsls	r4, r2
 8000954:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000958:	0c21      	lsrs	r1, r4, #16
 800095a:	fbbe f6f8 	udiv	r6, lr, r8
 800095e:	fa1f f78c 	uxth.w	r7, ip
 8000962:	fb08 e316 	mls	r3, r8, r6, lr
 8000966:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800096a:	fb06 f107 	mul.w	r1, r6, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d90a      	bls.n	8000988 <__udivmoddi4+0x64>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 30ff 	add.w	r0, r6, #4294967295
 800097a:	f080 811f 	bcs.w	8000bbc <__udivmoddi4+0x298>
 800097e:	4299      	cmp	r1, r3
 8000980:	f240 811c 	bls.w	8000bbc <__udivmoddi4+0x298>
 8000984:	3e02      	subs	r6, #2
 8000986:	4463      	add	r3, ip
 8000988:	1a5b      	subs	r3, r3, r1
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000998:	fb00 f707 	mul.w	r7, r0, r7
 800099c:	42a7      	cmp	r7, r4
 800099e:	d90a      	bls.n	80009b6 <__udivmoddi4+0x92>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	f080 810a 	bcs.w	8000bc0 <__udivmoddi4+0x29c>
 80009ac:	42a7      	cmp	r7, r4
 80009ae:	f240 8107 	bls.w	8000bc0 <__udivmoddi4+0x29c>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ba:	1be4      	subs	r4, r4, r7
 80009bc:	2600      	movs	r6, #0
 80009be:	b11d      	cbz	r5, 80009c8 <__udivmoddi4+0xa4>
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	2300      	movs	r3, #0
 80009c4:	e9c5 4300 	strd	r4, r3, [r5]
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	428b      	cmp	r3, r1
 80009d0:	d909      	bls.n	80009e6 <__udivmoddi4+0xc2>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	f000 80ef 	beq.w	8000bb6 <__udivmoddi4+0x292>
 80009d8:	2600      	movs	r6, #0
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	4630      	mov	r0, r6
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	fab3 f683 	clz	r6, r3
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d14a      	bne.n	8000a84 <__udivmoddi4+0x160>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xd4>
 80009f2:	4282      	cmp	r2, r0
 80009f4:	f200 80f9 	bhi.w	8000bea <__udivmoddi4+0x2c6>
 80009f8:	1a84      	subs	r4, r0, r2
 80009fa:	eb61 0303 	sbc.w	r3, r1, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	469e      	mov	lr, r3
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d0e0      	beq.n	80009c8 <__udivmoddi4+0xa4>
 8000a06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a0a:	e7dd      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000a0c:	b902      	cbnz	r2, 8000a10 <__udivmoddi4+0xec>
 8000a0e:	deff      	udf	#255	; 0xff
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	f040 8092 	bne.w	8000b3e <__udivmoddi4+0x21a>
 8000a1a:	eba1 010c 	sub.w	r1, r1, ip
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2601      	movs	r6, #1
 8000a28:	0c20      	lsrs	r0, r4, #16
 8000a2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a36:	fb0e f003 	mul.w	r0, lr, r3
 8000a3a:	4288      	cmp	r0, r1
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x12c>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x12a>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2c0>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	1a09      	subs	r1, r1, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a58:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x156>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x154>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2ca>
 8000a78:	4608      	mov	r0, r1
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a82:	e79c      	b.n	80009be <__udivmoddi4+0x9a>
 8000a84:	f1c6 0720 	rsb	r7, r6, #32
 8000a88:	40b3      	lsls	r3, r6
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa20 f407 	lsr.w	r4, r0, r7
 8000a96:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9a:	431c      	orrs	r4, r3
 8000a9c:	40f9      	lsrs	r1, r7
 8000a9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000aa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aaa:	0c20      	lsrs	r0, r4, #16
 8000aac:	fa1f fe8c 	uxth.w	lr, ip
 8000ab0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ab4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab8:	fb08 f00e 	mul.w	r0, r8, lr
 8000abc:	4288      	cmp	r0, r1
 8000abe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b8>
 8000ac4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad0:	4288      	cmp	r0, r1
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4461      	add	r1, ip
 8000adc:	1a09      	subs	r1, r1, r0
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ae4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af0:	458e      	cmp	lr, r1
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1e2>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2b4>
 8000afe:	458e      	cmp	lr, r1
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2b4>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4461      	add	r1, ip
 8000b06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b0e:	eba1 010e 	sub.w	r1, r1, lr
 8000b12:	42a1      	cmp	r1, r4
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46a6      	mov	lr, r4
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x2a4>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x2a0>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x212>
 8000b1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b22:	eb61 010e 	sbc.w	r1, r1, lr
 8000b26:	fa01 f707 	lsl.w	r7, r1, r7
 8000b2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b2e:	40f1      	lsrs	r1, r6
 8000b30:	431f      	orrs	r7, r3
 8000b32:	e9c5 7100 	strd	r7, r1, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	f1c2 0320 	rsb	r3, r2, #32
 8000b42:	40d8      	lsrs	r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	fa21 f303 	lsr.w	r3, r1, r3
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	4301      	orrs	r1, r0
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b60:	0c0b      	lsrs	r3, r1, #16
 8000b62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b66:	fb00 f60e 	mul.w	r6, r0, lr
 8000b6a:	429e      	cmp	r6, r3
 8000b6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x260>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b8>
 8000b7c:	429e      	cmp	r6, r3
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b8>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1b9b      	subs	r3, r3, r6
 8000b86:	b289      	uxth	r1, r1
 8000b88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b94:	fb06 f30e 	mul.w	r3, r6, lr
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x28a>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2b0>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2b0>
 8000baa:	3e02      	subs	r6, #2
 8000bac:	4461      	add	r1, ip
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0x104>
 8000bb6:	462e      	mov	r6, r5
 8000bb8:	4628      	mov	r0, r5
 8000bba:	e705      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000bbc:	4606      	mov	r6, r0
 8000bbe:	e6e3      	b.n	8000988 <__udivmoddi4+0x64>
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	e6f8      	b.n	80009b6 <__udivmoddi4+0x92>
 8000bc4:	454b      	cmp	r3, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f8>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f8>
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x28a>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1e2>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x260>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b8>
 8000be4:	3b02      	subs	r3, #2
 8000be6:	4461      	add	r1, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x12c>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e709      	b.n	8000a02 <__udivmoddi4+0xde>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x156>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	ed87 0b00 	vstr	d0, [r7]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000c0a:	ec43 2b17 	vmov	d7, r2, r3
 8000c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000c12:	eef0 0a67 	vmov.f32	s1, s15
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_ZN4Math5clampEmmm>:
#pragma once

class Math {
	public:
		static uint32_t clamp(uint32_t value, uint32_t min, uint32_t max) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
			if (value < min)
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d202      	bcs.n	8000c3a <_ZN4Math5clampEmmm+0x1a>
				value = min;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e005      	b.n	8000c46 <_ZN4Math5clampEmmm+0x26>
			else if (value > max)
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d901      	bls.n	8000c46 <_ZN4Math5clampEmmm+0x26>
				value = max;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

			return value;
 8000c46:	68fb      	ldr	r3, [r7, #12]
		}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>:
#include <cmath>
#include "stm32f4xx_hal.h"

class AnalogPin {
	public:
		AnalogPin(ADC_HandleTypeDef* adc, uint32_t channel) :
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
			_adc(adc),
			_channel(channel)
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm+0x34>)
 8000c68:	e9c1 2300 	strd	r2, r3, [r1]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
		{

		}
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	bff00000 	.word	0xbff00000

08000c8c <_ZN9AnalogPin8getValueEv>:

		uint32_t getValue() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
			// Changing channel
			ADC_ChannelConfTypeDef channelConfig = {
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
				.Channel = _channel,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
				.Rank = 1,
				.SamplingTime = ADC_SAMPLETIME_28CYCLES,
			};
 8000cae:	60fb      	str	r3, [r7, #12]

			HAL_ADC_ConfigChannel(&hadc1, &channelConfig);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <_ZN9AnalogPin8getValueEv+0x68>)
 8000cb8:	f001 fb30 	bl	800231c <HAL_ADC_ConfigChannel>

			// Reading value
			HAL_ADC_Start(_adc);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 f9ab 	bl	800201c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(_adc, HAL_MAX_DELAY);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f04f 31ff 	mov.w	r1, #4294967295
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fa8b 	bl	80021ea <HAL_ADC_PollForConversion>
			uint32_t value = HAL_ADC_GetValue(_adc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fb11 	bl	8002300 <HAL_ADC_GetValue>
 8000cde:	61f8      	str	r0, [r7, #28]
			HAL_ADC_Stop(_adc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 fa4d 	bl	8002184 <HAL_ADC_Stop>

			return value;
 8000cea:	69fb      	ldr	r3, [r7, #28]
		}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000013c 	.word	0x2000013c

08000cf8 <_ZN9AnalogPin14getSmoothValueEhd>:

		uint32_t getSmoothValue(uint8_t deltaThreshold, double newValueFactor) {
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	460b      	mov	r3, r1
 8000d04:	ed87 0b00 	vstr	d0, [r7]
 8000d08:	72fb      	strb	r3, [r7, #11]
			double newValue = getValue();
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff ffbe 	bl	8000c8c <_ZN9AnalogPin8getValueEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fccc 	bl	80006b0 <__aeabi_ui2d>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			if (_lastValue < 0) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	f7ff fd99 	bl	8000864 <__aeabi_dcmplt>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <_ZN9AnalogPin14getSmoothValueEhd+0x4c>
				_lastValue = newValue;
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d3e:	e9c1 2300 	strd	r2, r3, [r1]
 8000d42:	e04b      	b.n	8000ddc <_ZN9AnalogPin14getSmoothValueEhd+0xe4>
			}
			else {
				if (std::abs(newValue - _lastValue) > deltaThreshold)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d4e:	f7ff fb71 	bl	8000434 <__aeabi_dsub>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	ec43 2b17 	vmov	d7, r2, r3
 8000d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d5e:	eef0 0a67 	vmov.f32	s1, s15
 8000d62:	f7ff ff49 	bl	8000bf8 <_ZSt3absd>
 8000d66:	ec55 4b10 	vmov	r4, r5, d0
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcaf 	bl	80006d0 <__aeabi_i2d>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	2101      	movs	r1, #1
 8000d78:	460e      	mov	r6, r1
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	f7ff fd8f 	bl	80008a0 <__aeabi_dcmpgt>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <_ZN9AnalogPin14getSmoothValueEhd+0x94>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	461e      	mov	r6, r3
 8000d8c:	b2f3      	uxtb	r3, r6
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d024      	beq.n	8000ddc <_ZN9AnalogPin14getSmoothValueEhd+0xe4>
					_lastValue = newValue * newValueFactor + _lastValue * (1 - newValueFactor);
 8000d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d9a:	f7ff fa1d 	bl	80001d8 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4690      	mov	r8, r2
 8000da4:	4699      	mov	r9, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4910      	ldr	r1, [pc, #64]	; (8000df8 <_ZN9AnalogPin14getSmoothValueEhd+0x100>)
 8000db6:	f7ff fb3d 	bl	8000434 <__aeabi_dsub>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	f7ff fa09 	bl	80001d8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4640      	mov	r0, r8
 8000dcc:	4649      	mov	r1, r9
 8000dce:	f7ff fb33 	bl	8000438 <__adddf3>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
			}

			return _lastValue;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fd65 	bl	80008b4 <__aeabi_d2uiz>
 8000dea:	4603      	mov	r3, r0
		}
 8000dec:	4618      	mov	r0, r3
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df6:	bf00      	nop
 8000df8:	3ff00000 	.word	0x3ff00000

08000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>:

#include "stm32f4xx_hal.h"

class DigitalPin {
	public:
		DigitalPin(GPIO_TypeDef* port, uint32_t pin) :
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
			_port(port),
			_pin(pin)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
		{

		}
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_ZN10DigitalPin8setValueEb>:

		void beginOutput() {
			begin(GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
		}

		void setValue(bool value) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(_port, _pin, value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	b299      	uxth	r1, r3
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <_ZN10DigitalPin8setValueEb+0x20>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <_ZN10DigitalPin8setValueEb+0x22>
 8000e42:	2301      	movs	r3, #1
 8000e44:	461a      	mov	r2, r3
 8000e46:	f002 fa2f 	bl	80032a8 <HAL_GPIO_WritePin>
		}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN10DigitalPin8getValueEv>:

		bool getValue() {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
			return HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_RESET;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	4610      	mov	r0, r2
 8000e68:	f002 fa06 	bl	8003278 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
		}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>:
#include "analog_pin.h"
#include "math.h"

class Potentiometer {
	public:
		Potentiometer(const AnalogPin& analogPin, uint32_t minimum, uint32_t maximum) :
 8000e80:	b490      	push	{r4, r7}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
			_analogPin(analogPin),
			_minimum(minimum),
			_maximum(maximum)
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4614      	mov	r4, r2
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	615a      	str	r2, [r3, #20]
		{

		}
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc90      	pop	{r4, r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	0000      	movs	r0, r0
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <_ZN13Potentiometer8getValueEv>:

		uint32_t getValue() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
			uint32_t pinValue = _analogPin.getSmoothValue(20, 0.005);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000f28 <_ZN13Potentiometer8getValueEv+0x70>
 8000ec6:	2114      	movs	r1, #20
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff15 	bl	8000cf8 <_ZN9AnalogPin14getSmoothValueEhd>
 8000ece:	6178      	str	r0, [r7, #20]

//			return pinValue;

			uint32_t clampedPinValue = Math::clamp(pinValue, _minimum, _maximum);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6919      	ldr	r1, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff fea0 	bl	8000c20 <_ZN4Math5clampEmmm>
 8000ee0:	6138      	str	r0, [r7, #16]
			float ratio = (float) (clampedPinValue - _minimum) / (float) (_maximum - _minimum);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f08:	edc7 7a03 	vstr	s15, [r7, #12]

			return (uint32_t) (ratio * 4096.0f);
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f30 <_ZN13Potentiometer8getValueEv+0x78>
 8000f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1c:	ee17 3a90 	vmov	r3, s15
		}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	47ae147b 	.word	0x47ae147b
 8000f2c:	3f747ae1 	.word	0x3f747ae1
 8000f30:	45800000 	.word	0x45800000

08000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>:
			pressed;
};

class Encoder {
	public:
		Encoder(const DigitalPin& clkPin, const DigitalPin& dtPin, const DigitalPin& swPin) :
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
			_clkPin(clkPin),
			_dtPin(dtPin),
			_swPin(swPin)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	3308      	adds	r3, #8
 8000f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	3310      	adds	r3, #16
 8000f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f66:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
		{
			readRotation();
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f875 	bl	8001060 <_ZN7Encoder12readRotationEv>
		}
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZN7Encoder4readEv>:

		EncoderState read() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
			EncoderState state = {
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	460a      	mov	r2, r1
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	460a      	mov	r2, r1
 8000f94:	709a      	strb	r2, [r3, #2]
				.left = false,
				.right = false,
				.pressed = _swPin.getValue()
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3310      	adds	r3, #16
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff59 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8000fa0:	4603      	mov	r3, r0
			};
 8000fa2:	72bb      	strb	r3, [r7, #10]

			auto rotation = readRotation();
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f85b 	bl	8001060 <_ZN7Encoder12readRotationEv>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]

			if (rotation != _oldRotation) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7e1b      	ldrb	r3, [r3, #24]
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d03b      	beq.n	8001030 <_ZN7Encoder4readEv+0xb0>
				switch (_oldRotation | (rotation << 2)) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d82c      	bhi.n	8001022 <_ZN7Encoder4readEv+0xa2>
 8000fc8:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <_ZN7Encoder4readEv+0x50>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	08001029 	.word	0x08001029
 8000fd4:	08001011 	.word	0x08001011
 8000fd8:	08001017 	.word	0x08001017
 8000fdc:	0800101d 	.word	0x0800101d
 8000fe0:	08001017 	.word	0x08001017
 8000fe4:	08001029 	.word	0x08001029
 8000fe8:	08001023 	.word	0x08001023
 8000fec:	08001011 	.word	0x08001011
 8000ff0:	08001011 	.word	0x08001011
 8000ff4:	08001023 	.word	0x08001023
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	08001017 	.word	0x08001017
 8001000:	0800101d 	.word	0x0800101d
 8001004:	08001017 	.word	0x08001017
 8001008:	08001011 	.word	0x08001011
 800100c:	08001029 	.word	0x08001029

					// Button simulation
					case 0: case 5: case 10: case 15:
						break;
					case 1: case 7: case 8: case 14:
						state.right = true;
 8001010:	2301      	movs	r3, #1
 8001012:	727b      	strb	r3, [r7, #9]
						break;
 8001014:	e009      	b.n	800102a <_ZN7Encoder4readEv+0xaa>
					case 2: case 4: case 11: case 13:
						state.left = true;
 8001016:	2301      	movs	r3, #1
 8001018:	723b      	strb	r3, [r7, #8]
						break;
 800101a:	e006      	b.n	800102a <_ZN7Encoder4readEv+0xaa>
					case 3: case 12:
						state.right = true;
 800101c:	2301      	movs	r3, #1
 800101e:	727b      	strb	r3, [r7, #9]
						break;
 8001020:	e003      	b.n	800102a <_ZN7Encoder4readEv+0xaa>
					default:
						state.left = true;
 8001022:	2301      	movs	r3, #1
 8001024:	723b      	strb	r3, [r7, #8]
						break;
 8001026:	e000      	b.n	800102a <_ZN7Encoder4readEv+0xaa>
						break;
 8001028:	bf00      	nop

				}

				_oldRotation = rotation;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	761a      	strb	r2, [r3, #24]
			}

			return state;
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	4611      	mov	r1, r2
 800103c:	8019      	strh	r1, [r3, #0]
 800103e:	3302      	adds	r3, #2
 8001040:	0c12      	lsrs	r2, r2, #16
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	7b3a      	ldrb	r2, [r7, #12]
 8001048:	f362 0307 	bfi	r3, r2, #0, #8
 800104c:	7b7a      	ldrb	r2, [r7, #13]
 800104e:	f362 230f 	bfi	r3, r2, #8, #8
 8001052:	7bba      	ldrb	r2, [r7, #14]
 8001054:	f362 4317 	bfi	r3, r2, #16, #8
		}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZN7Encoder12readRotationEv>:
		DigitalPin _clkPin;
		DigitalPin _dtPin;
		DigitalPin _swPin;
		uint8_t _oldRotation = 0;

		uint8_t readRotation() {
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
			return (_clkPin.getValue() << 1) | _dtPin.getValue();
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fef1 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8001070:	4603      	mov	r3, r0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b25c      	sxtb	r4, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3308      	adds	r3, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fee9 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8001080:	4603      	mov	r3, r0
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4323      	orrs	r3, r4
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2db      	uxtb	r3, r3
		}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}

08001092 <_ZN22JoystickAbstractButtonC1ERK10DigitalPin>:
#include "../digital_pin.h"
#include "report_descriptor.h"

class JoystickAbstractButton {
	public:
		JoystickAbstractButton(const DigitalPin& pin) :
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
			_pin(pin)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a4:	e883 0003 	stmia.w	r3, {r0, r1}
		{

		}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>:
		DigitalPin _pin;
};

class JoystickButton : public JoystickAbstractButton {
	public:
		JoystickButton(const DigitalPin& pin) : JoystickAbstractButton(pin) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffe4 	bl	8001092 <_ZN22JoystickAbstractButtonC1ERK10DigitalPin>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	721a      	strb	r2, [r3, #8]

		}
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_ZN14JoystickButton4tickEv>:

		void tick() {
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
			_state = _pin.getValue();
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff feb4 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	721a      	strb	r2, [r3, #8]
		}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>:

		void updateReport(JoystickReportDescriptor& report, uint8_t& index) {
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
			report.buttons |= _state << index++;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	7a1b      	ldrb	r3, [r3, #8]
 800110a:	4619      	mov	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	b2d0      	uxtb	r0, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	7010      	strb	r0, [r2, #0]
 8001118:	4099      	lsls	r1, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	895b      	ldrh	r3, [r3, #10]
 800111e:	b29b      	uxth	r3, r3
 8001120:	b21a      	sxth	r2, r3
 8001122:	b20b      	sxth	r3, r1
 8001124:	4313      	orrs	r3, r2
 8001126:	b21b      	sxth	r3, r3
 8001128:	b29a      	uxth	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	815a      	strh	r2, [r3, #10]
		}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZN15JoystickEncoderC1ERK7Encoder>:
#include "../encoder.h"
#include "report_descriptor.h"

class JoystickEncoder {
	public:
		JoystickEncoder(const Encoder& encoder) : _encoder(encoder) {
 800113a:	b4b0      	push	{r4, r5, r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4614      	mov	r4, r2
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2232      	movs	r2, #50	; 0x32
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		}
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bcb0      	pop	{r4, r5, r7}
 800117c:	4770      	bx	lr

0800117e <_ZN15JoystickEncoder4readEv>:

		void read() {
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
			auto state = _encoder.read();
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fef9 	bl	8000f80 <_ZN7Encoder4readEv>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	723a      	strb	r2, [r7, #8]
 8001194:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001198:	727a      	strb	r2, [r7, #9]
 800119a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800119e:	72bb      	strb	r3, [r7, #10]

			if (!(state.left || state.right))
 80011a0:	7a3b      	ldrb	r3, [r7, #8]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <_ZN15JoystickEncoder4readEv+0x3a>
 80011ac:	7a7b      	ldrb	r3, [r7, #9]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <_ZN15JoystickEncoder4readEv+0x66>
				return;

			auto time = HAL_GetTick();
 80011b8:	f000 febc 	bl	8001f34 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

			if (state.left)
 80011be:	7a3b      	ldrb	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <_ZN15JoystickEncoder4readEv+0x52>
				_leftDeadline = time + _interval;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	441a      	add	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	61da      	str	r2, [r3, #28]

			if (state.right)
 80011d0:	7a7b      	ldrb	r3, [r7, #9]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <_ZN15JoystickEncoder4readEv+0x68>
				_rightDeadline = time + _interval;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	441a      	add	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	e000      	b.n	80011e6 <_ZN15JoystickEncoder4readEv+0x68>
				return;
 80011e4:	bf00      	nop
		}
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN15JoystickEncoder4tickEv>:

		void tick() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
			if (_leftDeadline == 0 && _rightDeadline == 0)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <_ZN15JoystickEncoder4tickEv+0x18>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <_ZN15JoystickEncoder4tickEv+0x40>
				return;

			auto time = HAL_GetTick();
 8001204:	f000 fe96 	bl	8001f34 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

			if (time >= _leftDeadline)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d302      	bcc.n	800121a <_ZN15JoystickEncoder4tickEv+0x2e>
				_leftDeadline = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]

			// Right
			if (time >= _rightDeadline)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d304      	bcc.n	800122e <_ZN15JoystickEncoder4tickEv+0x42>
				_rightDeadline = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
 800122a:	e000      	b.n	800122e <_ZN15JoystickEncoder4tickEv+0x42>
				return;
 800122c:	bf00      	nop
		}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>:

		void updateReport(JoystickReportDescriptor& report, uint8_t& index) {
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
			report.buttons |= (_leftDeadline > 0) << index++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	b2d0      	uxtb	r0, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	7010      	strb	r0, [r2, #0]
 800125c:	4099      	lsls	r1, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	895b      	ldrh	r3, [r3, #10]
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	b20b      	sxth	r3, r1
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	b29a      	uxth	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	815a      	strh	r2, [r3, #10]
			report.buttons |= _pressed << index++;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	b2d0      	uxtb	r0, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	7010      	strb	r0, [r2, #0]
 8001286:	4099      	lsls	r1, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	895b      	ldrh	r3, [r3, #10]
 800128c:	b29b      	uxth	r3, r3
 800128e:	b21a      	sxth	r2, r3
 8001290:	b20b      	sxth	r3, r1
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29a      	uxth	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	815a      	strh	r2, [r3, #10]
			report.buttons |= (_rightDeadline > 0) << index++;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	b2d0      	uxtb	r0, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	7010      	strb	r0, [r2, #0]
 80012b8:	4099      	lsls	r1, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	895b      	ldrh	r3, [r3, #10]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	b20b      	sxth	r3, r1
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	815a      	strh	r2, [r3, #10]
		}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_ZN8JoystickC1Ev>:
#include "button.h"
#include "encoder.h"

class Joystick {
	public:
		Joystick() {
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b0cd      	sub	sp, #308	; 0x134
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ea:	6018      	str	r0, [r3, #0]
 80012ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f103 0410 	add.w	r4, r3, #16
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	49c6      	ldr	r1, [pc, #792]	; (800161c <_ZN8JoystickC1Ev+0x340>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fca6 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001308:	f107 0108 	add.w	r1, r7, #8
 800130c:	f640 4308 	movw	r3, #3080	; 0xc08
 8001310:	f240 629a 	movw	r2, #1690	; 0x69a
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fdb3 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 800131a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800131e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	2201      	movs	r2, #1
 800132e:	49bb      	ldr	r1, [pc, #748]	; (800161c <_ZN8JoystickC1Ev+0x340>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fc8f 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001336:	f107 0118 	add.w	r1, r7, #24
 800133a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800133e:	f240 62ea 	movw	r2, #1770	; 0x6ea
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff fd9c 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8001348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800134c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	2202      	movs	r2, #2
 800135c:	49af      	ldr	r1, [pc, #700]	; (800161c <_ZN8JoystickC1Ev+0x340>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fc78 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001364:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001368:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800136c:	f240 62ea 	movw	r2, #1770	; 0x6ea
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff fd85 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8001376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800137a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001388:	2203      	movs	r2, #3
 800138a:	49a4      	ldr	r1, [pc, #656]	; (800161c <_ZN8JoystickC1Ev+0x340>)
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fc61 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001392:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001396:	f640 33ea 	movw	r3, #3050	; 0xbea
 800139a:	f240 62c2 	movw	r2, #1730	; 0x6c2
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff fd6e 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 80013a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80013b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b6:	2204      	movs	r2, #4
 80013b8:	4998      	ldr	r1, [pc, #608]	; (800161c <_ZN8JoystickC1Ev+0x340>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc4a 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 80013c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	2200      	movs	r2, #0
 80013ca:	4620      	mov	r0, r4
 80013cc:	f7ff fd58 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 80013d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80013de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013e2:	2210      	movs	r2, #16
 80013e4:	498e      	ldr	r1, [pc, #568]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fd08 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80013ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013f0:	2220      	movs	r2, #32
 80013f2:	498b      	ldr	r1, [pc, #556]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd01 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80013fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	4987      	ldr	r1, [pc, #540]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fcfa 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001408:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800140c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001410:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001414:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001418:	f7ff fd8c 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 800141c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001420:	4619      	mov	r1, r3
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fe89 	bl	800113a <_ZN15JoystickEncoderC1ERK7Encoder>
 8001428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800142c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8001436:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	4978      	ldr	r1, [pc, #480]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fcdc 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001444:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144c:	4974      	ldr	r1, [pc, #464]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fcd4 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001454:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	4970      	ldr	r1, [pc, #448]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fccc 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001464:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001468:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800146c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001470:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001474:	f7ff fd5e 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 8001478:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fe5b 	bl	800113a <_ZN15JoystickEncoderC1ERK7Encoder>
 8001484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8001492:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800149a:	4961      	ldr	r1, [pc, #388]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fcad 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	495d      	ldr	r1, [pc, #372]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fca5 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	4959      	ldr	r1, [pc, #356]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc9d 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014c6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80014ca:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80014ce:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80014d2:	f7ff fd2f 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 80014d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014da:	4619      	mov	r1, r3
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fe2c 	bl	800113a <_ZN15JoystickEncoderC1ERK7Encoder>
 80014e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80014f0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f8:	494a      	ldr	r1, [pc, #296]	; (8001624 <_ZN8JoystickC1Ev+0x348>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fc7e 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001500:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001504:	4619      	mov	r1, r3
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fdd5 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 800150c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800151a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800151e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001522:	4940      	ldr	r1, [pc, #256]	; (8001624 <_ZN8JoystickC1Ev+0x348>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc69 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800152a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800152e:	4619      	mov	r1, r3
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fdc0 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 8001536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800153a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8001544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <_ZN8JoystickC1Ev+0x348>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fc54 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001558:	4619      	mov	r1, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fdab 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 8001560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 7498 	add.w	r4, r3, #304	; 0x130
 800156e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	492a      	ldr	r1, [pc, #168]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc3f 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800157e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001582:	4619      	mov	r1, r3
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fd96 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 800158a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800158e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8001598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800159c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a0:	4920      	ldr	r1, [pc, #128]	; (8001624 <_ZN8JoystickC1Ev+0x348>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fc2a 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80015a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fd81 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 80015b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80015c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ca:	4915      	ldr	r1, [pc, #84]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fc15 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80015d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fd6c 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>
 80015de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80015ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80015f0:	2208      	movs	r2, #8
 80015f2:	490b      	ldr	r1, [pc, #44]	; (8001620 <_ZN8JoystickC1Ev+0x344>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc01 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80015fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80015fe:	4619      	mov	r1, r3
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fd58 	bl	80010b6 <_ZN14JoystickButtonC1ERK10DigitalPin>

		}
 8001606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800160a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	2000013c 	.word	0x2000013c
 8001620:	40020400 	.word	0x40020400
 8001624:	40020000 	.word	0x40020000

08001628 <_ZN8Joystick4tickEv>:

		void tick() {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
			_toggle1.tick();
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd4f 	bl	80010da <_ZN14JoystickButton4tickEv>
			_toggle2.tick();
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fd49 	bl	80010da <_ZN14JoystickButton4tickEv>
			_toggle3.tick();
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd43 	bl	80010da <_ZN14JoystickButton4tickEv>

			_encoder1.tick();
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3388      	adds	r3, #136	; 0x88
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fdc7 	bl	80011ec <_ZN15JoystickEncoder4tickEv>
			_encoder2.tick();
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	33b4      	adds	r3, #180	; 0xb4
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fdc2 	bl	80011ec <_ZN15JoystickEncoder4tickEv>
			_encoder3.tick();
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	33e0      	adds	r3, #224	; 0xe0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdbd 	bl	80011ec <_ZN15JoystickEncoder4tickEv>

			_button1.tick();
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd2e 	bl	80010da <_ZN14JoystickButton4tickEv>
			_button2.tick();
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fd28 	bl	80010da <_ZN14JoystickButton4tickEv>
			_button3.tick();
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd22 	bl	80010da <_ZN14JoystickButton4tickEv>

			_landingGear.tick();
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd1c 	bl	80010da <_ZN14JoystickButton4tickEv>

			updateReport();
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f822 	bl	80016ec <_ZN8Joystick12updateReportEv>

			SendGovnoReport((uint8_t*) &_report, sizeof(JoystickReportDescriptor));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	210c      	movs	r1, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 ffd3 	bl	8008658 <SendGovnoReport>
		}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_ZN8Joystick9interruptEt>:

		void interrupt(uint16_t pin) {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	807b      	strh	r3, [r7, #2]
			_encoder1.read();
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3388      	adds	r3, #136	; 0x88
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fd57 	bl	800117e <_ZN15JoystickEncoder4readEv>
			_encoder2.read();
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	33b4      	adds	r3, #180	; 0xb4
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd52 	bl	800117e <_ZN15JoystickEncoder4readEv>
			_encoder3.read();
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	33e0      	adds	r3, #224	; 0xe0
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fd4d 	bl	800117e <_ZN15JoystickEncoder4readEv>
		}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN8Joystick12updateReportEv>:
			_button2 = JoystickButton(DigitalPin(GPIOA, GPIO_PIN_15)),
			_button3 = JoystickButton(DigitalPin(GPIOB, GPIO_PIN_15)),

			_landingGear = JoystickButton(DigitalPin(GPIOB, GPIO_PIN_3));

		void updateReport() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
			// Axis
			_report.x = _speedBrake.getValue();
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3310      	adds	r3, #16
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fbdd 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	801a      	strh	r2, [r3, #0]
			_report.y = _throttle1.getValue();
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3328      	adds	r3, #40	; 0x28
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fbd4 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	805a      	strh	r2, [r3, #2]
			_report.z = _throttle2.getValue();
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3340      	adds	r3, #64	; 0x40
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbcb 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	809a      	strh	r2, [r3, #4]
			_report.rx = _flaps.getValue();
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3358      	adds	r3, #88	; 0x58
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fbc2 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	80da      	strh	r2, [r3, #6]
			_report.ry = _trimWheel.getValue();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3370      	adds	r3, #112	; 0x70
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fbb9 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	811a      	strh	r2, [r3, #8]

			// Buttons
			uint8_t index = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]

			_report.buttons = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	815a      	strh	r2, [r3, #10]

			_toggle1.updateReport(_report, index);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f107 020f 	add.w	r2, r7, #15
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fcc8 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_toggle2.updateReport(_report, index);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	f107 020f 	add.w	r2, r7, #15
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fcbf 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_toggle3.updateReport(_report, index);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f107 020f 	add.w	r2, r7, #15
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fcb6 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>

			_encoder1.updateReport(_report, index);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3388      	adds	r3, #136	; 0x88
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f107 020f 	add.w	r2, r7, #15
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd4b 	bl	8001234 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>
			_encoder2.updateReport(_report, index);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	33b4      	adds	r3, #180	; 0xb4
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f107 020f 	add.w	r2, r7, #15
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd43 	bl	8001234 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>
			_encoder3.updateReport(_report, index);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	33e0      	adds	r3, #224	; 0xe0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f107 020f 	add.w	r2, r7, #15
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fd3b 	bl	8001234 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>

			_button1.updateReport(_report, index);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f107 020f 	add.w	r2, r7, #15
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fc95 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_button2.updateReport(_report, index);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f107 020f 	add.w	r2, r7, #15
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc8c 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_button3.updateReport(_report, index);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	f107 020f 	add.w	r2, r7, #15
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fc83 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>

			_landingGear.updateReport(_report, index);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f107 020f 	add.w	r2, r7, #15
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fc7a 	bl	80010fa <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
		}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <_Z8yobaMainv>:
#include "digital_pin.h"

Joystick joystick = Joystick();
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);

void yobaMain() {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	LEDPin.setValue(true);
 8001814:	2101      	movs	r1, #1
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <_Z8yobaMainv+0x14>)
 8001818:	f7ff fb03 	bl	8000e22 <_ZN10DigitalPin8setValueEb>

	while (true) {
		joystick.tick();
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <_Z8yobaMainv+0x18>)
 800181e:	f7ff ff03 	bl	8001628 <_ZN8Joystick4tickEv>
 8001822:	e7fb      	b.n	800181c <_Z8yobaMainv+0xc>
 8001824:	20000348 	.word	0x20000348
 8001828:	200001e8 	.word	0x200001e8

0800182c <_Z13yobaInterruptt>:
	}
}

void yobaInterrupt(uint16_t pin) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
	joystick.interrupt(pin);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4619      	mov	r1, r3
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <_Z13yobaInterruptt+0x1c>)
 800183c:	f7ff ff3d 	bl	80016ba <_ZN8Joystick9interruptEt>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200001e8 	.word	0x200001e8

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001850:	f000 fb0a 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001854:	f000 f80c 	bl	8001870 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001858:	f000 f8f8 	bl	8001a4c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800185c:	f000 f87a 	bl	8001954 <_ZL12MX_ADC1_Initv>
  MX_DMA_Init();
 8001860:	f000 f8d4 	bl	8001a0c <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8001864:	f006 ff0a 	bl	800867c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  yobaMain();
 8001868:	f7ff ffd2 	bl	8001810 <_Z8yobaMainv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800186c:	e7fe      	b.n	800186c <main+0x20>
	...

08001870 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f007 fb80 	bl	8008f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <_Z18SystemClock_Configv+0xdc>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a2b      	ldr	r2, [pc, #172]	; (800194c <_Z18SystemClock_Configv+0xdc>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <_Z18SystemClock_Configv+0xdc>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <_Z18SystemClock_Configv+0xe0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a25      	ldr	r2, [pc, #148]	; (8001950 <_Z18SystemClock_Configv+0xe0>)
 80018ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <_Z18SystemClock_Configv+0xe0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d6:	2302      	movs	r3, #2
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80018e0:	230f      	movs	r3, #15
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80018e4:	2390      	movs	r3, #144	; 0x90
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018e8:	2304      	movs	r3, #4
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018ec:	2305      	movs	r3, #5
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 ff6f 	bl	80047d8 <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800190a:	f000 f93a 	bl	8001b82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2302      	movs	r3, #2
 8001914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f9cc 	bl	8004cc8 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001940:	f000 f91f 	bl	8001b82 <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	3750      	adds	r7, #80	; 0x50
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <_ZL12MX_ADC1_Initv+0xb0>)
 800196a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 8001980:	2201      	movs	r2, #1
 8001982:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 800198e:	2200      	movs	r2, #0
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 8001994:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <_ZL12MX_ADC1_Initv+0xb4>)
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 80019b4:	f000 faee 	bl	8001f94 <HAL_ADC_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80019c8:	f000 f8db 	bl	8001b82 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	4619      	mov	r1, r3
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <_ZL12MX_ADC1_Initv+0xac>)
 80019de:	f000 fc9d 	bl	800231c <HAL_ADC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80019f2:	f000 f8c6 	bl	8001b82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000013c 	.word	0x2000013c
 8001a04:	40012000 	.word	0x40012000
 8001a08:	0f000001 	.word	0x0f000001

08001a0c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <_ZL11MX_DMA_Initv+0x3c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <_ZL11MX_DMA_Initv+0x3c>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <_ZL11MX_DMA_Initv+0x3c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2038      	movs	r0, #56	; 0x38
 8001a34:	f000 ff7b 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a38:	2038      	movs	r0, #56	; 0x38
 8001a3a:	f000 ff94 	bl	8002966 <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a3c      	ldr	r2, [pc, #240]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <_ZL12MX_GPIO_Initv+0x110>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB10 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_3;
 8001ab6:	f248 4308 	movw	r3, #33800	; 0x8408
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4825      	ldr	r0, [pc, #148]	; (8001b60 <_ZL12MX_GPIO_Initv+0x114>)
 8001acc:	f001 fa50 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001ad0:	f243 33f0 	movw	r3, #13296	; 0x33f0
 8001ad4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ad6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481e      	ldr	r0, [pc, #120]	; (8001b60 <_ZL12MX_GPIO_Initv+0x114>)
 8001ae8:	f001 fa42 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	4817      	ldr	r0, [pc, #92]	; (8001b60 <_ZL12MX_GPIO_Initv+0x114>)
 8001b04:	f001 fa34 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001b08:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4811      	ldr	r0, [pc, #68]	; (8001b64 <_ZL12MX_GPIO_Initv+0x118>)
 8001b1e:	f001 fa27 	bl	8002f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200a      	movs	r0, #10
 8001b28:	f000 ff01 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 ff1a 	bl	8002966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2017      	movs	r0, #23
 8001b38:	f000 fef9 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b3c:	2017      	movs	r0, #23
 8001b3e:	f000 ff12 	bl	8002966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2028      	movs	r0, #40	; 0x28
 8001b48:	f000 fef1 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4c:	2028      	movs	r0, #40	; 0x28
 8001b4e:	f000 ff0a 	bl	8002966 <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020000 	.word	0x40020000

08001b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
	yobaInterrupt(pin);
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe59 	bl	800182c <_Z13yobaInterruptt>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b86:	b672      	cpsid	i
}
 8001b88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <Error_Handler+0x8>

08001b8c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10d      	bne.n	8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d108      	bne.n	8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Joystick joystick = Joystick();
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001ba8:	f7ff fb98 	bl	80012dc <_ZN8JoystickC1Ev>
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);
 8001bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001bb4:	f7ff f922 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200001e8 	.word	0x200001e8
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	20000348 	.word	0x20000348

08001bcc <_GLOBAL__sub_I_hadc1>:
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff ffd9 	bl	8001b8c <_Z41__static_initialization_and_destruction_0ii>
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_ADC_MspInit+0xdc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d157      	bne.n	8001cfe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_ADC_MspInit+0xe0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c86:	231f      	movs	r3, #31
 8001c88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	481d      	ldr	r0, [pc, #116]	; (8001d10 <HAL_ADC_MspInit+0xe4>)
 8001c9a:	f001 f969 	bl	8002f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_ADC_MspInit+0xec>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ccc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001ce4:	f000 fe5a 	bl	800299c <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cee:	f7ff ff48 	bl	8001b82 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_ADC_MspInit+0xe8>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40012000 	.word	0x40012000
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	20000184 	.word	0x20000184
 8001d18:	40026410 	.word	0x40026410

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <NMI_Handler+0x4>

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d68:	f000 f8d0 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d74:	2010      	movs	r0, #16
 8001d76:	f001 fab1 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d82:	2020      	movs	r0, #32
 8001d84:	f001 faaa 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d88:	2040      	movs	r0, #64	; 0x40
 8001d8a:	f001 faa7 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d8e:	2080      	movs	r0, #128	; 0x80
 8001d90:	f001 faa4 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d98:	f001 faa0 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001d9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001da0:	f001 fa9c 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001dac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001db0:	f001 fa94 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001db4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001db8:	f001 fa90 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dc0:	f001 fa8c 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dce:	f000 fe93 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000184 	.word	0x20000184

08001ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <OTG_FS_IRQHandler+0x10>)
 8001de2:	f001 fbe3 	bl	80035ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000834 	.word	0x20000834

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f007 f87b 	bl	8008f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff fd01 	bl	800184c <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001e58:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8001e5c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001e60:	20000d98 	.word	0x20000d98

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fd41 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe9e 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fd59 	bl	8002982 <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 fd21 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000350 	.word	0x20000350

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000350 	.word	0x20000350

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000008 	.word	0x20000008

08001f94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e033      	b.n	8002012 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe3a 	bl	8001c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fda:	f023 0302 	bic.w	r3, r3, #2
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 faca 	bl	8002580 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
 8002002:	e001      	b.n	8002008 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Start+0x1a>
 8002032:	2302      	movs	r3, #2
 8002034:	e097      	b.n	8002166 <HAL_ADC_Start+0x14a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d018      	beq.n	800207e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_ADC_Start+0x158>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_ADC_Start+0x15c>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9a      	lsrs	r2, r3, #18
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d15f      	bne.n	800214c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	d106      	bne.n	80020da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	f023 0206 	bic.w	r2, r3, #6
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_ADC_Start+0x160>)
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d129      	bne.n	8002164 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e020      	b.n	8002164 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_ADC_Start+0x164>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d11b      	bne.n	8002164 <HAL_ADC_Start+0x148>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d114      	bne.n	8002164 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e00b      	b.n	8002164 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000
 8002178:	431bde83 	.word	0x431bde83
 800217c:	40012300 	.word	0x40012300
 8002180:	40012000 	.word	0x40012000

08002184 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Stop+0x16>
 8002196:	2302      	movs	r3, #2
 8002198:	e021      	b.n	80021de <HAL_ADC_Stop+0x5a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d113      	bne.n	8002230 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e063      	b.n	80022f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002230:	f7ff fe80 	bl	8001f34 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002236:	e021      	b.n	800227c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d01d      	beq.n	800227c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_ADC_PollForConversion+0x6c>
 8002246:	f7ff fe75 	bl	8001f34 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d212      	bcs.n	800227c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d00b      	beq.n	800227c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03d      	b.n	80022f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d1d6      	bne.n	8002238 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f06f 0212 	mvn.w	r2, #18
 8002292:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11f      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e113      	b.n	8002560 <HAL_ADC_ConfigChannel+0x244>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d925      	bls.n	8002394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	4603      	mov	r3, r0
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4403      	add	r3, r0
 8002386:	3b1e      	subs	r3, #30
 8002388:	409a      	lsls	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	e022      	b.n	80023da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	2207      	movs	r2, #7
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4403      	add	r3, r0
 80023d0:	409a      	lsls	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d824      	bhi.n	800242c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b05      	subs	r3, #5
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b05      	subs	r3, #5
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
 800242a:	e04c      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d824      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b23      	subs	r3, #35	; 0x23
 8002446:	221f      	movs	r2, #31
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43da      	mvns	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	400a      	ands	r2, r1
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b23      	subs	r3, #35	; 0x23
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
 800247c:	e023      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b41      	subs	r3, #65	; 0x41
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	400a      	ands	r2, r1
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b41      	subs	r3, #65	; 0x41
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_ADC_ConfigChannel+0x250>)
 80024c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_ADC_ConfigChannel+0x254>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10f      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1d8>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_ADC_ConfigChannel+0x254>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12b      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_ADC_ConfigChannel+0x258>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x1f4>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b11      	cmp	r3, #17
 800250e:	d122      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_ADC_ConfigChannel+0x258>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d111      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_ADC_ConfigChannel+0x25c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_ADC_ConfigChannel+0x260>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9a      	lsrs	r2, r3, #18
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	40012000 	.word	0x40012000
 8002574:	10000012 	.word	0x10000012
 8002578:	20000000 	.word	0x20000000
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <ADC_Init+0x1f0>)
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <ADC_Init+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	e00f      	b.n	800267e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800267c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0202 	bic.w	r2, r2, #2
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e1b      	ldrb	r3, [r3, #24]
 8002698:	005a      	lsls	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	3b01      	subs	r3, #1
 80026d8:	035a      	lsls	r2, r3, #13
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e007      	b.n	80026f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	3b01      	subs	r3, #1
 8002710:	051a      	lsls	r2, r3, #20
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002736:	025a      	lsls	r2, r3, #9
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	029a      	lsls	r2, r3, #10
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012300 	.word	0x40012300
 8002774:	0f000001 	.word	0x0f000001

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fac4 	bl	8001f34 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e099      	b.n	8002aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d8:	e00f      	b.n	80029fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029da:	f7ff faab 	bl	8001f34 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d908      	bls.n	80029fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2203      	movs	r2, #3
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e078      	b.n	8002aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e8      	bne.n	80029da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_DMA_Init+0x158>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d117      	bne.n	8002abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f9e9 	bl	8002e78 <DMA_CheckFifoParam>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aba:	2301      	movs	r3, #1
 8002abc:	e016      	b.n	8002aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9a0 	bl	8002e0c <DMA_CalcBaseAndBitshift>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	223f      	movs	r2, #63	; 0x3f
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	f010803f 	.word	0xf010803f

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b04:	4b8e      	ldr	r3, [pc, #568]	; (8002d40 <HAL_DMA_IRQHandler+0x248>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8e      	ldr	r2, [pc, #568]	; (8002d44 <HAL_DMA_IRQHandler+0x24c>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2208      	movs	r2, #8
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2208      	movs	r2, #8
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03c      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d024      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e01f      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808f 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8087 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2220      	movs	r2, #32
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d136      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0x1da>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07e      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
        }
        return;
 8002d0e:	e079      	b.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e02c      	b.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000
 8002d44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
 8002d58:	e01e      	b.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10f      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0210 	bic.w	r2, r2, #16
 8002d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d032      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d022      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2205      	movs	r2, #5
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d307      	bcc.n	8002de0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f2      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x2cc>
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e000      	b.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e04:	bf00      	nop
    }
  }
}
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b10      	subs	r3, #16
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <DMA_CalcBaseAndBitshift+0x64>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <DMA_CalcBaseAndBitshift+0x68>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d909      	bls.n	8002e4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e4c:	e007      	b.n	8002e5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	aaaaaaab 	.word	0xaaaaaaab
 8002e74:	0800901c 	.word	0x0800901c

08002e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d856      	bhi.n	8002f46 <DMA_CheckFifoParam+0xce>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x28>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec3 	.word	0x08002ec3
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002f47 	.word	0x08002f47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d046      	beq.n	8002f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e043      	b.n	8002f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eca:	d140      	bne.n	8002f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e03d      	b.n	8002f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d121      	bne.n	8002f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d837      	bhi.n	8002f52 <DMA_CheckFifoParam+0xda>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x70>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002eff 	.word	0x08002eff
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f11 	.word	0x08002f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e030      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d025      	beq.n	8002f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e022      	b.n	8002f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f18:	d11f      	bne.n	8002f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f1e:	e01c      	b.n	8002f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d903      	bls.n	8002f2e <DMA_CheckFifoParam+0xb6>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d003      	beq.n	8002f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f2c:	e018      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      break;
 8002f32:	e015      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e00b      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f46:	bf00      	nop
 8002f48:	e00a      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e008      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e006      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e159      	b.n	8003240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8148 	bne.w	800323a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a2 	beq.w	800323a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_GPIO_Init+0x2ec>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x202>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_GPIO_Init+0x2f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x1fe>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_GPIO_Init+0x2f8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x1fa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_GPIO_Init+0x2fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x1f6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a45      	ldr	r2, [pc, #276]	; (8003270 <HAL_GPIO_Init+0x300>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x1f2>
 800315e:	2304      	movs	r3, #4
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003162:	2307      	movs	r3, #7
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	; (800325c <HAL_GPIO_Init+0x2ec>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_GPIO_Init+0x304>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f aea2 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e001      	b.n	800329a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032f2:	4a05      	ldr	r2, [pc, #20]	; (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fc34 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	b08f      	sub	sp, #60	; 0x3c
 8003310:	af0a      	add	r7, sp, #40	; 0x28
 8003312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e10f      	b.n	800353e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f005 fb07 	bl	800894c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2203      	movs	r2, #3
 8003342:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f001 ff80 	bl	8005262 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	687e      	ldr	r6, [r7, #4]
 800336a:	466d      	mov	r5, sp
 800336c:	f106 0410 	add.w	r4, r6, #16
 8003370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800337c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003380:	1d33      	adds	r3, r6, #4
 8003382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003384:	6838      	ldr	r0, [r7, #0]
 8003386:	f001 fe57 	bl	8005038 <USB_CoreInit>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0d0      	b.n	800353e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 ff6e 	bl	8005284 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e04a      	b.n	8003444 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	333d      	adds	r3, #61	; 0x3d
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	333c      	adds	r3, #60	; 0x3c
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	b298      	uxth	r0, r3
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	; 0x44
 80033ea:	4602      	mov	r2, r0
 80033ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3340      	adds	r3, #64	; 0x40
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3348      	adds	r3, #72	; 0x48
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334c      	adds	r3, #76	; 0x4c
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3354      	adds	r3, #84	; 0x54
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3301      	adds	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3af      	bcc.n	80033ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e044      	b.n	80034de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3b5      	bcc.n	8003454 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	687e      	ldr	r6, [r7, #4]
 80034f0:	466d      	mov	r5, sp
 80034f2:	f106 0410 	add.w	r4, r6, #16
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003502:	e885 0003 	stmia.w	r5, {r0, r1}
 8003506:	1d33      	adds	r3, r6, #4
 8003508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f001 ff06 	bl	800531c <USB_DevInit>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e00d      	b.n	800353e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f003 f855 	bl	80065e6 <USB_DevDisconnect>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003546 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_PCD_Start+0x1c>
 800355e:	2302      	movs	r3, #2
 8003560:	e020      	b.n	80035a4 <HAL_PCD_Start+0x5e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	2b01      	cmp	r3, #1
 8003570:	d109      	bne.n	8003586 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003576:	2b01      	cmp	r3, #1
 8003578:	d005      	beq.n	8003586 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fe58 	bl	8005240 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 f805 	bl	80065a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08d      	sub	sp, #52	; 0x34
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 f8c3 	bl	800674e <USB_GetMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 848a 	bne.w	8003ee4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 f827 	bl	8006628 <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8480 	beq.w	8003ee2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 f814 	bl	8006628 <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f002 0202 	and.w	r2, r2, #2
 8003618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f802 	bl	8006628 <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b10      	cmp	r3, #16
 800362c:	d161      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0c5b      	lsrs	r3, r3, #17
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2b02      	cmp	r3, #2
 8003668:	d124      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d035      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f002 fe39 	bl	8006300 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369a:	441a      	add	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	6a1a      	ldr	r2, [r3, #32]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ac:	441a      	add	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
 80036b2:	e016      	b.n	80036e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	0c5b      	lsrs	r3, r3, #17
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d110      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036c6:	2208      	movs	r2, #8
 80036c8:	4619      	mov	r1, r3
 80036ca:	6a38      	ldr	r0, [r7, #32]
 80036cc:	f002 fe18 	bl	8006300 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036dc:	441a      	add	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0210 	orr.w	r2, r2, #16
 80036f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 ff96 	bl	8006628 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003706:	f040 80a7 	bne.w	8003858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f002 ff9b 	bl	800664e <USB_ReadDevAllOutEpInterrupt>
 8003718:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800371a:	e099      	b.n	8003850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 808e 	beq.w	8003844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f002 ffbf 	bl	80066b6 <USB_ReadDevOutEPInterrupt>
 8003738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	2301      	movs	r3, #1
 8003754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 feab 	bl	80044b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	2308      	movs	r3, #8
 8003778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800377a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 ff81 	bl	8004684 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	461a      	mov	r2, r3
 800379a:	2310      	movs	r3, #16
 800379c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d030      	beq.n	800380a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d109      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f005 f9a6 	bl	8008b44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	2302      	movs	r3, #2
 8003808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2320      	movs	r3, #32
 8003824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	3301      	adds	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	f47f af62 	bne.w	800371c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f002 fee3 	bl	8006628 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800386c:	f040 80db 	bne.w	8003a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f002 ff04 	bl	8006682 <USB_ReadDevAllInEpInterrupt>
 800387a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003880:	e0cd      	b.n	8003a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80c2 	beq.w	8003a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f002 ff2a 	bl	80066f2 <USB_ReadDevInEPInterrupt>
 800389e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d057      	beq.n	800395a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2201      	movs	r2, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69f9      	ldr	r1, [r7, #28]
 80038c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ca:	4013      	ands	r3, r2
 80038cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	2301      	movs	r3, #1
 80038de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d132      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	334c      	adds	r3, #76	; 0x4c
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	3348      	adds	r3, #72	; 0x48
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4419      	add	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4403      	add	r3, r0
 800391c:	334c      	adds	r3, #76	; 0x4c
 800391e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d113      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3354      	adds	r3, #84	; 0x54
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003946:	461a      	mov	r2, r3
 8003948:	2101      	movs	r1, #1
 800394a:	f002 ff31 	bl	80067b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f005 f87a 	bl	8008a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	2308      	movs	r3, #8
 8003974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	2310      	movs	r3, #16
 8003990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ba:	6a38      	ldr	r0, [r7, #32]
 80039bc:	f001 fe12 	bl	80055e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3338      	adds	r3, #56	; 0x38
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	78db      	ldrb	r3, [r3, #3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f005 f8bd 	bl	8008b68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2302      	movs	r3, #2
 80039fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fcc3 	bl	8004398 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	3301      	adds	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f af2e 	bne.w	8003882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 fdfc 	bl	8006628 <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3a:	d122      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a62:	2100      	movs	r1, #0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 feab 	bl	80047c0 <HAL_PCDEx_LPM_Callback>
 8003a6a:	e002      	b.n	8003a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f005 f85b 	bl	8008b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fdce 	bl	8006628 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a96:	d112      	bne.n	8003abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f005 f817 	bl	8008adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003abc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fdb0 	bl	8006628 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	f040 80b7 	bne.w	8003c44 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2110      	movs	r1, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fd77 	bl	80055e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	e046      	b.n	8003b8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	3301      	adds	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3b3      	bcc.n	8003afc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ba6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc0:	f043 030b 	orr.w	r3, r3, #11
 8003bc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd6:	f043 030b 	orr.w	r3, r3, #11
 8003bda:	6453      	str	r3, [r2, #68]	; 0x44
 8003bdc:	e015      	b.n	8003c0a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bf0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003bf4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c04:	f043 030b 	orr.w	r3, r3, #11
 8003c08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f002 fdbe 	bl	80067b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fced 	bl	8006628 <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c58:	d124      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fd83 	bl	800676a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fd38 	bl	80056de <USB_GetDevSpeed>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681c      	ldr	r4, [r3, #0]
 8003c7a:	f001 f9d1 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8003c7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f001 fa37 	bl	80050fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f004 ff05 	bl	8008a9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f002 fcbd 	bl	8006628 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d10a      	bne.n	8003cce <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f004 fee2 	bl	8008a82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 0208 	and.w	r2, r2, #8
 8003ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 fca8 	bl	8006628 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d122      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	e014      	b.n	8003d1e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb0f 	bl	8004336 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3e5      	bcc.n	8003cf4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fc7b 	bl	8006628 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3c:	d13b      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	e02b      	b.n	8003d9c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3340      	adds	r3, #64	; 0x40
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d115      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	da12      	bge.n	8003d96 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	333f      	adds	r3, #63	; 0x3f
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fad0 	bl	8004336 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3ce      	bcc.n	8003d44 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 fc34 	bl	8006628 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dca:	d155      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e045      	b.n	8003e5e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d12e      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da2b      	bge.n	8003e58 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d121      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e54:	6053      	str	r3, [r2, #4]
            break;
 8003e56:	e007      	b.n	8003e68 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3b4      	bcc.n	8003dd2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fbd3 	bl	8006628 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f004 fe7c 	bl	8008b8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fbbd 	bl	8006628 <USB_ReadInterrupts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d115      	bne.n	8003ee4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f004 fe6c 	bl	8008ba8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]
 8003ee0:	e000      	b.n	8003ee4 <HAL_PCD_IRQHandler+0x938>
      return;
 8003ee2:	bf00      	nop
    }
  }
}
 8003ee4:	3734      	adds	r7, #52	; 0x34
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}

08003eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_SetAddress+0x1a>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e013      	b.n	8003f2c <HAL_PCD_SetAddress+0x42>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 fb1b 	bl	8006558 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	70fb      	strb	r3, [r7, #3]
 8003f46:	460b      	mov	r3, r1
 8003f48:	803b      	strh	r3, [r7, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0f      	bge.n	8003f7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3338      	adds	r3, #56	; 0x38
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	705a      	strb	r2, [r3, #1]
 8003f78:	e00f      	b.n	8003f9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fa6:	883a      	ldrh	r2, [r7, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	78ba      	ldrb	r2, [r7, #2]
 8003fb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fc4:	78bb      	ldrb	r3, [r7, #2]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d102      	bne.n	8003fd0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_PCD_EP_Open+0xaa>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e00e      	b.n	8003ffc <HAL_PCD_EP_Open+0xc8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f001 fb9b 	bl	8005728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0f      	bge.n	8004038 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3338      	adds	r3, #56	; 0x38
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	705a      	strb	r2, [r3, #1]
 8004036:	e00f      	b.n	8004058 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_PCD_EP_Close+0x6e>
 800406e:	2302      	movs	r3, #2
 8004070:	e00e      	b.n	8004090 <HAL_PCD_EP_Close+0x8c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fbd9 	bl	8005838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	460b      	mov	r3, r1
 80040a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a8:	7afb      	ldrb	r3, [r7, #11]
 80040aa:	f003 020f 	and.w	r2, r3, #15
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	3304      	adds	r3, #4
 80040c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040da:	7afb      	ldrb	r3, [r7, #11]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6979      	ldr	r1, [r7, #20]
 800410c:	f001 feb8 	bl	8005e80 <USB_EP0StartXfer>
 8004110:	e008      	b.n	8004124 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	f001 fc66 	bl	80059f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	460b      	mov	r3, r1
 800413c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3338      	adds	r3, #56	; 0x38
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2201      	movs	r2, #1
 800416c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	b2da      	uxtb	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6979      	ldr	r1, [r7, #20]
 80041a0:	f001 fe6e 	bl	8005e80 <USB_EP0StartXfer>
 80041a4:	e008      	b.n	80041b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	f001 fc1c 	bl	80059f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d901      	bls.n	80041e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e050      	b.n	8004282 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	da0f      	bge.n	8004208 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	3338      	adds	r3, #56	; 0x38
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	705a      	strb	r2, [r3, #1]
 8004206:	e00d      	b.n	8004224 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_PCD_EP_SetStall+0x82>
 8004240:	2302      	movs	r3, #2
 8004242:	e01e      	b.n	8004282 <HAL_PCD_EP_SetStall+0xc0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	4618      	mov	r0, r3
 8004254:	f002 f8ac 	bl	80063b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	b2d9      	uxtb	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004272:	461a      	mov	r2, r3
 8004274:	f002 fa9c 	bl	80067b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d901      	bls.n	80042a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e042      	b.n	800432e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da0f      	bge.n	80042d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	f003 020f 	and.w	r2, r3, #15
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	3338      	adds	r3, #56	; 0x38
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	705a      	strb	r2, [r3, #1]
 80042ce:	e00f      	b.n	80042f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	3304      	adds	r3, #4
 80042e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_PCD_EP_ClrStall+0x86>
 800430c:	2302      	movs	r3, #2
 800430e:	e00e      	b.n	800432e <HAL_PCD_EP_ClrStall+0xa4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68f9      	ldr	r1, [r7, #12]
 800431e:	4618      	mov	r0, r3
 8004320:	f002 f8b4 	bl	800648c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da0c      	bge.n	8004364 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e00c      	b.n	800437e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	3304      	adds	r3, #4
 800437c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f001 fed3 	bl	8006130 <USB_EPStopXfer>
 800438a:	4603      	mov	r3, r0
 800438c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800438e:	7afb      	ldrb	r3, [r7, #11]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	3338      	adds	r3, #56	; 0x38
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	3304      	adds	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d901      	bls.n	80043d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e06c      	b.n	80044aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	699a      	ldr	r2, [r3, #24]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d902      	bls.n	80043ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3303      	adds	r3, #3
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043f4:	e02b      	b.n	800444e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	429a      	cmp	r2, r3
 800440a:	d902      	bls.n	8004412 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3303      	adds	r3, #3
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800442a:	b2db      	uxtb	r3, r3
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4603      	mov	r3, r0
 8004430:	6978      	ldr	r0, [r7, #20]
 8004432:	f001 ff27 	bl	8006284 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	441a      	add	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	b29b      	uxth	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	d809      	bhi.n	8004478 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800446c:	429a      	cmp	r2, r3
 800446e:	d203      	bcs.n	8004478 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1be      	bne.n	80043f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	429a      	cmp	r2, r3
 8004482:	d811      	bhi.n	80044a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	43db      	mvns	r3, r3
 800449e:	6939      	ldr	r1, [r7, #16]
 80044a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a4:	4013      	ands	r3, r2
 80044a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	333c      	adds	r3, #60	; 0x3c
 80044cc:	3304      	adds	r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d17b      	bne.n	80045e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4a61      	ldr	r2, [pc, #388]	; (800467c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	f240 80b9 	bls.w	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80b3 	beq.w	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451c:	6093      	str	r3, [r2, #8]
 800451e:	e0a7      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	461a      	mov	r2, r3
 8004538:	2320      	movs	r3, #32
 800453a:	6093      	str	r3, [r2, #8]
 800453c:	e098      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 8093 	bne.w	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4a4b      	ldr	r2, [pc, #300]	; (800467c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d90f      	bls.n	8004572 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	461a      	mov	r2, r3
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	6093      	str	r3, [r2, #8]
 8004570:	e07e      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	0159      	lsls	r1, r3, #5
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	440b      	add	r3, r1
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d114      	bne.n	80045d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045bc:	461a      	mov	r2, r3
 80045be:	2101      	movs	r1, #1
 80045c0:	f002 f8f6 	bl	80067b0 <USB_EP0_OutStart>
 80045c4:	e006      	b.n	80045d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	441a      	add	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f004 fa1c 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
 80045e0:	e046      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d124      	bne.n	8004634 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	461a      	mov	r2, r3
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	6093      	str	r3, [r2, #8]
 8004608:	e032      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	461a      	mov	r2, r3
 8004622:	2320      	movs	r3, #32
 8004624:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f004 f9f3 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
 8004632:	e01d      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d114      	bne.n	8004664 <PCD_EP_OutXfrComplete_int+0x1b0>
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800465c:	461a      	mov	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	f002 f8a6 	bl	80067b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f004 f9d4 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	4f54300a 	.word	0x4f54300a
 8004680:	4f54310a 	.word	0x4f54310a

08004684 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	333c      	adds	r3, #60	; 0x3c
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <PCD_EP_OutSetupPacket_int+0x88>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d90e      	bls.n	80046d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f004 f98b 	bl	80089f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <PCD_EP_OutSetupPacket_int+0x88>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d90c      	bls.n	8004700 <PCD_EP_OutSetupPacket_int+0x7c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d108      	bne.n	8004700 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046f8:	461a      	mov	r2, r3
 80046fa:	2101      	movs	r1, #1
 80046fc:	f002 f858 	bl	80067b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	4f54300a 	.word	0x4f54300a

08004710 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
 800471c:	4613      	mov	r3, r2
 800471e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d107      	bne.n	800473e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800472e:	883b      	ldrh	r3, [r7, #0]
 8004730:	0419      	lsls	r1, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	430a      	orrs	r2, r1
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
 800473c:	e028      	b.n	8004790 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e00d      	b.n	800476e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	3340      	adds	r3, #64	; 0x40
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	3301      	adds	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	429a      	cmp	r2, r3
 8004776:	d3ec      	bcc.n	8004752 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004778:	883b      	ldrh	r3, [r7, #0]
 800477a:	0418      	lsls	r0, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	3b01      	subs	r3, #1
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4302      	orrs	r2, r0
 8004788:	3340      	adds	r3, #64	; 0x40
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e267      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d075      	beq.n	80048e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f6:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d00c      	beq.n	800481c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480a:	2b08      	cmp	r3, #8
 800480c:	d112      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x108>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d157      	bne.n	80048e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e242      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x74>
 800483e:	4b76      	ldr	r3, [pc, #472]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a75      	ldr	r2, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x98>
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6f      	ldr	r2, [pc, #444]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6c      	ldr	r2, [pc, #432]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a68      	ldr	r2, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd fb50 	bl	8001f34 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd fb4c 	bl	8001f34 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e207      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xc0>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fd fb3c 	bl	8001f34 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fb38 	bl	8001f34 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1f3      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d2:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0xe8>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d063      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ee:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d11c      	bne.n	8004940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004906:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCC_OscConfig+0x152>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e1c7      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4937      	ldr	r1, [pc, #220]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	e03a      	b.n	80049b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004948:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <HAL_RCC_OscConfig+0x244>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd faf1 	bl	8001f34 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004956:	f7fd faed 	bl	8001f34 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e1a8      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4925      	ldr	r1, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	e015      	b.n	80049b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_OscConfig+0x244>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd fad0 	bl	8001f34 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004998:	f7fd facc 	bl	8001f34 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e187      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d036      	beq.n	8004a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_RCC_OscConfig+0x248>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fab0 	bl	8001f34 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd faac 	bl	8001f34 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e167      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x240>)
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x200>
 80049f6:	e01b      	b.n	8004a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_OscConfig+0x248>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fd fa99 	bl	8001f34 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	e00e      	b.n	8004a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fd fa95 	bl	8001f34 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d907      	bls.n	8004a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e150      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	42470000 	.word	0x42470000
 8004a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ea      	bne.n	8004a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8097 	beq.w	8004b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	4b7d      	ldr	r3, [pc, #500]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a7c      	ldr	r2, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5e:	4b7a      	ldr	r3, [pc, #488]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <HAL_RCC_OscConfig+0x474>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7a:	4b74      	ldr	r3, [pc, #464]	; (8004c4c <HAL_RCC_OscConfig+0x474>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a73      	ldr	r2, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x474>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fd fa55 	bl	8001f34 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fd fa51 	bl	8001f34 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e10c      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCC_OscConfig+0x474>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x2ea>
 8004ab4:	4b64      	ldr	r3, [pc, #400]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a63      	ldr	r2, [pc, #396]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	e01c      	b.n	8004afc <HAL_RCC_OscConfig+0x324>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x30c>
 8004aca:	4b5f      	ldr	r3, [pc, #380]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	4a5e      	ldr	r2, [pc, #376]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
 8004ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad6:	4b5c      	ldr	r3, [pc, #368]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a5b      	ldr	r2, [pc, #364]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0x324>
 8004ae4:	4b58      	ldr	r3, [pc, #352]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a57      	ldr	r2, [pc, #348]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	4b55      	ldr	r3, [pc, #340]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a54      	ldr	r2, [pc, #336]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004af6:	f023 0304 	bic.w	r3, r3, #4
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd fa16 	bl	8001f34 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fa12 	bl	8001f34 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0cb      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b22:	4b49      	ldr	r3, [pc, #292]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ee      	beq.n	8004b0c <HAL_RCC_OscConfig+0x334>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b30:	f7fd fa00 	bl	8001f34 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fd f9fc 	bl	8001f34 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e0b5      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4e:	4b3e      	ldr	r3, [pc, #248]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1ee      	bne.n	8004b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b60:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	4a38      	ldr	r2, [pc, #224]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a1 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b76:	4b34      	ldr	r3, [pc, #208]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d05c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d141      	bne.n	8004c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8a:	4b31      	ldr	r3, [pc, #196]	; (8004c50 <HAL_RCC_OscConfig+0x478>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fd f9d0 	bl	8001f34 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fd f9cc 	bl	8001f34 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e087      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	061b      	lsls	r3, r3, #24
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_OscConfig+0x478>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd f9a5 	bl	8001f34 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bee:	f7fd f9a1 	bl	8001f34 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e05c      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x416>
 8004c0c:	e054      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <HAL_RCC_OscConfig+0x478>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd f98e 	bl	8001f34 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fd f98a 	bl	8001f34 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e045      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x470>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x444>
 8004c3a:	e03d      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e038      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x4ec>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d028      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d121      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d11a      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800

08004cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0cc      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90c      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0b8      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a58      	ldr	r2, [pc, #352]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d34:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	494d      	ldr	r1, [pc, #308]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d044      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d119      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e07f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d86:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e06f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e067      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da6:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 0203 	bic.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4934      	ldr	r1, [pc, #208]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db8:	f7fd f8bc 	bl	8001f34 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc0:	f7fd f8b8 	bl	8001f34 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e04f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 020c 	and.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1eb      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d20c      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e032      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4916      	ldr	r1, [pc, #88]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e4e:	f000 f821 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	490a      	ldr	r1, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	5ccb      	ldrb	r3, [r1, r3]
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd f81c 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800900c 	.word	0x0800900c
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e98:	b090      	sub	sp, #64	; 0x40
 8004e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	f200 80a1 	bhi.w	8005000 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x3a>
 8004ec6:	e09b      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b53      	ldr	r3, [pc, #332]	; (8005018 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ecc:	e09b      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ece:	4b53      	ldr	r3, [pc, #332]	; (800501c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ed2:	e098      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed4:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ede:	4b4d      	ldr	r3, [pc, #308]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d028      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004efc:	2100      	movs	r1, #0
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f00:	fb03 f201 	mul.w	r2, r3, r1
 8004f04:	2300      	movs	r3, #0
 8004f06:	fb00 f303 	mul.w	r3, r0, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	4a43      	ldr	r2, [pc, #268]	; (800501c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f14:	460a      	mov	r2, r1
 8004f16:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1a:	4413      	add	r3, r2
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2200      	movs	r2, #0
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	61fa      	str	r2, [r7, #28]
 8004f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f2e:	f7fb fce1 	bl	80008f4 <__aeabi_uldivmod>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4613      	mov	r3, r2
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3a:	e053      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	2200      	movs	r2, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	617a      	str	r2, [r7, #20]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f4e:	f04f 0b00 	mov.w	fp, #0
 8004f52:	4652      	mov	r2, sl
 8004f54:	465b      	mov	r3, fp
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f64:	0150      	lsls	r0, r2, #5
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f6e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f86:	ebb2 0408 	subs.w	r4, r2, r8
 8004f8a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	00eb      	lsls	r3, r5, #3
 8004f98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9c:	00e2      	lsls	r2, r4, #3
 8004f9e:	4614      	mov	r4, r2
 8004fa0:	461d      	mov	r5, r3
 8004fa2:	eb14 030a 	adds.w	r3, r4, sl
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	eb45 030b 	adc.w	r3, r5, fp
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fba:	4629      	mov	r1, r5
 8004fbc:	028b      	lsls	r3, r1, #10
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	028a      	lsls	r2, r1, #10
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	2200      	movs	r2, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	60fa      	str	r2, [r7, #12]
 8004fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd8:	f7fb fc8c 	bl	80008f4 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetSysClockFreq+0x184>)
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005008:	4618      	mov	r0, r3
 800500a:	3740      	adds	r7, #64	; 0x40
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	00f42400 	.word	0x00f42400
 800501c:	017d7840 	.word	0x017d7840

08005020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCC_GetHCLKFreq+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000000 	.word	0x20000000

08005038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005038:	b084      	sub	sp, #16
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	f107 001c 	add.w	r0, r7, #28
 8005046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b01      	cmp	r3, #1
 800504e:	d122      	bne.n	8005096 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d105      	bne.n	800508a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 fbee 	bl	800686c <USB_CoreReset>
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	e01a      	b.n	80050cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fbe2 	bl	800686c <USB_CoreReset>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
 80050be:	e005      	b.n	80050cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10b      	bne.n	80050ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f043 0206 	orr.w	r2, r3, #6
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f6:	b004      	add	sp, #16
 80050f8:	4770      	bx	lr
	...

080050fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d165      	bne.n	80051dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a41      	ldr	r2, [pc, #260]	; (8005218 <USB_SetTurnaroundTime+0x11c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d906      	bls.n	8005126 <USB_SetTurnaroundTime+0x2a>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <USB_SetTurnaroundTime+0x120>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d202      	bcs.n	8005126 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005120:	230f      	movs	r3, #15
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e062      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a3c      	ldr	r2, [pc, #240]	; (800521c <USB_SetTurnaroundTime+0x120>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d306      	bcc.n	800513c <USB_SetTurnaroundTime+0x40>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4a3b      	ldr	r2, [pc, #236]	; (8005220 <USB_SetTurnaroundTime+0x124>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d202      	bcs.n	800513c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005136:	230e      	movs	r3, #14
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e057      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <USB_SetTurnaroundTime+0x124>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d306      	bcc.n	8005152 <USB_SetTurnaroundTime+0x56>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a37      	ldr	r2, [pc, #220]	; (8005224 <USB_SetTurnaroundTime+0x128>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d202      	bcs.n	8005152 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800514c:	230d      	movs	r3, #13
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e04c      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a33      	ldr	r2, [pc, #204]	; (8005224 <USB_SetTurnaroundTime+0x128>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d306      	bcc.n	8005168 <USB_SetTurnaroundTime+0x6c>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4a32      	ldr	r2, [pc, #200]	; (8005228 <USB_SetTurnaroundTime+0x12c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d802      	bhi.n	8005168 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005162:	230c      	movs	r3, #12
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e041      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <USB_SetTurnaroundTime+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d906      	bls.n	800517e <USB_SetTurnaroundTime+0x82>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4a2e      	ldr	r2, [pc, #184]	; (800522c <USB_SetTurnaroundTime+0x130>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d802      	bhi.n	800517e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005178:	230b      	movs	r3, #11
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e036      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <USB_SetTurnaroundTime+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d906      	bls.n	8005194 <USB_SetTurnaroundTime+0x98>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <USB_SetTurnaroundTime+0x134>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d802      	bhi.n	8005194 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800518e:	230a      	movs	r3, #10
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e02b      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a26      	ldr	r2, [pc, #152]	; (8005230 <USB_SetTurnaroundTime+0x134>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d906      	bls.n	80051aa <USB_SetTurnaroundTime+0xae>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4a25      	ldr	r2, [pc, #148]	; (8005234 <USB_SetTurnaroundTime+0x138>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d202      	bcs.n	80051aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051a4:	2309      	movs	r3, #9
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e020      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <USB_SetTurnaroundTime+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d306      	bcc.n	80051c0 <USB_SetTurnaroundTime+0xc4>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <USB_SetTurnaroundTime+0x13c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d802      	bhi.n	80051c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051ba:	2308      	movs	r3, #8
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e015      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <USB_SetTurnaroundTime+0x13c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d906      	bls.n	80051d6 <USB_SetTurnaroundTime+0xda>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	; (800523c <USB_SetTurnaroundTime+0x140>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051d0:	2307      	movs	r3, #7
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e00a      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051d6:	2306      	movs	r3, #6
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e007      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051e2:	2309      	movs	r3, #9
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e001      	b.n	80051ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051e8:	2309      	movs	r3, #9
 80051ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	029b      	lsls	r3, r3, #10
 8005200:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	00d8acbf 	.word	0x00d8acbf
 800521c:	00e4e1c0 	.word	0x00e4e1c0
 8005220:	00f42400 	.word	0x00f42400
 8005224:	01067380 	.word	0x01067380
 8005228:	011a499f 	.word	0x011a499f
 800522c:	01312cff 	.word	0x01312cff
 8005230:	014ca43f 	.word	0x014ca43f
 8005234:	016e3600 	.word	0x016e3600
 8005238:	01a6ab1f 	.word	0x01a6ab1f
 800523c:	01e84800 	.word	0x01e84800

08005240 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f043 0201 	orr.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d115      	bne.n	80052d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052b2:	2001      	movs	r0, #1
 80052b4:	f7fc fe4a 	bl	8001f4c <HAL_Delay>
      ms++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fa45 	bl	800674e <USB_GetMode>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d01e      	beq.n	8005308 <USB_SetCurrentMode+0x84>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b31      	cmp	r3, #49	; 0x31
 80052ce:	d9f0      	bls.n	80052b2 <USB_SetCurrentMode+0x2e>
 80052d0:	e01a      	b.n	8005308 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d115      	bne.n	8005304 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fc fe31 	bl	8001f4c <HAL_Delay>
      ms++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fa2c 	bl	800674e <USB_GetMode>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <USB_SetCurrentMode+0x84>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b31      	cmp	r3, #49	; 0x31
 8005300:	d9f0      	bls.n	80052e4 <USB_SetCurrentMode+0x60>
 8005302:	e001      	b.n	8005308 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e005      	b.n	8005314 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b32      	cmp	r3, #50	; 0x32
 800530c:	d101      	bne.n	8005312 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800531c:	b084      	sub	sp, #16
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800532a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e009      	b.n	8005350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3340      	adds	r3, #64	; 0x40
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	2200      	movs	r2, #0
 8005348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0e      	cmp	r3, #14
 8005354:	d9f2      	bls.n	800533c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d11c      	bne.n	8005396 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
 8005394:	e00b      	b.n	80053ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	4619      	mov	r1, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	461a      	mov	r2, r3
 80053ca:	680b      	ldr	r3, [r1, #0]
 80053cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10c      	bne.n	80053ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053da:	2100      	movs	r1, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f965 	bl	80056ac <USB_SetDevSpeed>
 80053e2:	e008      	b.n	80053f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053e4:	2101      	movs	r1, #1
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f960 	bl	80056ac <USB_SetDevSpeed>
 80053ec:	e003      	b.n	80053f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053ee:	2103      	movs	r1, #3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f95b 	bl	80056ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053f6:	2110      	movs	r1, #16
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8f3 	bl	80055e4 <USB_FlushTxFifo>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f91f 	bl	800564c <USB_FlushRxFifo>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	e043      	b.n	80054ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005458:	d118      	bne.n	800548c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e013      	b.n	800549e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	461a      	mov	r2, r3
 8005484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e008      	b.n	800549e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d3b7      	bcc.n	8005442 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e043      	b.n	8005560 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ee:	d118      	bne.n	8005522 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e013      	b.n	8005534 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e008      	b.n	8005534 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b7      	bcc.n	80054d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005588:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0210 	orr.w	r2, r3, #16
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <USB_DevInit+0x2c4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	803c3800 	.word	0x803c3800

080055e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <USB_FlushTxFifo+0x64>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d901      	bls.n	8005604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e01b      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	daf2      	bge.n	80055f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	019b      	lsls	r3, r3, #6
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <USB_FlushTxFifo+0x64>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e006      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b20      	cmp	r3, #32
 8005638:	d0f0      	beq.n	800561c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00030d40 	.word	0x00030d40

0800564c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <USB_FlushRxFifo+0x5c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e018      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2210      	movs	r2, #16
 800567a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <USB_FlushRxFifo+0x5c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e006      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d0f0      	beq.n	800567c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	00030d40 	.word	0x00030d40

080056ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0306 	and.w	r3, r3, #6
 80056f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]
 8005702:	e00a      	b.n	800571a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d002      	beq.n	8005710 <USB_GetDevSpeed+0x32>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d102      	bne.n	8005716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005710:	2302      	movs	r3, #2
 8005712:	75fb      	strb	r3, [r7, #23]
 8005714:	e001      	b.n	800571a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005716:	230f      	movs	r3, #15
 8005718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d13a      	bne.n	80057ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	2101      	movs	r1, #1
 8005756:	fa01 f303 	lsl.w	r3, r1, r3
 800575a:	b29b      	uxth	r3, r3
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005762:	4313      	orrs	r3, r2
 8005764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d155      	bne.n	8005828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	059b      	lsls	r3, r3, #22
 800579e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057a0:	4313      	orrs	r3, r2
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e036      	b.n	8005828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	2101      	movs	r1, #1
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d8:	4313      	orrs	r3, r2
 80057da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11a      	bne.n	8005828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800580e:	430b      	orrs	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d161      	bne.n	8005918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586a:	d11f      	bne.n	80058ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800588a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058cc:	4013      	ands	r3, r2
 80058ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	2101      	movs	r1, #1
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f0:	4013      	ands	r3, r2
 80058f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	0159      	lsls	r1, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	440b      	add	r3, r1
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	4619      	mov	r1, r3
 8005910:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <USB_DeactivateEndpoint+0x1b0>)
 8005912:	4013      	ands	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
 8005916:	e060      	b.n	80059da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592e:	d11f      	bne.n	8005970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800594e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	2101      	movs	r1, #1
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	43db      	mvns	r3, r3
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005990:	4013      	ands	r3, r2
 8005992:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	43db      	mvns	r3, r3
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b4:	4013      	ands	r3, r2
 80059b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	0159      	lsls	r1, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	440b      	add	r3, r1
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	4619      	mov	r1, r3
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <USB_DeactivateEndpoint+0x1b4>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	ec337800 	.word	0xec337800
 80059ec:	eff37800 	.word	0xeff37800

080059f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 815c 	bne.w	8005cca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d132      	bne.n	8005a80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	0cdb      	lsrs	r3, r3, #19
 8005a7a:	04db      	lsls	r3, r3, #19
 8005a7c:	6113      	str	r3, [r2, #16]
 8005a7e:	e074      	b.n	8005b6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9a:	0cdb      	lsrs	r3, r3, #19
 8005a9c:	04db      	lsls	r3, r3, #19
 8005a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005abe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6999      	ldr	r1, [r3, #24]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	440b      	add	r3, r1
 8005adc:	1e59      	subs	r1, r3, #1
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ae8:	4b9d      	ldr	r3, [pc, #628]	; (8005d60 <USB_EPStartXfer+0x370>)
 8005aea:	400b      	ands	r3, r1
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	0148      	lsls	r0, r1, #5
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	4401      	add	r1, r0
 8005af4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b12:	69b9      	ldr	r1, [r7, #24]
 8005b14:	0148      	lsls	r0, r1, #5
 8005b16:	69f9      	ldr	r1, [r7, #28]
 8005b18:	4401      	add	r1, r0
 8005b1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d11f      	bne.n	8005b6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d14b      	bne.n	8005c08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d128      	bne.n	8005be6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d110      	bne.n	8005bc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e00f      	b.n	8005be6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e133      	b.n	8005e70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	791b      	ldrb	r3, [r3, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d015      	beq.n	8005c5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 811b 	beq.w	8005e70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c56:	4313      	orrs	r3, r2
 8005c58:	634b      	str	r3, [r1, #52]	; 0x34
 8005c5a:	e109      	b.n	8005e70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d110      	bne.n	8005c8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e00f      	b.n	8005cae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6919      	ldr	r1, [r3, #16]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	b298      	uxth	r0, r3
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fade 	bl	8006284 <USB_WritePacket>
 8005cc8:	e0d2      	b.n	8005e70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	0cdb      	lsrs	r3, r3, #19
 8005ce6:	04db      	lsls	r3, r3, #19
 8005ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d126      	bne.n	8005d64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	0148      	lsls	r0, r1, #5
 8005d30:	69f9      	ldr	r1, [r7, #28]
 8005d32:	4401      	add	r1, r0
 8005d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d5a:	6113      	str	r3, [r2, #16]
 8005d5c:	e03a      	b.n	8005dd4 <USB_EPStartXfer+0x3e4>
 8005d5e:	bf00      	nop
 8005d60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	8afa      	ldrh	r2, [r7, #22]
 8005d80:	fb03 f202 	mul.w	r2, r3, r2
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	8afb      	ldrh	r3, [r7, #22]
 8005d98:	04d9      	lsls	r1, r3, #19
 8005d9a:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <USB_EPStartXfer+0x48c>)
 8005d9c:	400b      	ands	r3, r1
 8005d9e:	69b9      	ldr	r1, [r7, #24]
 8005da0:	0148      	lsls	r0, r1, #5
 8005da2:	69f9      	ldr	r1, [r7, #28]
 8005da4:	4401      	add	r1, r0
 8005da6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005daa:	4313      	orrs	r3, r2
 8005dac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10d      	bne.n	8005df6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6919      	ldr	r1, [r3, #16]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	460a      	mov	r2, r1
 8005df4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	791b      	ldrb	r3, [r3, #4]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d128      	bne.n	8005e50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d110      	bne.n	8005e30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00f      	b.n	8005e50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	1ff80000 	.word	0x1ff80000

08005e80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 80ce 	bne.w	800603e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d132      	bne.n	8005f10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ec8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	0cdb      	lsrs	r3, r3, #19
 8005f0a:	04db      	lsls	r3, r3, #19
 8005f0c:	6113      	str	r3, [r2, #16]
 8005f0e:	e04e      	b.n	8005fae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	0cdb      	lsrs	r3, r3, #19
 8005f2c:	04db      	lsls	r3, r3, #19
 8005f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d903      	bls.n	8005f68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f9e:	6939      	ldr	r1, [r7, #16]
 8005fa0:	0148      	lsls	r0, r1, #5
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	4401      	add	r1, r0
 8005fa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d11e      	bne.n	8005ff2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e097      	b.n	8006122 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006010:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8083 	beq.w	8006122 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006038:	4313      	orrs	r3, r2
 800603a:	634b      	str	r3, [r1, #52]	; 0x34
 800603c:	e071      	b.n	8006122 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006058:	0cdb      	lsrs	r3, r3, #19
 800605a:	04db      	lsls	r3, r3, #19
 800605c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800607c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006080:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	6939      	ldr	r1, [r7, #16]
 80060d2:	0148      	lsls	r0, r1, #5
 80060d4:	6979      	ldr	r1, [r7, #20]
 80060d6:	4401      	add	r1, r0
 80060d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10d      	bne.n	8006102 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6919      	ldr	r1, [r3, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	460a      	mov	r2, r1
 8006100:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006120:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d14a      	bne.n	80061e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006166:	f040 8086 	bne.w	8006276 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800618c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80061be:	4293      	cmp	r3, r2
 80061c0:	d902      	bls.n	80061c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
          break;
 80061c6:	e056      	b.n	8006276 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e0:	d0e7      	beq.n	80061b2 <USB_EPStopXfer+0x82>
 80061e2:	e048      	b.n	8006276 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fc:	d13b      	bne.n	8006276 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006220:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006252:	4293      	cmp	r3, r2
 8006254:	d902      	bls.n	800625c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
          break;
 800625a:	e00c      	b.n	8006276 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006274:	d0e7      	beq.n	8006246 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	; 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	460b      	mov	r3, r1
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	4613      	mov	r3, r2
 8006298:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d123      	bne.n	80062f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062aa:	88bb      	ldrh	r3, [r7, #4]
 80062ac:	3303      	adds	r3, #3
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e018      	b.n	80062ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	031a      	lsls	r2, r3, #12
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c4:	461a      	mov	r2, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	3301      	adds	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	3301      	adds	r3, #1
 80062d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d3e2      	bcc.n	80062b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3724      	adds	r7, #36	; 0x24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006300:	b480      	push	{r7}
 8006302:	b08b      	sub	sp, #44	; 0x2c
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	b29b      	uxth	r3, r3
 800631c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006326:	2300      	movs	r3, #0
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	e014      	b.n	8006356 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	601a      	str	r2, [r3, #0]
    pDest++;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	3301      	adds	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	3301      	adds	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	3301      	adds	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	3301      	adds	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	3301      	adds	r3, #1
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	429a      	cmp	r2, r3
 800635c:	d3e6      	bcc.n	800632c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800635e:	8bfb      	ldrh	r3, [r7, #30]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01e      	beq.n	80063a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636e:	461a      	mov	r2, r3
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	701a      	strb	r2, [r3, #0]
      i++;
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	3301      	adds	r3, #1
 800638e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	3301      	adds	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006396:	8bfb      	ldrh	r3, [r7, #30]
 8006398:	3b01      	subs	r3, #1
 800639a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800639c:	8bfb      	ldrh	r3, [r7, #30]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1ea      	bne.n	8006378 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	372c      	adds	r7, #44	; 0x2c
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d12c      	bne.n	8006426 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db12      	blt.n	8006404 <USB_EPSetStall+0x54>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00f      	beq.n	8006404 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006402:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e02b      	b.n	800647e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	db12      	blt.n	800645e <USB_EPSetStall+0xae>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00f      	beq.n	800645e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800645c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d128      	bne.n	80064fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	791b      	ldrb	r3, [r3, #4]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d003      	beq.n	80064d8 <USB_EPClearStall+0x4c>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d138      	bne.n	800654a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e027      	b.n	800654a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006514:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006518:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	791b      	ldrb	r3, [r3, #4]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d003      	beq.n	800652a <USB_EPClearStall+0x9e>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d10f      	bne.n	800654a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006576:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800657a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d2:	f023 0302 	bic.w	r3, r3, #2
 80065d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4013      	ands	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	0c1b      	lsrs	r3, r3, #16
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	b29b      	uxth	r3, r3
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e4:	68bb      	ldr	r3, [r7, #8]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	fa22 f303 	lsr.w	r3, r2, r3
 8006722:	01db      	lsls	r3, r3, #7
 8006724:	b2db      	uxtb	r3, r3
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4013      	ands	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006740:	68bb      	ldr	r3, [r7, #8]
}
 8006742:	4618      	mov	r0, r3
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0301 	and.w	r3, r3, #1
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006784:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	460b      	mov	r3, r1
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	333c      	adds	r3, #60	; 0x3c
 80067c6:	3304      	adds	r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4a26      	ldr	r2, [pc, #152]	; (8006868 <USB_EP0_OutStart+0xb8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d90a      	bls.n	80067ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e4:	d101      	bne.n	80067ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e037      	b.n	800685a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f043 0318 	orr.w	r3, r3, #24
 800681c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006830:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10f      	bne.n	8006858 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006852:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	4f54300a 	.word	0x4f54300a

0800686c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <USB_CoreReset+0x64>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e01b      	b.n	80068c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	daf2      	bge.n	8006878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <USB_CoreReset+0x64>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e006      	b.n	80068c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d0f0      	beq.n	80068a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	00030d40 	.word	0x00030d40

080068d4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80068e0:	2054      	movs	r0, #84	; 0x54
 80068e2:	f002 fae7 	bl	8008eb4 <USBD_static_malloc>
 80068e6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	; 0xb0
 80068f8:	2100      	movs	r1, #0
 80068fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068fe:	2302      	movs	r3, #2
 8006900:	e08b      	b.n	8006a1a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32b0      	adds	r2, #176	; 0xb0
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	32b0      	adds	r2, #176	; 0xb0
 800691c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d11b      	bne.n	8006966 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800692e:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <USBD_CUSTOM_HID_Init+0x150>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	3326      	adds	r3, #38	; 0x26
 8006944:	2205      	movs	r2, #5
 8006946:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006948:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <USBD_CUSTOM_HID_Init+0x154>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006960:	2205      	movs	r2, #5
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e01a      	b.n	800699c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006966:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <USBD_CUSTOM_HID_Init+0x150>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	3326      	adds	r3, #38	; 0x26
 800697c:	2201      	movs	r2, #1
 800697e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006980:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <USBD_CUSTOM_HID_Init+0x154>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006998:	2201      	movs	r2, #1
 800699a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800699c:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <USBD_CUSTOM_HID_Init+0x150>)
 800699e:	7819      	ldrb	r1, [r3, #0]
 80069a0:	2302      	movs	r3, #2
 80069a2:	2203      	movs	r2, #3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 f974 	bl	8008c92 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80069aa:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <USBD_CUSTOM_HID_Init+0x150>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f003 020f 	and.w	r2, r3, #15
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3324      	adds	r3, #36	; 0x24
 80069c0:	2201      	movs	r2, #1
 80069c2:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80069c4:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <USBD_CUSTOM_HID_Init+0x154>)
 80069c6:	7819      	ldrb	r1, [r3, #0]
 80069c8:	2302      	movs	r3, #2
 80069ca:	2203      	movs	r2, #3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f002 f960 	bl	8008c92 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <USBD_CUSTOM_HID_Init+0x154>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 020f 	and.w	r2, r3, #15
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069ea:	2201      	movs	r2, #1
 80069ec:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	33b0      	adds	r3, #176	; 0xb0
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <USBD_CUSTOM_HID_Init+0x154>)
 8006a0c:	7819      	ldrb	r1, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 fa2c 	bl	8008e70 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000086 	.word	0x20000086
 8006a28:	20000087 	.word	0x20000087

08006a2c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f002 f94d 	bl	8008cde <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006a44:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	3324      	adds	r3, #36	; 0x24
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	3326      	adds	r3, #38	; 0x26
 8006a74:	2200      	movs	r2, #0
 8006a76:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006a78:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 f92d 	bl	8008cde <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006aa0:	4b1e      	ldr	r3, [pc, #120]	; (8006b1c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ab8:	2200      	movs	r2, #0
 8006aba:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32b0      	adds	r2, #176	; 0xb0
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01f      	beq.n	8006b0e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	33b0      	adds	r3, #176	; 0xb0
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	32b0      	adds	r2, #176	; 0xb0
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f002 f9ed 	bl	8008ed0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	32b0      	adds	r2, #176	; 0xb0
 8006b00:	2100      	movs	r1, #0
 8006b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000086 	.word	0x20000086
 8006b1c:	20000087 	.word	0x20000087

08006b20 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	32b0      	adds	r2, #176	; 0xb0
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0f8      	b.n	8006d46 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d056      	beq.n	8006c0e <USBD_CUSTOM_HID_Setup+0xee>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	f040 80e8 	bne.w	8006d36 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	3b02      	subs	r3, #2
 8006b6c:	2b09      	cmp	r3, #9
 8006b6e:	d846      	bhi.n	8006bfe <USBD_CUSTOM_HID_Setup+0xde>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <USBD_CUSTOM_HID_Setup+0x58>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006baf 	.word	0x08006baf
 8006b80:	08006bff 	.word	0x08006bff
 8006b84:	08006bff 	.word	0x08006bff
 8006b88:	08006bff 	.word	0x08006bff
 8006b8c:	08006bff 	.word	0x08006bff
 8006b90:	08006bff 	.word	0x08006bff
 8006b94:	08006be1 	.word	0x08006be1
 8006b98:	08006bbf 	.word	0x08006bbf
 8006b9c:	08006ba1 	.word	0x08006ba1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	885b      	ldrh	r3, [r3, #2]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006bac:	e02e      	b.n	8006c0c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3340      	adds	r3, #64	; 0x40
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 fcce 	bl	8008558 <USBD_CtlSendData>
          break;
 8006bbc:	e026      	b.n	8006c0c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006bce:	e01d      	b.n	8006c0c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3344      	adds	r3, #68	; 0x44
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fcbd 	bl	8008558 <USBD_CtlSendData>
          break;
 8006bde:	e015      	b.n	8006c0c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2201      	movs	r2, #1
 8006be4:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006be6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	bf28      	it	cs
 8006bf0:	2340      	movcs	r3, #64	; 0x40
 8006bf2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fcda 	bl	80085b0 <USBD_CtlPrepareRx>
          break;
 8006bfc:	e006      	b.n	8006c0c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fc38 	bl	8008476 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0a:	bf00      	nop
      }
      break;
 8006c0c:	e09a      	b.n	8006d44 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b0b      	cmp	r3, #11
 8006c14:	f200 8086 	bhi.w	8006d24 <USBD_CUSTOM_HID_Setup+0x204>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USBD_CUSTOM_HID_Setup+0x100>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006d33 	.word	0x08006d33
 8006c28:	08006d25 	.word	0x08006d25
 8006c2c:	08006d25 	.word	0x08006d25
 8006c30:	08006d25 	.word	0x08006d25
 8006c34:	08006d25 	.word	0x08006d25
 8006c38:	08006c7b 	.word	0x08006c7b
 8006c3c:	08006d25 	.word	0x08006d25
 8006c40:	08006d25 	.word	0x08006d25
 8006c44:	08006d25 	.word	0x08006d25
 8006c48:	08006cd3 	.word	0x08006cd3
 8006c4c:	08006cfd 	.word	0x08006cfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d107      	bne.n	8006c6c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c5c:	f107 030e 	add.w	r3, r7, #14
 8006c60:	2202      	movs	r2, #2
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fc77 	bl	8008558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c6a:	e063      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fc01 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	75fb      	strb	r3, [r7, #23]
          break;
 8006c78:	e05c      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b22      	cmp	r3, #34	; 0x22
 8006c84:	d110      	bne.n	8006ca8 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	88db      	ldrh	r3, [r3, #6]
 8006c8a:	2b35      	cmp	r3, #53	; 0x35
 8006c8c:	bf28      	it	cs
 8006c8e:	2335      	movcs	r3, #53	; 0x35
 8006c90:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	33b0      	adds	r3, #176	; 0xb0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e00d      	b.n	8006cc4 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	885b      	ldrh	r3, [r3, #2]
 8006cac:	0a1b      	lsrs	r3, r3, #8
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b21      	cmp	r3, #33	; 0x21
 8006cb2:	d107      	bne.n	8006cc4 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <USBD_CUSTOM_HID_Setup+0x230>)
 8006cb6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	88db      	ldrh	r3, [r3, #6]
 8006cbc:	2b09      	cmp	r3, #9
 8006cbe:	bf28      	it	cs
 8006cc0:	2309      	movcs	r3, #9
 8006cc2:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cc4:	8bfb      	ldrh	r3, [r7, #30]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fc44 	bl	8008558 <USBD_CtlSendData>
          break;
 8006cd0:	e030      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d107      	bne.n	8006cee <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	3348      	adds	r3, #72	; 0x48
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fc36 	bl	8008558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cec:	e022      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 fbc0 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfa:	e01b      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d106      	bne.n	8006d16 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	885b      	ldrh	r3, [r3, #2]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d14:	e00e      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fbac 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	75fb      	strb	r3, [r7, #23]
          break;
 8006d22:	e007      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fba5 	bl	8008476 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d30:	e000      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006d32:	bf00      	nop
      }
      break;
 8006d34:	e006      	b.n	8006d44 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fb9c 	bl	8008476 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	75fb      	strb	r3, [r7, #23]
      break;
 8006d42:	bf00      	nop
  }
  return (uint8_t)ret;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000070 	.word	0x20000070

08006d54 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	32b0      	adds	r2, #176	; 0xb0
 8006d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e021      	b.n	8006dbc <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d112      	bne.n	8006dba <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <USBD_CUSTOM_HID_SendReport+0x70>)
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f002 f83d 	bl	8008e2e <USBD_LL_Transmit>
 8006db4:	e001      	b.n	8006dba <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000086 	.word	0x20000086

08006dc8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006dd0:	2181      	movs	r1, #129	; 0x81
 8006dd2:	4815      	ldr	r0, [pc, #84]	; (8006e28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006dd4:	f000 fd17 	bl	8007806 <USBD_GetEpDesc>
 8006dd8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4812      	ldr	r0, [pc, #72]	; (8006e28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006dde:	f000 fd12 	bl	8007806 <USBD_GetEpDesc>
 8006de2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f042 0202 	orr.w	r2, r2, #2
 8006df2:	711a      	strb	r2, [r3, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f042 0202 	orr.w	r2, r2, #2
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2201      	movs	r2, #1
 8006e16:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2229      	movs	r2, #41	; 0x29
 8006e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e1e:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000044 	.word	0x20000044

08006e2c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e34:	2181      	movs	r1, #129	; 0x81
 8006e36:	4815      	ldr	r0, [pc, #84]	; (8006e8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006e38:	f000 fce5 	bl	8007806 <USBD_GetEpDesc>
 8006e3c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4812      	ldr	r0, [pc, #72]	; (8006e8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006e42:	f000 fce0 	bl	8007806 <USBD_GetEpDesc>
 8006e46:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f042 0202 	orr.w	r2, r2, #2
 8006e56:	711a      	strb	r2, [r3, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2205      	movs	r2, #5
 8006e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f042 0202 	orr.w	r2, r2, #2
 8006e70:	711a      	strb	r2, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2205      	movs	r2, #5
 8006e7a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2229      	movs	r2, #41	; 0x29
 8006e80:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e82:	4b02      	ldr	r3, [pc, #8]	; (8006e8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000044 	.word	0x20000044

08006e90 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e98:	2181      	movs	r1, #129	; 0x81
 8006e9a:	4815      	ldr	r0, [pc, #84]	; (8006ef0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e9c:	f000 fcb3 	bl	8007806 <USBD_GetEpDesc>
 8006ea0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4812      	ldr	r0, [pc, #72]	; (8006ef0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006ea6:	f000 fcae 	bl	8007806 <USBD_GetEpDesc>
 8006eaa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f042 0202 	orr.w	r2, r2, #2
 8006eba:	711a      	strb	r2, [r3, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f042 0202 	orr.w	r2, r2, #2
 8006ed4:	711a      	strb	r2, [r3, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2201      	movs	r2, #1
 8006ede:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2229      	movs	r2, #41	; 0x29
 8006ee4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006ee6:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000044 	.word	0x20000044

08006ef4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32b0      	adds	r2, #176	; 0xb0
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32b0      	adds	r2, #176	; 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e017      	b.n	8006f74 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	; 0xb0
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	33b0      	adds	r3, #176	; 0xb0
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	7810      	ldrb	r0, [r2, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	7852      	ldrb	r2, [r2, #1]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32b0      	adds	r2, #176	; 0xb0
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e00f      	b.n	8006fba <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	32b0      	adds	r2, #176	; 0xb0
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006fac:	7819      	ldrb	r1, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 ff5c 	bl	8008e70 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000087 	.word	0x20000087

08006fc8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32b0      	adds	r2, #176	; 0xb0
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e016      	b.n	8007018 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d111      	bne.n	8007016 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	33b0      	adds	r3, #176	; 0xb0
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	7810      	ldrb	r0, [r2, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	7852      	ldrb	r2, [r2, #1]
 800700c:	4611      	mov	r1, r2
 800700e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	220a      	movs	r2, #10
 800702c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	2000007c 	.word	0x2000007c

08007040 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	e009      	b.n	8007068 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	33b0      	adds	r3, #176	; 0xb0
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e01f      	b.n	80070cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fd7f 	bl	8008bc4 <USBD_LL_Init>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e025      	b.n	8007138 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	32ae      	adds	r2, #174	; 0xae
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00f      	beq.n	8007128 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	; 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f107 020e 	add.w	r2, r7, #14
 800711c:	4610      	mov	r0, r2
 800711e:	4798      	blx	r3
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fd87 	bl	8008c5c <USBD_LL_Start>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	4611      	mov	r1, r2
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	4611      	mov	r1, r2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f908 	bl	8008402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007200:	461a      	mov	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	2b02      	cmp	r3, #2
 8007214:	d01a      	beq.n	800724c <USBD_LL_SetupStage+0x72>
 8007216:	2b02      	cmp	r3, #2
 8007218:	d822      	bhi.n	8007260 <USBD_LL_SetupStage+0x86>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <USBD_LL_SetupStage+0x4a>
 800721e:	2b01      	cmp	r3, #1
 8007220:	d00a      	beq.n	8007238 <USBD_LL_SetupStage+0x5e>
 8007222:	e01d      	b.n	8007260 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fb5f 	bl	80078f0 <USBD_StdDevReq>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
      break;
 8007236:	e020      	b.n	800727a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbc7 	bl	80079d4 <USBD_StdItfReq>
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
      break;
 800724a:	e016      	b.n	800727a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc29 	bl	8007aac <USBD_StdEPReq>
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
      break;
 800725e:	e00c      	b.n	800727a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fd54 	bl	8008d1c <USBD_LL_StallEP>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
      break;
 8007278:	bf00      	nop
  }

  return ret;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	460b      	mov	r3, r1
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d16e      	bne.n	800737a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 8098 	bne.w	80073e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d913      	bls.n	80072e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bf28      	it	cs
 80072d6:	4613      	movcs	r3, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f001 f984 	bl	80085ea <USBD_CtlContinueRx>
 80072e2:	e07d      	b.n	80073e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d014      	beq.n	800731c <USBD_LL_DataOutStage+0x98>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d81d      	bhi.n	8007332 <USBD_LL_DataOutStage+0xae>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <USBD_LL_DataOutStage+0x7c>
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d003      	beq.n	8007306 <USBD_LL_DataOutStage+0x82>
 80072fe:	e018      	b.n	8007332 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	75bb      	strb	r3, [r7, #22]
            break;
 8007304:	e018      	b.n	8007338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800730c:	b2db      	uxtb	r3, r3
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fa5e 	bl	80077d2 <USBD_CoreFindIF>
 8007316:	4603      	mov	r3, r0
 8007318:	75bb      	strb	r3, [r7, #22]
            break;
 800731a:	e00d      	b.n	8007338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007322:	b2db      	uxtb	r3, r3
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fa60 	bl	80077ec <USBD_CoreFindEP>
 800732c:	4603      	mov	r3, r0
 800732e:	75bb      	strb	r3, [r7, #22]
            break;
 8007330:	e002      	b.n	8007338 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	75bb      	strb	r3, [r7, #22]
            break;
 8007336:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007338:	7dbb      	ldrb	r3, [r7, #22]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d119      	bne.n	8007372 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d113      	bne.n	8007372 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800734a:	7dba      	ldrb	r2, [r7, #22]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	32ae      	adds	r2, #174	; 0xae
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800735a:	7dba      	ldrb	r2, [r7, #22]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007362:	7dba      	ldrb	r2, [r7, #22]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	32ae      	adds	r2, #174	; 0xae
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 f94a 	bl	800860c <USBD_CtlSendStatus>
 8007378:	e032      	b.n	80073e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4619      	mov	r1, r3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fa31 	bl	80077ec <USBD_CoreFindEP>
 800738a:	4603      	mov	r3, r0
 800738c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800738e:	7dbb      	ldrb	r3, [r7, #22]
 8007390:	2bff      	cmp	r3, #255	; 0xff
 8007392:	d025      	beq.n	80073e0 <USBD_LL_DataOutStage+0x15c>
 8007394:	7dbb      	ldrb	r3, [r7, #22]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d122      	bne.n	80073e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d117      	bne.n	80073d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80073a6:	7dba      	ldrb	r2, [r7, #22]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	32ae      	adds	r2, #174	; 0xae
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00f      	beq.n	80073d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80073b6:	7dba      	ldrb	r2, [r7, #22]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073be:	7dba      	ldrb	r2, [r7, #22]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	32ae      	adds	r2, #174	; 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	7afa      	ldrb	r2, [r7, #11]
 80073cc:	4611      	mov	r1, r2
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	e000      	b.n	80073e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	460b      	mov	r3, r1
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d16f      	bne.n	80074de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3314      	adds	r3, #20
 8007402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800740a:	2b02      	cmp	r3, #2
 800740c:	d15a      	bne.n	80074c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	429a      	cmp	r2, r3
 8007418:	d914      	bls.n	8007444 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	1ad2      	subs	r2, r2, r3
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	461a      	mov	r2, r3
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f001 f8ac 	bl	800858e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	2100      	movs	r1, #0
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f001 fd17 	bl	8008e70 <USBD_LL_PrepareReceive>
 8007442:	e03f      	b.n	80074c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	d11c      	bne.n	800748a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007458:	429a      	cmp	r2, r3
 800745a:	d316      	bcc.n	800748a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007466:	429a      	cmp	r2, r3
 8007468:	d20f      	bcs.n	800748a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f001 f88d 	bl	800858e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747c:	2300      	movs	r3, #0
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f001 fcf4 	bl	8008e70 <USBD_LL_PrepareReceive>
 8007488:	e01c      	b.n	80074c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d10f      	bne.n	80074b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fc2f 	bl	8008d1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f001 f8b7 	bl	8008632 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03a      	beq.n	8007544 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fe42 	bl	8007158 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074dc:	e032      	b.n	8007544 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f97f 	bl	80077ec <USBD_CoreFindEP>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	2bff      	cmp	r3, #255	; 0xff
 80074f6:	d025      	beq.n	8007544 <USBD_LL_DataInStage+0x15a>
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d122      	bne.n	8007544 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d11c      	bne.n	8007544 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800750a:	7dfa      	ldrb	r2, [r7, #23]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	32ae      	adds	r2, #174	; 0xae
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d014      	beq.n	8007544 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800751a:	7dfa      	ldrb	r2, [r7, #23]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007522:	7dfa      	ldrb	r2, [r7, #23]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	32ae      	adds	r2, #174	; 0xae
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	7afa      	ldrb	r2, [r7, #11]
 8007530:	4611      	mov	r1, r2
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800753a:	7dbb      	ldrb	r3, [r7, #22]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007540:	7dbb      	ldrb	r3, [r7, #22]
 8007542:	e000      	b.n	8007546 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d014      	beq.n	80075b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00e      	beq.n	80075b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6852      	ldr	r2, [r2, #4]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	4611      	mov	r1, r2
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b4:	2340      	movs	r3, #64	; 0x40
 80075b6:	2200      	movs	r2, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 fb69 	bl	8008c92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	2200      	movs	r2, #0
 80075d4:	2180      	movs	r1, #128	; 0x80
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 fb5b 	bl	8008c92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2240      	movs	r2, #64	; 0x40
 80075e6:	621a      	str	r2, [r3, #32]

  return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2204      	movs	r2, #4
 800762c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b04      	cmp	r3, #4
 8007650:	d106      	bne.n	8007660 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d110      	bne.n	80076a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	32ae      	adds	r2, #174	; 0xae
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e01c      	b.n	800770a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d115      	bne.n	8007708 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	; 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32ae      	adds	r2, #174	; 0xae
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	32ae      	adds	r2, #174	; 0xae
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	e01c      	b.n	800776e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b03      	cmp	r3, #3
 800773e:	d115      	bne.n	800776c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	32ae      	adds	r2, #174	; 0xae
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32ae      	adds	r2, #174	; 0xae
 800775e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4611      	mov	r1, r2
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6852      	ldr	r2, [r2, #4]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	4611      	mov	r1, r2
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	429a      	cmp	r2, r3
 800782c:	d920      	bls.n	8007870 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007836:	e013      	b.n	8007860 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007838:	f107 030a 	add.w	r3, r7, #10
 800783c:	4619      	mov	r1, r3
 800783e:	6978      	ldr	r0, [r7, #20]
 8007840:	f000 f81b 	bl	800787a <USBD_GetNextDesc>
 8007844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b05      	cmp	r3, #5
 800784c:	d108      	bne.n	8007860 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	789b      	ldrb	r3, [r3, #2]
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	429a      	cmp	r2, r3
 800785a:	d008      	beq.n	800786e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	885b      	ldrh	r3, [r3, #2]
 8007864:	b29a      	uxth	r2, r3
 8007866:	897b      	ldrh	r3, [r7, #10]
 8007868:	429a      	cmp	r2, r3
 800786a:	d8e5      	bhi.n	8007838 <USBD_GetEpDesc+0x32>
 800786c:	e000      	b.n	8007870 <USBD_GetEpDesc+0x6a>
          break;
 800786e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007870:	693b      	ldr	r3, [r7, #16]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	881a      	ldrh	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	4413      	add	r3, r2
 8007894:	b29a      	uxth	r2, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3301      	adds	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078d2:	8a3b      	ldrh	r3, [r7, #16]
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	b21a      	sxth	r2, r3
 80078d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078dc:	4313      	orrs	r3, r2
 80078de:	b21b      	sxth	r3, r3
 80078e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078e2:	89fb      	ldrh	r3, [r7, #14]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	371c      	adds	r7, #28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d005      	beq.n	8007916 <USBD_StdDevReq+0x26>
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d857      	bhi.n	80079be <USBD_StdDevReq+0xce>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00f      	beq.n	8007932 <USBD_StdDevReq+0x42>
 8007912:	2b20      	cmp	r3, #32
 8007914:	d153      	bne.n	80079be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e04a      	b.n	80079c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b09      	cmp	r3, #9
 8007938:	d83b      	bhi.n	80079b2 <USBD_StdDevReq+0xc2>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBD_StdDevReq+0x50>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007995 	.word	0x08007995
 8007944:	080079a9 	.word	0x080079a9
 8007948:	080079b3 	.word	0x080079b3
 800794c:	0800799f 	.word	0x0800799f
 8007950:	080079b3 	.word	0x080079b3
 8007954:	08007973 	.word	0x08007973
 8007958:	08007969 	.word	0x08007969
 800795c:	080079b3 	.word	0x080079b3
 8007960:	0800798b 	.word	0x0800798b
 8007964:	0800797d 	.word	0x0800797d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa3c 	bl	8007de8 <USBD_GetDescriptor>
          break;
 8007970:	e024      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fba1 	bl	80080bc <USBD_SetAddress>
          break;
 800797a:	e01f      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fbe0 	bl	8008144 <USBD_SetConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
          break;
 8007988:	e018      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc83 	bl	8008298 <USBD_GetConfig>
          break;
 8007992:	e013      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fcb4 	bl	8008304 <USBD_GetStatus>
          break;
 800799c:	e00e      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fce3 	bl	800836c <USBD_SetFeature>
          break;
 80079a6:	e009      	b.n	80079bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fd07 	bl	80083be <USBD_ClrFeature>
          break;
 80079b0:	e004      	b.n	80079bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fd5e 	bl	8008476 <USBD_CtlError>
          break;
 80079ba:	bf00      	nop
      }
      break;
 80079bc:	e004      	b.n	80079c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fd58 	bl	8008476 <USBD_CtlError>
      break;
 80079c6:	bf00      	nop
  }

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop

080079d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d005      	beq.n	80079fa <USBD_StdItfReq+0x26>
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d852      	bhi.n	8007a98 <USBD_StdItfReq+0xc4>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <USBD_StdItfReq+0x26>
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d14e      	bne.n	8007a98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d840      	bhi.n	8007a8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	889b      	ldrh	r3, [r3, #4]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d836      	bhi.n	8007a80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff fed9 	bl	80077d2 <USBD_CoreFindIF>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2bff      	cmp	r3, #255	; 0xff
 8007a28:	d01d      	beq.n	8007a66 <USBD_StdItfReq+0x92>
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11a      	bne.n	8007a66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a30:	7bba      	ldrb	r2, [r7, #14]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32ae      	adds	r2, #174	; 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00f      	beq.n	8007a60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a40:	7bba      	ldrb	r2, [r7, #14]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a48:	7bba      	ldrb	r2, [r7, #14]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32ae      	adds	r2, #174	; 0xae
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a5e:	e004      	b.n	8007a6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a64:	e001      	b.n	8007a6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d110      	bne.n	8007a94 <USBD_StdItfReq+0xc0>
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10d      	bne.n	8007a94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fdc7 	bl	800860c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a7e:	e009      	b.n	8007a94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fcf7 	bl	8008476 <USBD_CtlError>
          break;
 8007a88:	e004      	b.n	8007a94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fcf2 	bl	8008476 <USBD_CtlError>
          break;
 8007a92:	e000      	b.n	8007a96 <USBD_StdItfReq+0xc2>
          break;
 8007a94:	bf00      	nop
      }
      break;
 8007a96:	e004      	b.n	8007aa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fceb 	bl	8008476 <USBD_CtlError>
      break;
 8007aa0:	bf00      	nop
  }

  return ret;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	889b      	ldrh	r3, [r3, #4]
 8007abe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	d007      	beq.n	8007adc <USBD_StdEPReq+0x30>
 8007acc:	2b40      	cmp	r3, #64	; 0x40
 8007ace:	f200 817f 	bhi.w	8007dd0 <USBD_StdEPReq+0x324>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d02a      	beq.n	8007b2c <USBD_StdEPReq+0x80>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	f040 817a 	bne.w	8007dd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe83 	bl	80077ec <USBD_CoreFindEP>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aea:	7b7b      	ldrb	r3, [r7, #13]
 8007aec:	2bff      	cmp	r3, #255	; 0xff
 8007aee:	f000 8174 	beq.w	8007dda <USBD_StdEPReq+0x32e>
 8007af2:	7b7b      	ldrb	r3, [r7, #13]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f040 8170 	bne.w	8007dda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007afa:	7b7a      	ldrb	r2, [r7, #13]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b02:	7b7a      	ldrb	r2, [r7, #13]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	32ae      	adds	r2, #174	; 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8163 	beq.w	8007dda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b14:	7b7a      	ldrb	r2, [r7, #13]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	; 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b2a:	e156      	b.n	8007dda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d008      	beq.n	8007b46 <USBD_StdEPReq+0x9a>
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	f300 8145 	bgt.w	8007dc4 <USBD_StdEPReq+0x318>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 809b 	beq.w	8007c76 <USBD_StdEPReq+0x1ca>
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d03c      	beq.n	8007bbe <USBD_StdEPReq+0x112>
 8007b44:	e13e      	b.n	8007dc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d002      	beq.n	8007b58 <USBD_StdEPReq+0xac>
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d016      	beq.n	8007b84 <USBD_StdEPReq+0xd8>
 8007b56:	e02c      	b.n	8007bb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <USBD_StdEPReq+0xce>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b80      	cmp	r3, #128	; 0x80
 8007b62:	d00a      	beq.n	8007b7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f8d7 	bl	8008d1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b6e:	2180      	movs	r1, #128	; 0x80
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f8d3 	bl	8008d1c <USBD_LL_StallEP>
 8007b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b78:	e020      	b.n	8007bbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc7a 	bl	8008476 <USBD_CtlError>
              break;
 8007b82:	e01b      	b.n	8007bbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10e      	bne.n	8007baa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <USBD_StdEPReq+0xfe>
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b80      	cmp	r3, #128	; 0x80
 8007b96:	d008      	beq.n	8007baa <USBD_StdEPReq+0xfe>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f8b9 	bl	8008d1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fd2e 	bl	800860c <USBD_CtlSendStatus>

              break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fc5e 	bl	8008476 <USBD_CtlError>
              break;
 8007bba:	bf00      	nop
          }
          break;
 8007bbc:	e107      	b.n	8007dce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d002      	beq.n	8007bd0 <USBD_StdEPReq+0x124>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d016      	beq.n	8007bfc <USBD_StdEPReq+0x150>
 8007bce:	e04b      	b.n	8007c68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <USBD_StdEPReq+0x146>
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d00a      	beq.n	8007bf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 f89b 	bl	8008d1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be6:	2180      	movs	r1, #128	; 0x80
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f897 	bl	8008d1c <USBD_LL_StallEP>
 8007bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bf0:	e040      	b.n	8007c74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fc3e 	bl	8008476 <USBD_CtlError>
              break;
 8007bfa:	e03b      	b.n	8007c74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	885b      	ldrh	r3, [r3, #2]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d136      	bne.n	8007c72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f8a1 	bl	8008d5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fcf7 	bl	800860c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fde2 	bl	80077ec <USBD_CoreFindEP>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c2c:	7b7b      	ldrb	r3, [r7, #13]
 8007c2e:	2bff      	cmp	r3, #255	; 0xff
 8007c30:	d01f      	beq.n	8007c72 <USBD_StdEPReq+0x1c6>
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11c      	bne.n	8007c72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c38:	7b7a      	ldrb	r2, [r7, #13]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c40:	7b7a      	ldrb	r2, [r7, #13]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32ae      	adds	r2, #174	; 0xae
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d010      	beq.n	8007c72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c50:	7b7a      	ldrb	r2, [r7, #13]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	32ae      	adds	r2, #174	; 0xae
 8007c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c66:	e004      	b.n	8007c72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc03 	bl	8008476 <USBD_CtlError>
              break;
 8007c70:	e000      	b.n	8007c74 <USBD_StdEPReq+0x1c8>
              break;
 8007c72:	bf00      	nop
          }
          break;
 8007c74:	e0ab      	b.n	8007dce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d002      	beq.n	8007c88 <USBD_StdEPReq+0x1dc>
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d032      	beq.n	8007cec <USBD_StdEPReq+0x240>
 8007c86:	e097      	b.n	8007db8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <USBD_StdEPReq+0x1f2>
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d004      	beq.n	8007c9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fbed 	bl	8008476 <USBD_CtlError>
                break;
 8007c9c:	e091      	b.n	8007dc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da0b      	bge.n	8007cbe <USBD_StdEPReq+0x212>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	3310      	adds	r3, #16
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	3304      	adds	r3, #4
 8007cbc:	e00b      	b.n	8007cd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc37 	bl	8008558 <USBD_CtlSendData>
              break;
 8007cea:	e06a      	b.n	8007dc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da11      	bge.n	8007d18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3324      	adds	r3, #36	; 0x24
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d117      	bne.n	8007d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fbb0 	bl	8008476 <USBD_CtlError>
                  break;
 8007d16:	e054      	b.n	8007dc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	f003 020f 	and.w	r2, r3, #15
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb9d 	bl	8008476 <USBD_CtlError>
                  break;
 8007d3c:	e041      	b.n	8007dc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da0b      	bge.n	8007d5e <USBD_StdEPReq+0x2b2>
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	3310      	adds	r3, #16
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	4413      	add	r3, r2
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	e00b      	b.n	8007d76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	3304      	adds	r3, #4
 8007d76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <USBD_StdEPReq+0x2d8>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b80      	cmp	r3, #128	; 0x80
 8007d82:	d103      	bne.n	8007d8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e00e      	b.n	8007daa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 f801 	bl	8008d98 <USBD_LL_IsStallEP>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	e002      	b.n	8007daa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2202      	movs	r2, #2
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbd1 	bl	8008558 <USBD_CtlSendData>
              break;
 8007db6:	e004      	b.n	8007dc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb5b 	bl	8008476 <USBD_CtlError>
              break;
 8007dc0:	bf00      	nop
          }
          break;
 8007dc2:	e004      	b.n	8007dce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb55 	bl	8008476 <USBD_CtlError>
          break;
 8007dcc:	bf00      	nop
      }
      break;
 8007dce:	e005      	b.n	8007ddc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fb4f 	bl	8008476 <USBD_CtlError>
      break;
 8007dd8:	e000      	b.n	8007ddc <USBD_StdEPReq+0x330>
      break;
 8007dda:	bf00      	nop
  }

  return ret;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	f200 8128 	bhi.w	800805e <USBD_GetDescriptor+0x276>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <USBD_GetDescriptor+0x2c>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e31 	.word	0x08007e31
 8007e18:	08007e49 	.word	0x08007e49
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	0800805f 	.word	0x0800805f
 8007e24:	0800805f 	.word	0x0800805f
 8007e28:	08007fff 	.word	0x08007fff
 8007e2c:	0800802b 	.word	0x0800802b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
      break;
 8007e46:	e112      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c1b      	ldrb	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f107 0208 	add.w	r2, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	2202      	movs	r2, #2
 8007e68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e6a:	e100      	b.n	800806e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	f107 0208 	add.w	r2, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	2202      	movs	r2, #2
 8007e84:	701a      	strb	r2, [r3, #0]
      break;
 8007e86:	e0f2      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	f200 80ac 	bhi.w	8007fec <USBD_GetDescriptor+0x204>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <USBD_GetDescriptor+0xb4>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007ee9 	.word	0x08007ee9
 8007ea4:	08007f1d 	.word	0x08007f1d
 8007ea8:	08007f51 	.word	0x08007f51
 8007eac:	08007f85 	.word	0x08007f85
 8007eb0:	08007fb9 	.word	0x08007fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e091      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 facb 	bl	8008476 <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e089      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e077      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fab1 	bl	8008476 <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e06f      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f3e:	e05d      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa97 	bl	8008476 <USBD_CtlError>
            err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f4e:	e055      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	7c12      	ldrb	r2, [r2, #16]
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f72:	e043      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa7d 	bl	8008476 <USBD_CtlError>
            err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
          break;
 8007f82:	e03b      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	7c12      	ldrb	r2, [r2, #16]
 8007f9c:	f107 0108 	add.w	r1, r7, #8
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fa6:	e029      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa63 	bl	8008476 <USBD_CtlError>
            err++;
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fb6:	e021      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	7c12      	ldrb	r2, [r2, #16]
 8007fd0:	f107 0108 	add.w	r1, r7, #8
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
 8007fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fda:	e00f      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa49 	bl	8008476 <USBD_CtlError>
            err++;
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fea:	e007      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa41 	bl	8008476 <USBD_CtlError>
          err++;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ffa:	bf00      	nop
      }
      break;
 8007ffc:	e037      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4610      	mov	r0, r2
 8008014:	4798      	blx	r3
 8008016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008018:	e029      	b.n	800806e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa2a 	bl	8008476 <USBD_CtlError>
        err++;
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	3301      	adds	r3, #1
 8008026:	72fb      	strb	r3, [r7, #11]
      break;
 8008028:	e021      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	7c1b      	ldrb	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10d      	bne.n	800804e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	f107 0208 	add.w	r2, r7, #8
 800803e:	4610      	mov	r0, r2
 8008040:	4798      	blx	r3
 8008042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	2207      	movs	r2, #7
 800804a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800804c:	e00f      	b.n	800806e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa10 	bl	8008476 <USBD_CtlError>
        err++;
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	3301      	adds	r3, #1
 800805a:	72fb      	strb	r3, [r7, #11]
      break;
 800805c:	e007      	b.n	800806e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa08 	bl	8008476 <USBD_CtlError>
      err++;
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	3301      	adds	r3, #1
 800806a:	72fb      	strb	r3, [r7, #11]
      break;
 800806c:	bf00      	nop
  }

  if (err != 0U)
 800806e:	7afb      	ldrb	r3, [r7, #11]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11e      	bne.n	80080b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d016      	beq.n	80080aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800807c:	893b      	ldrh	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00e      	beq.n	80080a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	88da      	ldrh	r2, [r3, #6]
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	4293      	cmp	r3, r2
 800808a:	bf28      	it	cs
 800808c:	4613      	movcs	r3, r2
 800808e:	b29b      	uxth	r3, r3
 8008090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	461a      	mov	r2, r3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa5d 	bl	8008558 <USBD_CtlSendData>
 800809e:	e009      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9e7 	bl	8008476 <USBD_CtlError>
 80080a8:	e004      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 faae 	bl	800860c <USBD_CtlSendStatus>
 80080b0:	e000      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    return;
 80080b2:	bf00      	nop
  }
}
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop

080080bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d131      	bne.n	8008132 <USBD_SetAddress+0x76>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d12d      	bne.n	8008132 <USBD_SetAddress+0x76>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	885b      	ldrh	r3, [r3, #2]
 80080da:	2b7f      	cmp	r3, #127	; 0x7f
 80080dc:	d829      	bhi.n	8008132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d104      	bne.n	8008100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f9bc 	bl	8008476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	e01d      	b.n	800813c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fe6f 	bl	8008df0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa7a 	bl	800860c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	e009      	b.n	800813c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	e004      	b.n	800813c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f99e 	bl	8008476 <USBD_CtlError>
  }
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	4b4e      	ldr	r3, [pc, #312]	; (8008294 <USBD_SetConfig+0x150>)
 800815a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800815c:	4b4d      	ldr	r3, [pc, #308]	; (8008294 <USBD_SetConfig+0x150>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d905      	bls.n	8008170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f985 	bl	8008476 <USBD_CtlError>
    return USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e08c      	b.n	800828a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d002      	beq.n	8008182 <USBD_SetConfig+0x3e>
 800817c:	2b03      	cmp	r3, #3
 800817e:	d029      	beq.n	80081d4 <USBD_SetConfig+0x90>
 8008180:	e075      	b.n	800826e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008182:	4b44      	ldr	r3, [pc, #272]	; (8008294 <USBD_SetConfig+0x150>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d020      	beq.n	80081cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800818a:	4b42      	ldr	r3, [pc, #264]	; (8008294 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008194:	4b3f      	ldr	r3, [pc, #252]	; (8008294 <USBD_SetConfig+0x150>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fe ffe7 	bl	800716e <USBD_SetClassConfig>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f962 	bl	8008476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2202      	movs	r2, #2
 80081b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081ba:	e065      	b.n	8008288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa25 	bl	800860c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2203      	movs	r2, #3
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081ca:	e05d      	b.n	8008288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa1d 	bl	800860c <USBD_CtlSendStatus>
      break;
 80081d2:	e059      	b.n	8008288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081d4:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <USBD_SetConfig+0x150>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d112      	bne.n	8008202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081e4:	4b2b      	ldr	r3, [pc, #172]	; (8008294 <USBD_SetConfig+0x150>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ee:	4b29      	ldr	r3, [pc, #164]	; (8008294 <USBD_SetConfig+0x150>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe ffd6 	bl	80071a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa06 	bl	800860c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008200:	e042      	b.n	8008288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008202:	4b24      	ldr	r3, [pc, #144]	; (8008294 <USBD_SetConfig+0x150>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d02a      	beq.n	8008266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe ffc4 	bl	80071a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <USBD_SetConfig+0x150>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <USBD_SetConfig+0x150>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fe ff9d 	bl	800716e <USBD_SetClassConfig>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00f      	beq.n	800825e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f918 	bl	8008476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7fe ffa9 	bl	80071a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800825c:	e014      	b.n	8008288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9d4 	bl	800860c <USBD_CtlSendStatus>
      break;
 8008264:	e010      	b.n	8008288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9d0 	bl	800860c <USBD_CtlSendStatus>
      break;
 800826c:	e00c      	b.n	8008288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f900 	bl	8008476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <USBD_SetConfig+0x150>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fe ff92 	bl	80071a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008282:	2303      	movs	r3, #3
 8008284:	73fb      	strb	r3, [r7, #15]
      break;
 8008286:	bf00      	nop
  }

  return ret;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000354 	.word	0x20000354

08008298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88db      	ldrh	r3, [r3, #6]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d004      	beq.n	80082b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8e2 	bl	8008476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082b2:	e023      	b.n	80082fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	dc02      	bgt.n	80082c6 <USBD_GetConfig+0x2e>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc03      	bgt.n	80082cc <USBD_GetConfig+0x34>
 80082c4:	e015      	b.n	80082f2 <USBD_GetConfig+0x5a>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d00b      	beq.n	80082e2 <USBD_GetConfig+0x4a>
 80082ca:	e012      	b.n	80082f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3308      	adds	r3, #8
 80082d6:	2201      	movs	r2, #1
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f93c 	bl	8008558 <USBD_CtlSendData>
        break;
 80082e0:	e00c      	b.n	80082fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	2201      	movs	r2, #1
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f934 	bl	8008558 <USBD_CtlSendData>
        break;
 80082f0:	e004      	b.n	80082fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8be 	bl	8008476 <USBD_CtlError>
        break;
 80082fa:	bf00      	nop
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008314:	b2db      	uxtb	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	2b02      	cmp	r3, #2
 800831a:	d81e      	bhi.n	800835a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	88db      	ldrh	r3, [r3, #6]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d004      	beq.n	800832e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8a5 	bl	8008476 <USBD_CtlError>
        break;
 800832c:	e01a      	b.n	8008364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f043 0202 	orr.w	r2, r3, #2
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	330c      	adds	r3, #12
 800834e:	2202      	movs	r2, #2
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f900 	bl	8008558 <USBD_CtlSendData>
      break;
 8008358:	e004      	b.n	8008364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f88a 	bl	8008476 <USBD_CtlError>
      break;
 8008362:	bf00      	nop
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d107      	bne.n	800838e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f940 	bl	800860c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800838c:	e013      	b.n	80083b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d10b      	bne.n	80083ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f930 	bl	800860c <USBD_CtlSendStatus>
}
 80083ac:	e003      	b.n	80083b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f860 	bl	8008476 <USBD_CtlError>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d80b      	bhi.n	80083ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10c      	bne.n	80083f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f910 	bl	800860c <USBD_CtlSendStatus>
      }
      break;
 80083ec:	e004      	b.n	80083f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f840 	bl	8008476 <USBD_CtlError>
      break;
 80083f6:	e000      	b.n	80083fa <USBD_ClrFeature+0x3c>
      break;
 80083f8:	bf00      	nop
  }
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	781a      	ldrb	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fa41 	bl	80078b4 <SWAPBYTE>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff fa34 	bl	80078b4 <SWAPBYTE>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f7ff fa27 	bl	80078b4 <SWAPBYTE>
 8008466:	4603      	mov	r3, r0
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	80da      	strh	r2, [r3, #6]
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fc4a 	bl	8008d1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fc46 	bl	8008d1c <USBD_LL_StallEP>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d036      	beq.n	800851c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f000 f836 	bl	8008524 <USBD_GetLen>
 80084b8:	4603      	mov	r3, r0
 80084ba:	3301      	adds	r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4413      	add	r3, r2
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	3301      	adds	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	4413      	add	r3, r2
 80084de:	2203      	movs	r2, #3
 80084e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	3301      	adds	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084e8:	e013      	b.n	8008512 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	4413      	add	r3, r2
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	7812      	ldrb	r2, [r2, #0]
 80084f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	3301      	adds	r3, #1
 80084fa:	613b      	str	r3, [r7, #16]
    idx++;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	3301      	adds	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	4413      	add	r3, r2
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
    idx++;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	3301      	adds	r3, #1
 8008510:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e7      	bne.n	80084ea <USBD_GetString+0x52>
 800851a:	e000      	b.n	800851e <USBD_GetString+0x86>
    return;
 800851c:	bf00      	nop
  }
}
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008534:	e005      	b.n	8008542 <USBD_GetLen+0x1e>
  {
    len++;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	3301      	adds	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3301      	adds	r3, #1
 8008540:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f5      	bne.n	8008536 <USBD_GetLen+0x12>
  }

  return len;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2202      	movs	r2, #2
 8008568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	2100      	movs	r1, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fc55 	bl	8008e2e <USBD_LL_Transmit>

  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	2100      	movs	r1, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fc44 	bl	8008e2e <USBD_LL_Transmit>

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2203      	movs	r2, #3
 80085c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	2100      	movs	r1, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fc48 	bl	8008e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	2100      	movs	r1, #0
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fc37 	bl	8008e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2204      	movs	r2, #4
 8008618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800861c:	2300      	movs	r3, #0
 800861e:	2200      	movs	r2, #0
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fc03 	bl	8008e2e <USBD_LL_Transmit>

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2205      	movs	r2, #5
 800863e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fc11 	bl	8008e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <SendGovnoReport>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void SendGovnoReport(uint8_t* report, uint16_t length) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	807b      	strh	r3, [r7, #2]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, length);
 8008664:	887b      	ldrh	r3, [r7, #2]
 8008666:	461a      	mov	r2, r3
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	4803      	ldr	r0, [pc, #12]	; (8008678 <SendGovnoReport+0x20>)
 800866c:	f7fe fb72 	bl	8006d54 <USBD_CUSTOM_HID_SendReport>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000358 	.word	0x20000358

0800867c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008680:	2200      	movs	r2, #0
 8008682:	4912      	ldr	r1, [pc, #72]	; (80086cc <MX_USB_DEVICE_Init+0x50>)
 8008684:	4812      	ldr	r0, [pc, #72]	; (80086d0 <MX_USB_DEVICE_Init+0x54>)
 8008686:	f7fe fcf5 	bl	8007074 <USBD_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008690:	f7f9 fa77 	bl	8001b82 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008694:	490f      	ldr	r1, [pc, #60]	; (80086d4 <MX_USB_DEVICE_Init+0x58>)
 8008696:	480e      	ldr	r0, [pc, #56]	; (80086d0 <MX_USB_DEVICE_Init+0x54>)
 8008698:	f7fe fd1c 	bl	80070d4 <USBD_RegisterClass>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086a2:	f7f9 fa6e 	bl	8001b82 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80086a6:	490c      	ldr	r1, [pc, #48]	; (80086d8 <MX_USB_DEVICE_Init+0x5c>)
 80086a8:	4809      	ldr	r0, [pc, #36]	; (80086d0 <MX_USB_DEVICE_Init+0x54>)
 80086aa:	f7fe fcc9 	bl	8007040 <USBD_CUSTOM_HID_RegisterInterface>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086b4:	f7f9 fa65 	bl	8001b82 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086b8:	4805      	ldr	r0, [pc, #20]	; (80086d0 <MX_USB_DEVICE_Init+0x54>)
 80086ba:	f7fe fd41 	bl	8007140 <USBD_Start>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086c4:	f7f9 fa5d 	bl	8001b82 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086c8:	bf00      	nop
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	200000d0 	.word	0x200000d0
 80086d0:	20000358 	.word	0x20000358
 80086d4:	2000000c 	.word	0x2000000c
 80086d8:	200000c0 	.word	0x200000c0

080086dc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80086f0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	460a      	mov	r2, r1
 8008706:	71fb      	strb	r3, [r7, #7]
 8008708:	4613      	mov	r3, r2
 800870a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800870c:	4806      	ldr	r0, [pc, #24]	; (8008728 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800870e:	f7fe fc35 	bl	8006f7c <USBD_CUSTOM_HID_ReceivePacket>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
 800871c:	e000      	b.n	8008720 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800871e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000358 	.word	0x20000358

0800872c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2212      	movs	r2, #18
 800873c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800873e:	4b03      	ldr	r3, [pc, #12]	; (800874c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	200000ec 	.word	0x200000ec

08008750 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2204      	movs	r2, #4
 8008760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008762:	4b03      	ldr	r3, [pc, #12]	; (8008770 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20000100 	.word	0x20000100

08008774 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	4907      	ldr	r1, [pc, #28]	; (80087a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800878a:	4808      	ldr	r0, [pc, #32]	; (80087ac <USBD_FS_ProductStrDescriptor+0x38>)
 800878c:	f7ff fe84 	bl	8008498 <USBD_GetString>
 8008790:	e004      	b.n	800879c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4904      	ldr	r1, [pc, #16]	; (80087a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008796:	4805      	ldr	r0, [pc, #20]	; (80087ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008798:	f7ff fe7e 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000634 	.word	0x20000634
 80087ac:	08008fac 	.word	0x08008fac

080087b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	4904      	ldr	r1, [pc, #16]	; (80087d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087c0:	4804      	ldr	r0, [pc, #16]	; (80087d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087c2:	f7ff fe69 	bl	8008498 <USBD_GetString>
  return USBD_StrDesc;
 80087c6:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000634 	.word	0x20000634
 80087d4:	08008fcc 	.word	0x08008fcc

080087d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	221a      	movs	r2, #26
 80087e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087ea:	f000 f843 	bl	8008874 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ee:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000104 	.word	0x20000104

080087fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	4907      	ldr	r1, [pc, #28]	; (8008830 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008812:	4808      	ldr	r0, [pc, #32]	; (8008834 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008814:	f7ff fe40 	bl	8008498 <USBD_GetString>
 8008818:	e004      	b.n	8008824 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	4904      	ldr	r1, [pc, #16]	; (8008830 <USBD_FS_ConfigStrDescriptor+0x34>)
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008820:	f7ff fe3a 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000634 	.word	0x20000634
 8008834:	08008fe0 	.word	0x08008fe0

08008838 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4907      	ldr	r1, [pc, #28]	; (800886c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800884e:	4808      	ldr	r0, [pc, #32]	; (8008870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008850:	f7ff fe22 	bl	8008498 <USBD_GetString>
 8008854:	e004      	b.n	8008860 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	4904      	ldr	r1, [pc, #16]	; (800886c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800885a:	4805      	ldr	r0, [pc, #20]	; (8008870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800885c:	f7ff fe1c 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008860:	4b02      	ldr	r3, [pc, #8]	; (800886c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000634 	.word	0x20000634
 8008870:	08008ff4 	.word	0x08008ff4

08008874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800887a:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <Get_SerialNum+0x44>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <Get_SerialNum+0x48>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008886:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <Get_SerialNum+0x4c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800889a:	2208      	movs	r2, #8
 800889c:	4909      	ldr	r1, [pc, #36]	; (80088c4 <Get_SerialNum+0x50>)
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 f814 	bl	80088cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088a4:	2204      	movs	r2, #4
 80088a6:	4908      	ldr	r1, [pc, #32]	; (80088c8 <Get_SerialNum+0x54>)
 80088a8:	68b8      	ldr	r0, [r7, #8]
 80088aa:	f000 f80f 	bl	80088cc <IntToUnicode>
  }
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	1fff7a10 	.word	0x1fff7a10
 80088bc:	1fff7a14 	.word	0x1fff7a14
 80088c0:	1fff7a18 	.word	0x1fff7a18
 80088c4:	20000106 	.word	0x20000106
 80088c8:	20000116 	.word	0x20000116

080088cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]
 80088e2:	e027      	b.n	8008934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	2b09      	cmp	r3, #9
 80088ea:	d80b      	bhi.n	8008904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	0f1b      	lsrs	r3, r3, #28
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	4619      	mov	r1, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	440b      	add	r3, r1
 80088fc:	3230      	adds	r2, #48	; 0x30
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	e00a      	b.n	800891a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	0f1b      	lsrs	r3, r3, #28
 8008908:	b2da      	uxtb	r2, r3
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	4619      	mov	r1, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	440b      	add	r3, r1
 8008914:	3237      	adds	r2, #55	; 0x37
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	3301      	adds	r3, #1
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	3301      	adds	r3, #1
 8008932:	75fb      	strb	r3, [r7, #23]
 8008934:	7dfa      	ldrb	r2, [r7, #23]
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	429a      	cmp	r2, r3
 800893a:	d3d3      	bcc.n	80088e4 <IntToUnicode+0x18>
  }
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	609a      	str	r2, [r3, #8]
 8008960:	60da      	str	r2, [r3, #12]
 8008962:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800896c:	d13a      	bne.n	80089e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
 8008972:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 8008978:	f043 0301 	orr.w	r3, r3, #1
 800897c:	6313      	str	r3, [r2, #48]	; 0x30
 800897e:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800898a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800898e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008990:	2302      	movs	r3, #2
 8008992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008994:	2300      	movs	r3, #0
 8008996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008998:	2303      	movs	r3, #3
 800899a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800899c:	230a      	movs	r3, #10
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089a0:	f107 0314 	add.w	r3, r7, #20
 80089a4:	4619      	mov	r1, r3
 80089a6:	4812      	ldr	r0, [pc, #72]	; (80089f0 <HAL_PCD_MspInit+0xa4>)
 80089a8:	f7fa fae2 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 80089b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b6:	6353      	str	r3, [r2, #52]	; 0x34
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 80089be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c0:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 80089c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089c6:	6453      	str	r3, [r2, #68]	; 0x44
 80089c8:	4b08      	ldr	r3, [pc, #32]	; (80089ec <HAL_PCD_MspInit+0xa0>)
 80089ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089d4:	2200      	movs	r2, #0
 80089d6:	2100      	movs	r1, #0
 80089d8:	2043      	movs	r0, #67	; 0x43
 80089da:	f7f9 ffa8 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089de:	2043      	movs	r0, #67	; 0x43
 80089e0:	f7f9 ffc1 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089e4:	bf00      	nop
 80089e6:	3728      	adds	r7, #40	; 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	40023800 	.word	0x40023800
 80089f0:	40020000 	.word	0x40020000

080089f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fbe5 	bl	80071da <USBD_LL_SetupStage>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fe fc1f 	bl	8007284 <USBD_LL_DataOutStage>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	4613      	mov	r3, r2
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	334c      	adds	r3, #76	; 0x4c
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f7fe fcb8 	bl	80073ea <USBD_LL_DataInStage>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fdec 	bl	800766e <USBD_LL_SOF>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d001      	beq.n	8008ab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ab2:	f7f9 f866 	bl	8001b82 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008abc:	7bfa      	ldrb	r2, [r7, #15]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fd96 	bl	80075f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fd3e 	bl	800754e <USBD_LL_Reset>
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fd91 	bl	8007612 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6812      	ldr	r2, [r2, #0]
 8008afe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <HAL_PCD_SuspendCallback+0x48>)
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	4a03      	ldr	r2, [pc, #12]	; (8008b24 <HAL_PCD_SuspendCallback+0x48>)
 8008b16:	f043 0306 	orr.w	r3, r3, #6
 8008b1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fd81 	bl	800763e <USBD_LL_Resume>
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fdd9 	bl	8007712 <USBD_LL_IsoOUTIncomplete>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fd95 	bl	80076ae <USBD_LL_IsoINIncomplete>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fdeb 	bl	8007776 <USBD_LL_DevConnected>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fde8 	bl	800778c <USBD_LL_DevDisconnected>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d13c      	bne.n	8008c4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bd4:	4a20      	ldr	r2, [pc, #128]	; (8008c58 <USBD_LL_Init+0x94>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a1e      	ldr	r2, [pc, #120]	; (8008c58 <USBD_LL_Init+0x94>)
 8008be0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008be4:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <USBD_LL_Init+0x94>)
 8008be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <USBD_LL_Init+0x94>)
 8008bee:	2204      	movs	r2, #4
 8008bf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <USBD_LL_Init+0x94>)
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bf8:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <USBD_LL_Init+0x94>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bfe:	4b16      	ldr	r3, [pc, #88]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c00:	2202      	movs	r2, #2
 8008c02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c04:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c10:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c22:	480d      	ldr	r0, [pc, #52]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c24:	f7fa fb72 	bl	800330c <HAL_PCD_Init>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c2e:	f7f8 ffa8 	bl	8001b82 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	4808      	ldr	r0, [pc, #32]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c36:	f7fb fdb2 	bl	800479e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c3a:	2240      	movs	r2, #64	; 0x40
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4806      	ldr	r0, [pc, #24]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c40:	f7fb fd66 	bl	8004710 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c44:	2280      	movs	r2, #128	; 0x80
 8008c46:	2101      	movs	r1, #1
 8008c48:	4803      	ldr	r0, [pc, #12]	; (8008c58 <USBD_LL_Init+0x94>)
 8008c4a:	f7fb fd61 	bl	8004710 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000834 	.word	0x20000834

08008c5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fa fc67 	bl	8003546 <HAL_PCD_Start>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f930 	bl	8008ee4 <USBD_Get_USB_Status>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	70fb      	strb	r3, [r7, #3]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70bb      	strb	r3, [r7, #2]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cba:	78bb      	ldrb	r3, [r7, #2]
 8008cbc:	883a      	ldrh	r2, [r7, #0]
 8008cbe:	78f9      	ldrb	r1, [r7, #3]
 8008cc0:	f7fb f938 	bl	8003f34 <HAL_PCD_EP_Open>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f90a 	bl	8008ee4 <USBD_Get_USB_Status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fb f981 	bl	8004004 <HAL_PCD_EP_Close>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f8eb 	bl	8008ee4 <USBD_Get_USB_Status>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fb fa41 	bl	80041c2 <HAL_PCD_EP_SetStall>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f8cc 	bl	8008ee4 <USBD_Get_USB_Status>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fb fa86 	bl	800428a <HAL_PCD_EP_ClrStall>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 f8ad 	bl	8008ee4 <USBD_Get_USB_Status>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008daa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da0b      	bge.n	8008dcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	333e      	adds	r3, #62	; 0x3e
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	e00b      	b.n	8008de4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008de2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fb f86b 	bl	8003eea <HAL_PCD_SetAddress>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f862 	bl	8008ee4 <USBD_Get_USB_Status>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e4c:	7af9      	ldrb	r1, [r7, #11]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f7fb f96c 	bl	800412e <HAL_PCD_EP_Transmit>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 f841 	bl	8008ee4 <USBD_Get_USB_Status>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e66:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e8e:	7af9      	ldrb	r1, [r7, #11]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	f7fb f900 	bl	8004098 <HAL_PCD_EP_Receive>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f820 	bl	8008ee4 <USBD_Get_USB_Status>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ea8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008ebc:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <USBD_static_malloc+0x18>)
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000d40 	.word	0x20000d40

08008ed0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d817      	bhi.n	8008f28 <USBD_Get_USB_Status+0x44>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBD_Get_USB_Status+0x1c>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f17 	.word	0x08008f17
 8008f08:	08008f1d 	.word	0x08008f1d
 8008f0c:	08008f23 	.word	0x08008f23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e00b      	b.n	8008f2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	e008      	b.n	8008f2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e005      	b.n	8008f2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e002      	b.n	8008f2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	bf00      	nop
  }
  return usb_status;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <__libc_init_array>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4d0d      	ldr	r5, [pc, #52]	; (8008f74 <__libc_init_array+0x38>)
 8008f40:	4c0d      	ldr	r4, [pc, #52]	; (8008f78 <__libc_init_array+0x3c>)
 8008f42:	1b64      	subs	r4, r4, r5
 8008f44:	10a4      	asrs	r4, r4, #2
 8008f46:	2600      	movs	r6, #0
 8008f48:	42a6      	cmp	r6, r4
 8008f4a:	d109      	bne.n	8008f60 <__libc_init_array+0x24>
 8008f4c:	4d0b      	ldr	r5, [pc, #44]	; (8008f7c <__libc_init_array+0x40>)
 8008f4e:	4c0c      	ldr	r4, [pc, #48]	; (8008f80 <__libc_init_array+0x44>)
 8008f50:	f000 f820 	bl	8008f94 <_init>
 8008f54:	1b64      	subs	r4, r4, r5
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	2600      	movs	r6, #0
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	d105      	bne.n	8008f6a <__libc_init_array+0x2e>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f64:	4798      	blx	r3
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7ee      	b.n	8008f48 <__libc_init_array+0xc>
 8008f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6e:	4798      	blx	r3
 8008f70:	3601      	adds	r6, #1
 8008f72:	e7f2      	b.n	8008f5a <__libc_init_array+0x1e>
 8008f74:	0800902c 	.word	0x0800902c
 8008f78:	0800902c 	.word	0x0800902c
 8008f7c:	0800902c 	.word	0x0800902c
 8008f80:	08009034 	.word	0x08009034

08008f84 <memset>:
 8008f84:	4402      	add	r2, r0
 8008f86:	4603      	mov	r3, r0
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d100      	bne.n	8008f8e <memset+0xa>
 8008f8c:	4770      	bx	lr
 8008f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f92:	e7f9      	b.n	8008f88 <memset+0x4>

08008f94 <_init>:
 8008f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f96:	bf00      	nop
 8008f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9a:	bc08      	pop	{r3}
 8008f9c:	469e      	mov	lr, r3
 8008f9e:	4770      	bx	lr

08008fa0 <_fini>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr
