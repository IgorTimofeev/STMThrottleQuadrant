
STMThrottleQuadrant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007abc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc4  08007cc4  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ccc  08007ccc  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b9c  20000130  08007e08  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  08007e08  00020ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c2  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d79  00000000  00000000  00030322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9bb  00000000  00000000  000348d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c10  00000000  00000000  00050293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095490  00000000  00000000  00060ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003334  00000000  00000000  000f6384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c3c 	.word	0x08007c3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	08007c3c 	.word	0x08007c3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>:
#include "math.h"
#include "stm32f4xx_hal.h"

class AnalogPin {
	public:
		AnalogPin(ADC_HandleTypeDef* adc, uint32_t channel) :
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
			_adc(adc),
			_channel(channel)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	605a      	str	r2, [r3, #4]
		{

		}
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <_ZNK9AnalogPin8getValueEv>:

		void begin() {

		}

		uint32_t getValue() const {
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
			// Changing channel
			ADC_ChannelConfTypeDef channelConfig = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
			channelConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
			// Hmmm, seems like it some sort of polling priority
			// See https://stackoverflow.com/questions/73696752/how-are-ranks-interpreted-in-stm32-adc-multi-channel-scan-mode
			channelConfig.Rank = _channel + 1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
			channelConfig.Channel = _channel;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
			HAL_ADC_ConfigChannel(&hadc1, &channelConfig);
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	4619      	mov	r1, r3
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <_ZNK9AnalogPin8getValueEv+0x6c>)
 8000534:	f001 f84a 	bl	80015cc <HAL_ADC_ConfigChannel>

			// Reading value
			HAL_ADC_Start(_adc);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fec5 	bl	80012cc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(_adc, 1);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f000 ffa6 	bl	800149a <HAL_ADC_PollForConversion>
			auto value = HAL_ADC_GetValue(_adc);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f82c 	bl	80015b0 <HAL_ADC_GetValue>
 8000558:	61f8      	str	r0, [r7, #28]
			HAL_ADC_Stop(_adc);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff68 	bl	8001434 <HAL_ADC_Stop>

			return value;
 8000564:	69fb      	ldr	r3, [r7, #28]
		}
 8000566:	4618      	mov	r0, r3
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000014c 	.word	0x2000014c

08000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>:

#include "stm32f4xx_hal.h"

class DigitalPin {
	public:
		DigitalPin(GPIO_TypeDef* port, uint32_t pin) :
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
			_port(port),
			_pin(pin)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
		{

		}
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZN10DigitalPin8setValueEb>:

		void beginOutput() {
			begin(GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
		}

		void setValue(bool value) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]
			// Wtf, "set" means "no signal"? OK
			HAL_GPIO_WritePin(_port, _pin, value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <_ZN10DigitalPin8setValueEb+0x20>
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <_ZN10DigitalPin8setValueEb+0x22>
 80005ba:	2301      	movs	r3, #1
 80005bc:	461a      	mov	r2, r3
 80005be:	f001 fce1 	bl	8001f84 <HAL_GPIO_WritePin>
		}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_ZN10DigitalPin8getValueEv>:

		bool getValue() {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
			// Same shit
			return HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_RESET;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	4610      	mov	r0, r2
 80005e0:	f001 fcb8 	bl	8001f54 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf0c      	ite	eq
 80005ea:	2301      	moveq	r3, #1
 80005ec:	2300      	movne	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
		}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>:
#include "analog_pin.h"
#include "math.h"

class Potentiometer {
	public:
		Potentiometer(const AnalogPin& analogPin, uint32_t minimum, uint32_t maximum) :
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	603b      	str	r3, [r7, #0]
			_analogPin(analogPin),
			_minimum(minimum),
			_maximum(maximum)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	60da      	str	r2, [r3, #12]
		{

		}
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZNK13Potentiometer8getValueEv>:

		uint32_t getValue() const {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
			float value = (float) _analogPin.getValue() / 4096.0f;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff64 	bl	8000504 <_ZNK9AnalogPin8getValueEv>
 800063c:	ee07 0a90 	vmov	s15, r0
 8000640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000644:	eddf 6a11 	vldr	s13, [pc, #68]	; 800068c <_ZNK13Potentiometer8getValueEv+0x60>
 8000648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064c:	edc7 7a03 	vstr	s15, [r7, #12]

			return (uint32_t) (_minimum + value * (_maximum - _minimum));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	ee07 3a90 	vmov	s15, r3
 8000658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68da      	ldr	r2, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800066e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800067a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067e:	ee17 3a90 	vmov	r3, s15
		}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	45800000 	.word	0x45800000

08000690 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>:
			pressed;
};

class Encoder {
	public:
		Encoder(const DigitalPin& clkPin, const DigitalPin& dtPin, const DigitalPin& swPin) :
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
			_clkPin(clkPin),
			_dtPin(dtPin),
			_swPin(swPin)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	3308      	adds	r3, #8
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	3310      	adds	r3, #16
 80006be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
		{
			_oldRotation = readRotation();
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f86f 	bl	80007b0 <_ZN7Encoder12readRotationEv>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	761a      	strb	r2, [r3, #24]
		}
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_ZN7Encoder8getStateEv>:

		EncoderState getState() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
			EncoderState state;
			state.left = false;
 80006ec:	2300      	movs	r3, #0
 80006ee:	723b      	strb	r3, [r7, #8]
			state.right = false;
 80006f0:	2300      	movs	r3, #0
 80006f2:	727b      	strb	r3, [r7, #9]
			state.pressed = _swPin.getValue();
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3310      	adds	r3, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff66 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 80006fe:	4603      	mov	r3, r0
 8000700:	72bb      	strb	r3, [r7, #10]

			auto rotation = readRotation();
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f854 	bl	80007b0 <_ZN7Encoder12readRotationEv>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]

			if (rotation != _oldRotation) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7e1b      	ldrb	r3, [r3, #24]
 8000710:	7bfa      	ldrb	r2, [r7, #15]
 8000712:	429a      	cmp	r2, r3
 8000714:	d034      	beq.n	8000780 <_ZN7Encoder8getStateEv+0x9c>
				switch (_oldRotation | (rotation << 2)) {
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7e1b      	ldrb	r3, [r3, #24]
 800071a:	461a      	mov	r2, r3
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4313      	orrs	r3, r2
 8000722:	2b0f      	cmp	r3, #15
 8000724:	d825      	bhi.n	8000772 <_ZN7Encoder8getStateEv+0x8e>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <_ZN7Encoder8getStateEv+0x48>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000779 	.word	0x08000779
 8000730:	0800076d 	.word	0x0800076d
 8000734:	08000773 	.word	0x08000773
 8000738:	0800076d 	.word	0x0800076d
 800073c:	08000773 	.word	0x08000773
 8000740:	08000779 	.word	0x08000779
 8000744:	08000773 	.word	0x08000773
 8000748:	0800076d 	.word	0x0800076d
 800074c:	0800076d 	.word	0x0800076d
 8000750:	08000773 	.word	0x08000773
 8000754:	08000779 	.word	0x08000779
 8000758:	08000773 	.word	0x08000773
 800075c:	0800076d 	.word	0x0800076d
 8000760:	08000773 	.word	0x08000773
 8000764:	0800076d 	.word	0x0800076d
 8000768:	08000779 	.word	0x08000779

					// Button simulation
					case 0: case 5: case 10: case 15:
						break;
					case 1: case 7: case 8: case 14: case 3: case 12:
						state.left = true;
 800076c:	2301      	movs	r3, #1
 800076e:	723b      	strb	r3, [r7, #8]
						break;
 8000770:	e003      	b.n	800077a <_ZN7Encoder8getStateEv+0x96>
					default:
						state.right = true;
 8000772:	2301      	movs	r3, #1
 8000774:	727b      	strb	r3, [r7, #9]
						break;
 8000776:	e000      	b.n	800077a <_ZN7Encoder8getStateEv+0x96>
						break;
 8000778:	bf00      	nop

				}

				_oldRotation = rotation;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	761a      	strb	r2, [r3, #24]
			}


			return state;
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	f107 0208 	add.w	r2, r7, #8
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	4611      	mov	r1, r2
 800078c:	8019      	strh	r1, [r3, #0]
 800078e:	3302      	adds	r3, #2
 8000790:	0c12      	lsrs	r2, r2, #16
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	2300      	movs	r3, #0
 8000796:	7b3a      	ldrb	r2, [r7, #12]
 8000798:	f362 0307 	bfi	r3, r2, #0, #8
 800079c:	7b7a      	ldrb	r2, [r7, #13]
 800079e:	f362 230f 	bfi	r3, r2, #8, #8
 80007a2:	7bba      	ldrb	r2, [r7, #14]
 80007a4:	f362 4317 	bfi	r3, r2, #16, #8
		}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN7Encoder12readRotationEv>:
		DigitalPin _clkPin;
		DigitalPin _dtPin;
		DigitalPin _swPin;
		uint8_t _oldRotation = 0;

		uint8_t readRotation() {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
			return (_clkPin.getValue() << 1) | _dtPin.getValue();
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff05 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 80007c0:	4603      	mov	r3, r0
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	b25c      	sxtb	r4, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3308      	adds	r3, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fefd 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	4323      	orrs	r3, r4
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	b2db      	uxtb	r3, r3
		}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
	...

080007e4 <_ZN8JoystickC1Ev>:
};
#pragma pack(pop)

class Joystick {
	public:
		Joystick() {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b09f      	sub	sp, #124	; 0x7c
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	687c      	ldr	r4, [r7, #4]
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	497b      	ldr	r1, [pc, #492]	; (80009e4 <_ZN8JoystickC1Ev+0x200>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fe70 	bl	80004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 80007fc:	f107 0108 	add.w	r1, r7, #8
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	2200      	movs	r2, #0
 8000806:	4620      	mov	r0, r4
 8000808:	f7ff fef6 	bl	80005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0410 	add.w	r4, r3, #16
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2201      	movs	r2, #1
 8000818:	4972      	ldr	r1, [pc, #456]	; (80009e4 <_ZN8JoystickC1Ev+0x200>)
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe5e 	bl	80004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8000820:	f107 0110 	add.w	r1, r7, #16
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	2200      	movs	r2, #0
 800082a:	4620      	mov	r0, r4
 800082c:	f7ff fee4 	bl	80005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f103 0420 	add.w	r4, r3, #32
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	2202      	movs	r2, #2
 800083c:	4969      	ldr	r1, [pc, #420]	; (80009e4 <_ZN8JoystickC1Ev+0x200>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe4c 	bl	80004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8000844:	f107 0118 	add.w	r1, r7, #24
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	2200      	movs	r2, #0
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff fed2 	bl	80005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2203      	movs	r2, #3
 8000860:	4960      	ldr	r1, [pc, #384]	; (80009e4 <_ZN8JoystickC1Ev+0x200>)
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe3a 	bl	80004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8000868:	f107 0120 	add.w	r1, r7, #32
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	2200      	movs	r2, #0
 8000872:	4620      	mov	r0, r4
 8000874:	f7ff fec0 	bl	80005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800087e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000882:	2204      	movs	r2, #4
 8000884:	4957      	ldr	r1, [pc, #348]	; (80009e4 <_ZN8JoystickC1Ev+0x200>)
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe28 	bl	80004dc <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 800088c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	2200      	movs	r2, #0
 8000896:	4620      	mov	r0, r4
 8000898:	f7ff feae 	bl	80005f8 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80008a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a6:	2210      	movs	r2, #16
 80008a8:	494f      	ldr	r1, [pc, #316]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe62 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80008b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b4:	2220      	movs	r2, #32
 80008b6:	494c      	ldr	r1, [pc, #304]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe5b 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80008be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	4948      	ldr	r1, [pc, #288]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe54 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80008cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008d4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008d8:	4620      	mov	r0, r4
 80008da:	f7ff fed9 	bl	8000690 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80008e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	493f      	ldr	r1, [pc, #252]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe41 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80008f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fa:	493b      	ldr	r1, [pc, #236]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe39 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8000902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090a:	4937      	ldr	r1, [pc, #220]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe31 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8000912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000916:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800091a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800091e:	4620      	mov	r0, r4
 8000920:	f7ff feb6 	bl	8000690 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800092a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800092e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000932:	492d      	ldr	r1, [pc, #180]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fe1d 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800093a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000942:	4929      	ldr	r1, [pc, #164]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe15 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800094a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	4925      	ldr	r1, [pc, #148]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe0d 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800095a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800095e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000962:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000966:	4620      	mov	r0, r4
 8000968:	f7ff fe92 	bl	8000690 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	33a4      	adds	r3, #164	; 0xa4
 8000970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000974:	491d      	ldr	r1, [pc, #116]	; (80009ec <_ZN8JoystickC1Ev+0x208>)
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fdfc 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	33ac      	adds	r3, #172	; 0xac
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	4919      	ldr	r1, [pc, #100]	; (80009ec <_ZN8JoystickC1Ev+0x208>)
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fdf4 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	33b4      	adds	r3, #180	; 0xb4
 8000990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000994:	4915      	ldr	r1, [pc, #84]	; (80009ec <_ZN8JoystickC1Ev+0x208>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fdec 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	33bc      	adds	r3, #188	; 0xbc
 80009a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a4:	4911      	ldr	r1, [pc, #68]	; (80009ec <_ZN8JoystickC1Ev+0x208>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fde4 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	33c4      	adds	r3, #196	; 0xc4
 80009b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b4:	490d      	ldr	r1, [pc, #52]	; (80009ec <_ZN8JoystickC1Ev+0x208>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fddc 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	33cc      	adds	r3, #204	; 0xcc
 80009c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009c4:	4908      	ldr	r1, [pc, #32]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fdd4 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	33d4      	adds	r3, #212	; 0xd4
 80009d0:	2208      	movs	r2, #8
 80009d2:	4905      	ldr	r1, [pc, #20]	; (80009e8 <_ZN8JoystickC1Ev+0x204>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fdcd 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>

		}
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	377c      	adds	r7, #124	; 0x7c
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	2000014c 	.word	0x2000014c
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020000 	.word	0x40020000

080009f0 <_ZN8Joystick4tickEv>:

		void tick() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
			updateReportAxis();
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f80d 	bl	8000a18 <_ZN8Joystick16updateReportAxisEv>
			updateReportButtons();
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f88d 	bl	8000b1e <_ZN8Joystick19updateReportButtonsEv>

			SendGovnoReport((uint8_t*) &_report, sizeof(JoystickReport));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	33dc      	adds	r3, #220	; 0xdc
 8000a08:	210c      	movs	r1, #12
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f006 fc78 	bl	8007300 <SendGovnoReport>
		}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN8Joystick16updateReportAxisEv>:

			_landingGear = DigitalPin(GPIOB, GPIO_PIN_3);

		JoystickReport _report;

		void updateReportAxis() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
			_report.x = _speedBrake.getValue();
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe02 	bl	800062c <_ZNK13Potentiometer8getValueEv>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
			_report.y = _throttle1.getValue();
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3310      	adds	r3, #16
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fdf8 	bl	800062c <_ZNK13Potentiometer8getValueEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
			_report.z = _throttle2.getValue();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3320      	adds	r3, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fdee 	bl	800062c <_ZNK13Potentiometer8getValueEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
			_report.rx = _flaps.getValue();
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3330      	adds	r3, #48	; 0x30
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fde4 	bl	800062c <_ZNK13Potentiometer8getValueEv>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
			_report.ry = _trimWheel.getValue();
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3340      	adds	r3, #64	; 0x40
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdda 	bl	800062c <_ZNK13Potentiometer8getValueEv>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_ZN8Joystick18updateReportButtonERhb>:

		void updateReportButton(uint8_t& index, bool value) {
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71fb      	strb	r3, [r7, #7]
			_report.buttons |= value << index;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	7809      	ldrb	r1, [r1, #0]
 8000aa6:	408b      	lsls	r3, r1
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
			index++;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	701a      	strb	r2, [r3, #0]
		}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_ZN8Joystick30updateReportButtonsFromEncoderERhR7Encoder>:

		void updateReportButtonsFromEncoder(uint8_t& index, Encoder& encoder) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
			auto state = encoder.getState();
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe02 	bl	80006e4 <_ZN7Encoder8getStateEv>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	753a      	strb	r2, [r7, #20]
 8000ae6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000aea:	757a      	strb	r2, [r7, #21]
 8000aec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000af0:	75bb      	strb	r3, [r7, #22]

			updateReportButton(index, state.left);
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	461a      	mov	r2, r3
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff ffc6 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, state.pressed);
 8000afe:	7dbb      	ldrb	r3, [r7, #22]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff ffc0 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, state.right);
 8000b0a:	7d7b      	ldrb	r3, [r7, #21]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff ffba 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
		}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN8Joystick19updateReportButtonsEv>:

		void updateReportButtons() {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
			uint8_t index = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]

			_report.buttons = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
			updateReportButton(index, _toggle1.getValue());
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	33a4      	adds	r3, #164	; 0xa4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fd47 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 030f 	add.w	r3, r7, #15
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff9f 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, _toggle2.getValue());
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	33ac      	adds	r3, #172	; 0xac
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd3a 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f107 030f 	add.w	r3, r7, #15
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff92 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, _toggle3.getValue());
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	33b4      	adds	r3, #180	; 0xb4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fd2d 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	f107 030f 	add.w	r3, r7, #15
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff85 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>

			updateReportButtonsFromEncoder(index, _encoder1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000b86:	f107 030f 	add.w	r3, r7, #15
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff9e 	bl	8000ace <_ZN8Joystick30updateReportButtonsFromEncoderERhR7Encoder>
			updateReportButtonsFromEncoder(index, _encoder2);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8000b98:	f107 030f 	add.w	r3, r7, #15
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff95 	bl	8000ace <_ZN8Joystick30updateReportButtonsFromEncoderERhR7Encoder>
			updateReportButtonsFromEncoder(index, _encoder3);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8000baa:	f107 030f 	add.w	r3, r7, #15
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff8c 	bl	8000ace <_ZN8Joystick30updateReportButtonsFromEncoderERhR7Encoder>

			updateReportButton(index, _button1.getValue());
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	33bc      	adds	r3, #188	; 0xbc
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd05 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f107 030f 	add.w	r3, r7, #15
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff5d 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, _button2.getValue());
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	33c4      	adds	r3, #196	; 0xc4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcf8 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f107 030f 	add.w	r3, r7, #15
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff50 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
			updateReportButton(index, _button3.getValue());
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	33cc      	adds	r3, #204	; 0xcc
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fceb 	bl	80005ca <_ZN10DigitalPin8getValueEv>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f107 030f 	add.w	r3, r7, #15
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff43 	bl	8000a8a <_ZN8Joystick18updateReportButtonERhb>
		}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_Z8yobaMainv>:
#include "digital_pin.h"

Joystick joystick = Joystick();
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);

void yobaMain() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	LEDPin.setValue(true);
 8000c10:	2101      	movs	r1, #1
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <_Z8yobaMainv+0x1c>)
 8000c14:	f7ff fcc1 	bl	800059a <_ZN10DigitalPin8setValueEb>

	while (true) {
		joystick.tick();
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <_Z8yobaMainv+0x20>)
 8000c1a:	f7ff fee9 	bl	80009f0 <_ZN8Joystick4tickEv>

		HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 faec 	bl	80011fc <HAL_Delay>
		joystick.tick();
 8000c24:	e7f8      	b.n	8000c18 <_Z8yobaMainv+0xc>
 8000c26:	bf00      	nop
 8000c28:	2000027c 	.word	0x2000027c
 8000c2c:	20000194 	.word	0x20000194

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fa70 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f80a 	bl	8000c50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f8d6 	bl	8000dec <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000c40:	f000 f878 	bl	8000d34 <_ZL12MX_ADC1_Initv>
  MX_USB_DEVICE_Init();
 8000c44:	f006 fb6e 	bl	8007324 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  yobaMain();
 8000c48:	f7ff ffe0 	bl	8000c0c <_Z8yobaMainv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <main+0x1c>
	...

08000c50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 ffe4 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <_Z18SystemClock_Configv+0xdc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <_Z18SystemClock_Configv+0xdc>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <_Z18SystemClock_Configv+0xdc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fbd3 	bl	8003480 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf14      	ite	ne
 8000ce0:	2301      	movne	r3, #1
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000cea:	f000 f90b 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fe30 	bl	8003970 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2301      	movne	r3, #1
 8000d18:	2300      	moveq	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000d20:	f000 f8f0 	bl	8000f04 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3750      	adds	r7, #80	; 0x50
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <_ZL12MX_ADC1_Initv+0xb0>)
 8000d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <_ZL12MX_ADC1_Initv+0xb4>)
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000d94:	f000 fa56 	bl	8001244 <HAL_ADC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8000da8:	f000 f8ac 	bl	8000f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <_ZL12MX_ADC1_Initv+0xac>)
 8000dbe:	f000 fc05 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000dd2:	f000 f897 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000014c 	.word	0x2000014c
 8000de4:	40012000 	.word	0x40012000
 8000de8:	0f000001 	.word	0x0f000001

08000dec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a3a      	ldr	r2, [pc, #232]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a25      	ldr	r2, [pc, #148]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x10c>)
 8000e7a:	f001 f883 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x10c>)
 8000e98:	f000 fed8 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000e9c:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000ea0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <_ZL12MX_GPIO_Initv+0x110>)
 8000eb2:	f000 fecb 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <_ZL12MX_GPIO_Initv+0x114>)
 8000ecc:	f000 febe 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 8000ed0:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <_ZL12MX_GPIO_Initv+0x114>)
 8000ee6:	f000 feb1 	bl	8001c4c <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020000 	.word	0x40020000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10d      	bne.n	8000f3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d108      	bne.n	8000f3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
Joystick joystick = Joystick();
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000f2c:	f7ff fc5a 	bl	80007e4 <_ZN8JoystickC1Ev>
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);
 8000f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f34:	4904      	ldr	r1, [pc, #16]	; (8000f48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000f38:	f7ff fb1c 	bl	8000574 <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000194 	.word	0x20000194
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	2000027c 	.word	0x2000027c

08000f50 <_GLOBAL__sub_I_hadc1>:
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffd9 	bl	8000f10 <_Z41__static_initialization_and_destruction_0ii>
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800100a:	231f      	movs	r3, #31
 800100c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x84>)
 800101e:	f000 fe15 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40012000 	.word	0x40012000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f89a 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <OTG_FS_IRQHandler+0x10>)
 8001092:	f001 f8e0 	bl	8002256 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000768 	.word	0x20000768

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ffd7 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f006 fd77 	bl	8007be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fd9b 	bl	8000c30 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001108:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 800110c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001110:	20000ccc 	.word	0x20000ccc

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 fd41 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff ff08 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd59 	bl	8001c32 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 fd21 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000284 	.word	0x20000284

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000284 	.word	0x20000284

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008

08001244 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e033      	b.n	80012c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fea4 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128a:	f023 0302 	bic.w	r3, r3, #2
 800128e:	f043 0202 	orr.w	r2, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 faca 	bl	8001830 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
 80012b2:	e001      	b.n	80012b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Start+0x1a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e097      	b.n	8001416 <HAL_ADC_Start+0x14a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d018      	beq.n	800132e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_ADC_Start+0x158>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_ADC_Start+0x15c>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9a      	lsrs	r2, r3, #18
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001320:	e002      	b.n	8001328 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3b01      	subs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f9      	bne.n	8001322 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d15f      	bne.n	80013fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001366:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800137a:	d106      	bne.n	800138a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f023 0206 	bic.w	r2, r3, #6
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
 8001388:	e002      	b.n	8001390 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_Start+0x160>)
 800139a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10f      	bne.n	80013d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d129      	bne.n	8001414 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e020      	b.n	8001414 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_ADC_Start+0x164>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d11b      	bne.n	8001414 <HAL_ADC_Start+0x148>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d114      	bne.n	8001414 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	e00b      	b.n	8001414 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0210 	orr.w	r2, r3, #16
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83
 800142c:	40012300 	.word	0x40012300
 8001430:	40012000 	.word	0x40012000

08001434 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADC_Stop+0x16>
 8001446:	2302      	movs	r3, #2
 8001448:	e021      	b.n	800148e <HAL_ADC_Stop+0x5a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d109      	bne.n	8001484 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b6:	d113      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f043 0220 	orr.w	r2, r3, #32
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e063      	b.n	80015a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014e0:	f7ff fe80 	bl	80011e4 <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e6:	e021      	b.n	800152c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d01d      	beq.n	800152c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_ADC_PollForConversion+0x6c>
 80014f6:	f7ff fe75 	bl	80011e4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d212      	bcs.n	800152c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b02      	cmp	r3, #2
 8001512:	d00b      	beq.n	800152c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e03d      	b.n	80015a8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d1d6      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f06f 0212 	mvn.w	r2, #18
 8001542:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d123      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11f      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d105      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e113      	b.n	8001810 <HAL_ADC_ConfigChannel+0x244>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d925      	bls.n	8001644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	3b1e      	subs	r3, #30
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4403      	add	r3, r0
 8001636:	3b1e      	subs	r3, #30
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	e022      	b.n	800168a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	2207      	movs	r2, #7
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4403      	add	r3, r0
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d824      	bhi.n	80016dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
 80016da:	e04c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d824      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b23      	subs	r3, #35	; 0x23
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
 800172c:	e023      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b41      	subs	r3, #65	; 0x41
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	; 0x41
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_ADC_ConfigChannel+0x250>)
 8001778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d10f      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d10b      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12b      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d003      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0x1f4>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d122      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d111      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_ADC_ConfigChannel+0x25c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_ADC_ConfigChannel+0x260>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	40012000 	.word	0x40012000
 8001824:	10000012 	.word	0x10000012
 8001828:	20000000 	.word	0x20000000
 800182c:	431bde83 	.word	0x431bde83

08001830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001838:	4b79      	ldr	r3, [pc, #484]	; (8001a20 <ADC_Init+0x1f0>)
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <ADC_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e00f      	b.n	800192e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0202 	bic.w	r2, r2, #2
 800193c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	005a      	lsls	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800196a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800197a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	3b01      	subs	r3, #1
 8001988:	035a      	lsls	r2, r3, #13
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e007      	b.n	80019a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	3b01      	subs	r3, #1
 80019c0:	051a      	lsls	r2, r3, #20
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e6:	025a      	lsls	r2, r3, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	029a      	lsls	r2, r3, #10
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40012300 	.word	0x40012300
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff3e 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff31 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e159      	b.n	8001f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8148 	bne.w	8001f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d005      	beq.n	8001c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d017      	beq.n	8001d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d123      	bne.n	8001d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a2 	beq.w	8001f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x202>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_GPIO_Init+0x2f4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x1fe>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_GPIO_Init+0x2f8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x1fa>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_GPIO_Init+0x2fc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x1f6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a45      	ldr	r2, [pc, #276]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x1f2>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f aea2 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb8:	b08f      	sub	sp, #60	; 0x3c
 8001fba:	af0a      	add	r7, sp, #40	; 0x28
 8001fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e10f      	b.n	80021e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f005 fb06 	bl	80075f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 ff7f 	bl	8003f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	687e      	ldr	r6, [r7, #4]
 8002014:	466d      	mov	r5, sp
 8002016:	f106 0410 	add.w	r4, r6, #16
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002026:	e885 0003 	stmia.w	r5, {r0, r1}
 800202a:	1d33      	adds	r3, r6, #4
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f001 fe56 	bl	8003ce0 <USB_CoreInit>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0d0      	b.n	80021e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f001 ff6d 	bl	8003f2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e04a      	b.n	80020ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	333d      	adds	r3, #61	; 0x3d
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	333c      	adds	r3, #60	; 0x3c
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	b298      	uxth	r0, r3
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	3344      	adds	r3, #68	; 0x44
 8002094:	4602      	mov	r2, r0
 8002096:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3340      	adds	r3, #64	; 0x40
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3348      	adds	r3, #72	; 0x48
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	334c      	adds	r3, #76	; 0x4c
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3301      	adds	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3af      	bcc.n	8002058 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e044      	b.n	8002188 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3301      	adds	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d3b5      	bcc.n	80020fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	687e      	ldr	r6, [r7, #4]
 800219a:	466d      	mov	r5, sp
 800219c:	f106 0410 	add.w	r4, r6, #16
 80021a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b0:	1d33      	adds	r3, r6, #4
 80021b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f001 ff05 	bl	8003fc4 <USB_DevInit>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00d      	b.n	80021e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 f854 	bl	800528e <USB_DevDisconnect>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_Start+0x1c>
 8002208:	2302      	movs	r3, #2
 800220a:	e020      	b.n	800224e <HAL_PCD_Start+0x5e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b01      	cmp	r3, #1
 800221a:	d109      	bne.n	8002230 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002220:	2b01      	cmp	r3, #1
 8002222:	d005      	beq.n	8002230 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f001 fe57 	bl	8003ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f804 	bl	800524c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b08d      	sub	sp, #52	; 0x34
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 f8c2 	bl	80053f6 <USB_GetMode>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 848a 	bne.w	8002b8e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 f826 	bl	80052d0 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8480 	beq.w	8002b8c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f813 	bl	80052d0 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d107      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f002 0202 	and.w	r2, r2, #2
 80022c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f801 	bl	80052d0 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d161      	bne.n	800239c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0210 	bic.w	r2, r2, #16
 80022e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	2b02      	cmp	r3, #2
 8002312:	d124      	bne.n	800235e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d035      	beq.n	800238c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800232a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6a38      	ldr	r0, [r7, #32]
 8002334:	f002 fe38 	bl	8004fa8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002344:	441a      	add	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002356:	441a      	add	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	621a      	str	r2, [r3, #32]
 800235c:	e016      	b.n	800238c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	0c5b      	lsrs	r3, r3, #17
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	2b06      	cmp	r3, #6
 8002368:	d110      	bne.n	800238c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002370:	2208      	movs	r2, #8
 8002372:	4619      	mov	r1, r3
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f002 fe17 	bl	8004fa8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002386:	441a      	add	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0210 	orr.w	r2, r2, #16
 800239a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 ff95 	bl	80052d0 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023b0:	f040 80a7 	bne.w	8002502 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 ff9a 	bl	80052f6 <USB_ReadDevAllOutEpInterrupt>
 80023c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023c4:	e099      	b.n	80024fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 808e 	beq.w	80024ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 ffbe 	bl	800535e <USB_ReadDevOutEPInterrupt>
 80023e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fa:	461a      	mov	r2, r3
 80023fc:	2301      	movs	r3, #1
 80023fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 feaa 	bl	800315c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241e:	461a      	mov	r2, r3
 8002420:	2308      	movs	r3, #8
 8002422:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 ff80 	bl	800332c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002442:	461a      	mov	r2, r3
 8002444:	2310      	movs	r3, #16
 8002446:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d109      	bne.n	8002472 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002470:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	78db      	ldrb	r3, [r3, #3]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2200      	movs	r2, #0
 8002494:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f005 f9a5 	bl	80077ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ae:	461a      	mov	r2, r3
 80024b0:	2302      	movs	r3, #2
 80024b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	2320      	movs	r3, #32
 80024ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f47f af62 	bne.w	80023c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fee2 	bl	80052d0 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002516:	f040 80db 	bne.w	80026d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 ff03 	bl	800532a <USB_ReadDevAllInEpInterrupt>
 8002524:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800252a:	e0cd      	b.n	80026c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80c2 	beq.w	80026bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f002 ff29 	bl	800539a <USB_ReadDevInEPInterrupt>
 8002548:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d057      	beq.n	8002604 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2201      	movs	r2, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	69f9      	ldr	r1, [r7, #28]
 8002570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002574:	4013      	ands	r3, r2
 8002576:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002584:	461a      	mov	r2, r3
 8002586:	2301      	movs	r3, #1
 8002588:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d132      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	334c      	adds	r3, #76	; 0x4c
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4403      	add	r3, r0
 80025b2:	3348      	adds	r3, #72	; 0x48
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4419      	add	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4403      	add	r3, r0
 80025c6:	334c      	adds	r3, #76	; 0x4c
 80025c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d113      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x3a2>
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3354      	adds	r3, #84	; 0x54
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f0:	461a      	mov	r2, r3
 80025f2:	2101      	movs	r1, #1
 80025f4:	f002 ff30 	bl	8005458 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f005 f879 	bl	80076f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800261a:	461a      	mov	r2, r3
 800261c:	2308      	movs	r3, #8
 800261e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002636:	461a      	mov	r2, r3
 8002638:	2310      	movs	r3, #16
 800263a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002652:	461a      	mov	r2, r3
 8002654:	2340      	movs	r3, #64	; 0x40
 8002656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d023      	beq.n	80026aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002664:	6a38      	ldr	r0, [r7, #32]
 8002666:	f001 fe11 	bl	800428c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	78db      	ldrb	r3, [r3, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f005 f8bc 	bl	8007810 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2302      	movs	r3, #2
 80026a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fcc3 	bl	8003042 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3301      	adds	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f47f af2e 	bne.w	800252c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fdfb 	bl	80052d0 <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026e4:	d122      	bne.n	800272c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002700:	2b01      	cmp	r3, #1
 8002702:	d108      	bne.n	8002716 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800270c:	2100      	movs	r1, #0
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 feaa 	bl	8003468 <HAL_PCDEx_LPM_Callback>
 8002714:	e002      	b.n	800271c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f005 f85a 	bl	80077d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800272a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fdcd 	bl	80052d0 <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002740:	d112      	bne.n	8002768 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f005 f816 	bl	8007784 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002766:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 fdaf 	bl	80052d0 <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	f040 80b7 	bne.w	80028ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2110      	movs	r1, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fd76 	bl	800428c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	e046      	b.n	8002834 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b2:	461a      	mov	r2, r3
 80027b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	0151      	lsls	r1, r2, #5
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	440a      	add	r2, r1
 80027d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e6:	461a      	mov	r2, r3
 80027e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	440a      	add	r2, r1
 8002804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800280c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	0151      	lsls	r1, r2, #5
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	440a      	add	r2, r1
 8002824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800282c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	3301      	adds	r3, #1
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	429a      	cmp	r2, r3
 800283c:	d3b3      	bcc.n	80027a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002850:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f043 030b 	orr.w	r3, r3, #11
 800286e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002880:	f043 030b 	orr.w	r3, r3, #11
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	e015      	b.n	80028b4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800289a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800289e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ae:	f043 030b 	orr.w	r3, r3, #11
 80028b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028d8:	461a      	mov	r2, r3
 80028da:	f002 fdbd 	bl	8005458 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fcec 	bl	80052d0 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002902:	d124      	bne.n	800294e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fd82 	bl	8005412 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f001 fd37 	bl	8004386 <USB_GetDevSpeed>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	f001 f9d0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8002928:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	4620      	mov	r0, r4
 8002934:	f001 fa36 	bl	8003da4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f004 ff04 	bl	8007746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fcbc 	bl	80052d0 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d10a      	bne.n	8002978 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f004 fee1 	bl	800772a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f002 0208 	and.w	r2, r2, #8
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fca7 	bl	80052d0 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d122      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002998:	2301      	movs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e014      	b.n	80029c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fb0f 	bl	8002fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3e5      	bcc.n	800299e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fc7a 	bl	80052d0 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e6:	d13b      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e8:	2301      	movs	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e02b      	b.n	8002a46 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3340      	adds	r3, #64	; 0x40
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d115      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da12      	bge.n	8002a40 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	333f      	adds	r3, #63	; 0x3f
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fad0 	bl	8002fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3ce      	bcc.n	80029ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 fc33 	bl	80052d0 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a74:	d155      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e045      	b.n	8002b08 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d12e      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aa4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da2b      	bge.n	8002b02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ab6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d121      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6053      	str	r3, [r2, #4]
            break;
 8002b00:	e007      	b.n	8002b12 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d3b4      	bcc.n	8002a7c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 fbd2 	bl	80052d0 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d10a      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f004 fe7b 	bl	8007834 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fbbc 	bl	80052d0 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d115      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f004 fe6b 	bl	8007850 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e000      	b.n	8002b8e <HAL_PCD_IRQHandler+0x938>
      return;
 8002b8c:	bf00      	nop
    }
  }
}
 8002b8e:	3734      	adds	r7, #52	; 0x34
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_PCD_SetAddress+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e013      	b.n	8002bd6 <HAL_PCD_SetAddress+0x42>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fb1a 	bl	8005200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	4608      	mov	r0, r1
 8002be8:	4611      	mov	r1, r2
 8002bea:	461a      	mov	r2, r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	70fb      	strb	r3, [r7, #3]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	803b      	strh	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da0f      	bge.n	8002c24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3338      	adds	r3, #56	; 0x38
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	705a      	strb	r2, [r3, #1]
 8002c22:	e00f      	b.n	8002c44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	f003 020f 	and.w	r2, r3, #15
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c50:	883a      	ldrh	r2, [r7, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	78ba      	ldrb	r2, [r7, #2]
 8002c5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c6e:	78bb      	ldrb	r3, [r7, #2]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d102      	bne.n	8002c7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_PCD_EP_Open+0xaa>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e00e      	b.n	8002ca6 <HAL_PCD_EP_Open+0xc8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fb9a 	bl	80043d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	da0f      	bge.n	8002ce2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	3338      	adds	r3, #56	; 0x38
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	705a      	strb	r2, [r3, #1]
 8002ce0:	e00f      	b.n	8002d02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_PCD_EP_Close+0x6e>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e00e      	b.n	8002d3a <HAL_PCD_EP_Close+0x8c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68f9      	ldr	r1, [r7, #12]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fbd8 	bl	80044e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	3304      	adds	r3, #4
 8002d6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	f001 feb7 	bl	8004b28 <USB_EP0StartXfer>
 8002dba:	e008      	b.n	8002dce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6979      	ldr	r1, [r7, #20]
 8002dca:	f001 fc65 	bl	8004698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	460b      	mov	r3, r1
 8002de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	3338      	adds	r3, #56	; 0x38
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6979      	ldr	r1, [r7, #20]
 8002e4a:	f001 fe6d 	bl	8004b28 <USB_EP0StartXfer>
 8002e4e:	e008      	b.n	8002e62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6979      	ldr	r1, [r7, #20]
 8002e5e:	f001 fc1b 	bl	8004698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d901      	bls.n	8002e8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e050      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da0f      	bge.n	8002eb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	705a      	strb	r2, [r3, #1]
 8002eb0:	e00d      	b.n	8002ece <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_PCD_EP_SetStall+0x82>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e01e      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xc0>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 f8ab 	bl	8005058 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	b2d9      	uxtb	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f002 fa9b 	bl	8005458 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d901      	bls.n	8002f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e042      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0f      	bge.n	8002f7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	3338      	adds	r3, #56	; 0x38
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00f      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_EP_ClrStall+0x86>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e00e      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 f8b3 	bl	8005134 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da0c      	bge.n	800300e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	3338      	adds	r3, #56	; 0x38
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e00c      	b.n	8003028 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fed2 	bl	8004dd8 <USB_EPStopXfer>
 8003034:	4603      	mov	r3, r0
 8003036:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003038:	7afb      	ldrb	r3, [r7, #11]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b08a      	sub	sp, #40	; 0x28
 8003046:	af02      	add	r7, sp, #8
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3338      	adds	r3, #56	; 0x38
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d901      	bls.n	800307a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06c      	b.n	8003154 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	429a      	cmp	r2, r3
 800308e:	d902      	bls.n	8003096 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3303      	adds	r3, #3
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309e:	e02b      	b.n	80030f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d902      	bls.n	80030bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3303      	adds	r3, #3
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6919      	ldr	r1, [r3, #16]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f001 ff26 	bl	8004f2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	b29b      	uxth	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	429a      	cmp	r2, r3
 800310c:	d809      	bhi.n	8003122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003116:	429a      	cmp	r2, r3
 8003118:	d203      	bcs.n	8003122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1be      	bne.n	80030a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	429a      	cmp	r2, r3
 800312c:	d811      	bhi.n	8003152 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	2201      	movs	r2, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	43db      	mvns	r3, r3
 8003148:	6939      	ldr	r1, [r7, #16]
 800314a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800314e:	4013      	ands	r3, r2
 8003150:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	333c      	adds	r3, #60	; 0x3c
 8003174:	3304      	adds	r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d17b      	bne.n	800328a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4a61      	ldr	r2, [pc, #388]	; (8003324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f240 80b9 	bls.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80b3 	beq.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c4:	6093      	str	r3, [r2, #8]
 80031c6:	e0a7      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	2320      	movs	r3, #32
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	e098      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8093 	bne.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d90f      	bls.n	800321a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	e07e      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	440b      	add	r3, r1
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d114      	bne.n	800327c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003264:	461a      	mov	r2, r3
 8003266:	2101      	movs	r1, #1
 8003268:	f002 f8f6 	bl	8005458 <USB_EP0_OutStart>
 800326c:	e006      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f004 fa1c 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
 8003288:	e046      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d124      	bne.n	80032dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	e032      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	2320      	movs	r3, #32
 80032cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f004 f9f3 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
 80032da:	e01d      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d114      	bne.n	800330c <PCD_EP_OutXfrComplete_int+0x1b0>
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003304:	461a      	mov	r2, r3
 8003306:	2100      	movs	r1, #0
 8003308:	f002 f8a6 	bl	8005458 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f004 f9d4 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	4f54300a 	.word	0x4f54300a
 8003328:	4f54310a 	.word	0x4f54310a

0800332c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	333c      	adds	r3, #60	; 0x3c
 8003344:	3304      	adds	r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d90e      	bls.n	8003380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f004 f98b 	bl	800769c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d90c      	bls.n	80033a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d108      	bne.n	80033a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033a0:	461a      	mov	r2, r3
 80033a2:	2101      	movs	r1, #1
 80033a4:	f002 f858 	bl	8005458 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	4f54300a 	.word	0x4f54300a

080033b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
 80033c4:	4613      	mov	r3, r2
 80033c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033d6:	883b      	ldrh	r3, [r7, #0]
 80033d8:	0419      	lsls	r1, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
 80033e4:	e028      	b.n	8003438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e00d      	b.n	8003416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	3340      	adds	r3, #64	; 0x40
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4413      	add	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	3301      	adds	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	3b01      	subs	r3, #1
 800341c:	429a      	cmp	r2, r3
 800341e:	d3ec      	bcc.n	80033fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003420:	883b      	ldrh	r3, [r7, #0]
 8003422:	0418      	lsls	r0, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	3b01      	subs	r3, #1
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4302      	orrs	r2, r0
 8003430:	3340      	adds	r3, #64	; 0x40
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e267      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d157      	bne.n	8003588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e242      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x74>
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x98>
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6f      	ldr	r2, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6c      	ldr	r2, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 8003518:	4b69      	ldr	r3, [pc, #420]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a68      	ldr	r2, [pc, #416]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fd fe54 	bl	80011e4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003540:	f7fd fe50 	bl	80011e4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e207      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b5b      	ldr	r3, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xc0>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fd fe40 	bl	80011e4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7fd fe3c 	bl	80011e4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1f3      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d063      	beq.n	800365e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003596:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d11c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e1c7      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	e03a      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_OscConfig+0x244>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fdf5 	bl	80011e4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fd fdf1 	bl	80011e4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1a8      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_OscConfig+0x244>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd fdd4 	bl	80011e4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003640:	f7fd fdd0 	bl	80011e4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e187      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x248>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fdb4 	bl	80011e4 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd fdb0 	bl	80011e4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e167      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x200>
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x248>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fd fd9d 	bl	80011e4 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	e00e      	b.n	80036cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fd fd99 	bl	80011e4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d907      	bls.n	80036cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e150      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	42470000 	.word	0x42470000
 80036c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ea      	bne.n	80036ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8097 	beq.w	8003814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b7d      	ldr	r3, [pc, #500]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a7c      	ldr	r2, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b7a      	ldr	r3, [pc, #488]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b77      	ldr	r3, [pc, #476]	; (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b74      	ldr	r3, [pc, #464]	; (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a73      	ldr	r2, [pc, #460]	; (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fd fd59 	bl	80011e4 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fd fd55 	bl	80011e4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e10c      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCC_OscConfig+0x474>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x2ea>
 800375c:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a63      	ldr	r2, [pc, #396]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x324>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x30c>
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a5e      	ldr	r2, [pc, #376]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x324>
 800378c:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a57      	ldr	r2, [pc, #348]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	4b55      	ldr	r3, [pc, #340]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fd fd1a 	bl	80011e4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fd16 	bl	80011e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0cb      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RCC_OscConfig+0x334>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fd fd04 	bl	80011e4 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fd fd00 	bl	80011e4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0b5      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ee      	bne.n	80037e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	4a38      	ldr	r2, [pc, #224]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a1 	beq.w	8003960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381e:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	d05c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d141      	bne.n	80038b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <HAL_RCC_OscConfig+0x478>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fcd4 	bl	80011e4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd fcd0 	bl	80011e4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e087      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	491b      	ldr	r1, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x478>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fd fca9 	bl	80011e4 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003896:	f7fd fca5 	bl	80011e4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e05c      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x416>
 80038b4:	e054      	b.n	8003960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_RCC_OscConfig+0x478>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fd fc92 	bl	80011e4 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fc8e 	bl	80011e4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e045      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x444>
 80038e2:	e03d      	b.n	8003960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e038      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x4ec>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d028      	beq.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d121      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d11a      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	3b01      	subs	r3, #1
 8003946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0cc      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d90c      	bls.n	80039ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d044      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e067      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4934      	ldr	r1, [pc, #208]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fbc0 	bl	80011e4 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fd fbbc 	bl	80011e4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e04f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d20c      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fb20 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023c00 	.word	0x40023c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08007cb4 	.word	0x08007cb4
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b090      	sub	sp, #64	; 0x40
 8003b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
 8003b48:	2300      	movs	r3, #0
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d00d      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	f200 80a1 	bhi.w	8003ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x34>
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b6e:	e09b      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b74:	e09b      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b76:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b7a:	e098      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b86:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d028      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	2200      	movs	r2, #0
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba8:	fb03 f201 	mul.w	r2, r3, r1
 8003bac:	2300      	movs	r3, #0
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4a43      	ldr	r2, [pc, #268]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc2:	4413      	add	r3, r2
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	2200      	movs	r2, #0
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bd6:	f7fc faff 	bl	80001d8 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4613      	mov	r3, r2
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be2:	e053      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be4:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	2200      	movs	r2, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	617a      	str	r2, [r7, #20]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bf6:	f04f 0b00 	mov.w	fp, #0
 8003bfa:	4652      	mov	r2, sl
 8003bfc:	465b      	mov	r3, fp
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	0159      	lsls	r1, r3, #5
 8003c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0c:	0150      	lsls	r0, r2, #5
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	ebb2 080a 	subs.w	r8, r2, sl
 8003c16:	eb63 090b 	sbc.w	r9, r3, fp
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c32:	eb63 0509 	sbc.w	r5, r3, r9
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	00eb      	lsls	r3, r5, #3
 8003c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c44:	00e2      	lsls	r2, r4, #3
 8003c46:	4614      	mov	r4, r2
 8003c48:	461d      	mov	r5, r3
 8003c4a:	eb14 030a 	adds.w	r3, r4, sl
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	eb45 030b 	adc.w	r3, r5, fp
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c62:	4629      	mov	r1, r5
 8003c64:	028b      	lsls	r3, r1, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	028a      	lsls	r2, r1, #10
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	2200      	movs	r2, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	60fa      	str	r2, [r7, #12]
 8003c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c80:	f7fc faaa 	bl	80001d8 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ca6:	e002      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3740      	adds	r7, #64	; 0x40
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	017d7840 	.word	0x017d7840

08003cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000

08003ce0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	f107 001c 	add.w	r0, r7, #28
 8003cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d122      	bne.n	8003d3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f001 fbee 	bl	8005514 <USB_CoreReset>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e01a      	b.n	8003d74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f001 fbe2 	bl	8005514 <USB_CoreReset>
 8003d50:	4603      	mov	r3, r0
 8003d52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
 8003d66:	e005      	b.n	8003d74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d10b      	bne.n	8003d92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f043 0206 	orr.w	r2, r3, #6
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d9e:	b004      	add	sp, #16
 8003da0:	4770      	bx	lr
	...

08003da4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d165      	bne.n	8003e84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a41      	ldr	r2, [pc, #260]	; (8003ec0 <USB_SetTurnaroundTime+0x11c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d906      	bls.n	8003dce <USB_SetTurnaroundTime+0x2a>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4a40      	ldr	r2, [pc, #256]	; (8003ec4 <USB_SetTurnaroundTime+0x120>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d202      	bcs.n	8003dce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003dc8:	230f      	movs	r3, #15
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e062      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <USB_SetTurnaroundTime+0x120>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d306      	bcc.n	8003de4 <USB_SetTurnaroundTime+0x40>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <USB_SetTurnaroundTime+0x124>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d202      	bcs.n	8003de4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003dde:	230e      	movs	r3, #14
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e057      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <USB_SetTurnaroundTime+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d306      	bcc.n	8003dfa <USB_SetTurnaroundTime+0x56>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4a37      	ldr	r2, [pc, #220]	; (8003ecc <USB_SetTurnaroundTime+0x128>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d202      	bcs.n	8003dfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003df4:	230d      	movs	r3, #13
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e04c      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4a33      	ldr	r2, [pc, #204]	; (8003ecc <USB_SetTurnaroundTime+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d306      	bcc.n	8003e10 <USB_SetTurnaroundTime+0x6c>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4a32      	ldr	r2, [pc, #200]	; (8003ed0 <USB_SetTurnaroundTime+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d802      	bhi.n	8003e10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e041      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <USB_SetTurnaroundTime+0x12c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d906      	bls.n	8003e26 <USB_SetTurnaroundTime+0x82>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ed4 <USB_SetTurnaroundTime+0x130>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d802      	bhi.n	8003e26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e20:	230b      	movs	r3, #11
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e036      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <USB_SetTurnaroundTime+0x130>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d906      	bls.n	8003e3c <USB_SetTurnaroundTime+0x98>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <USB_SetTurnaroundTime+0x134>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d802      	bhi.n	8003e3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e36:	230a      	movs	r3, #10
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e02b      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <USB_SetTurnaroundTime+0x134>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d906      	bls.n	8003e52 <USB_SetTurnaroundTime+0xae>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <USB_SetTurnaroundTime+0x138>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d202      	bcs.n	8003e52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e4c:	2309      	movs	r3, #9
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e020      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4a21      	ldr	r2, [pc, #132]	; (8003edc <USB_SetTurnaroundTime+0x138>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d306      	bcc.n	8003e68 <USB_SetTurnaroundTime+0xc4>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <USB_SetTurnaroundTime+0x13c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d802      	bhi.n	8003e68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e62:	2308      	movs	r3, #8
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e015      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <USB_SetTurnaroundTime+0x13c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d906      	bls.n	8003e7e <USB_SetTurnaroundTime+0xda>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <USB_SetTurnaroundTime+0x140>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d202      	bcs.n	8003e7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e78:	2307      	movs	r3, #7
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e00a      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e7e:	2306      	movs	r3, #6
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e007      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e8a:	2309      	movs	r3, #9
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e001      	b.n	8003e94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e90:	2309      	movs	r3, #9
 8003e92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	029b      	lsls	r3, r3, #10
 8003ea8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	00d8acbf 	.word	0x00d8acbf
 8003ec4:	00e4e1c0 	.word	0x00e4e1c0
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	01067380 	.word	0x01067380
 8003ed0:	011a499f 	.word	0x011a499f
 8003ed4:	01312cff 	.word	0x01312cff
 8003ed8:	014ca43f 	.word	0x014ca43f
 8003edc:	016e3600 	.word	0x016e3600
 8003ee0:	01a6ab1f 	.word	0x01a6ab1f
 8003ee4:	01e84800 	.word	0x01e84800

08003ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d115      	bne.n	8003f7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fd f94e 	bl	80011fc <HAL_Delay>
      ms++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 fa45 	bl	80053f6 <USB_GetMode>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d01e      	beq.n	8003fb0 <USB_SetCurrentMode+0x84>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b31      	cmp	r3, #49	; 0x31
 8003f76:	d9f0      	bls.n	8003f5a <USB_SetCurrentMode+0x2e>
 8003f78:	e01a      	b.n	8003fb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fd f935 	bl	80011fc <HAL_Delay>
      ms++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f001 fa2c 	bl	80053f6 <USB_GetMode>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <USB_SetCurrentMode+0x84>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b31      	cmp	r3, #49	; 0x31
 8003fa8:	d9f0      	bls.n	8003f8c <USB_SetCurrentMode+0x60>
 8003faa:	e001      	b.n	8003fb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e005      	b.n	8003fbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b32      	cmp	r3, #50	; 0x32
 8003fb4:	d101      	bne.n	8003fba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e009      	b.n	8003ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3340      	adds	r3, #64	; 0x40
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b0e      	cmp	r3, #14
 8003ffc:	d9f2      	bls.n	8003fe4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11c      	bne.n	800403e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
 800403c:	e00b      	b.n	8004056 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	4619      	mov	r1, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	461a      	mov	r2, r3
 8004072:	680b      	ldr	r3, [r1, #0]
 8004074:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10c      	bne.n	8004096 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004082:	2100      	movs	r1, #0
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f965 	bl	8004354 <USB_SetDevSpeed>
 800408a:	e008      	b.n	800409e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800408c:	2101      	movs	r1, #1
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f960 	bl	8004354 <USB_SetDevSpeed>
 8004094:	e003      	b.n	800409e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004096:	2103      	movs	r1, #3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f95b 	bl	8004354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800409e:	2110      	movs	r1, #16
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8f3 	bl	800428c <USB_FlushTxFifo>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f91f 	bl	80042f4 <USB_FlushRxFifo>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	461a      	mov	r2, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e043      	b.n	8004172 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004100:	d118      	bne.n	8004134 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	461a      	mov	r2, r3
 8004116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	e013      	b.n	8004146 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	461a      	mov	r2, r3
 800412c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e008      	b.n	8004146 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	461a      	mov	r2, r3
 8004166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800416a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3301      	adds	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d3b7      	bcc.n	80040ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e043      	b.n	8004208 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004196:	d118      	bne.n	80041ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e013      	b.n	80041dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e008      	b.n	80041dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	461a      	mov	r2, r3
 80041fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3b7      	bcc.n	8004180 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004222:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004230:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <USB_DevInit+0x2c4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f043 0208 	orr.w	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004284:	b004      	add	sp, #16
 8004286:	4770      	bx	lr
 8004288:	803c3800 	.word	0x803c3800

0800428c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <USB_FlushTxFifo+0x64>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e01b      	b.n	80042e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	daf2      	bge.n	800429a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	019b      	lsls	r3, r3, #6
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <USB_FlushTxFifo+0x64>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e006      	b.n	80042e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d0f0      	beq.n	80042c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	00030d40 	.word	0x00030d40

080042f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <USB_FlushRxFifo+0x5c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e018      	b.n	8004344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	daf2      	bge.n	8004300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2210      	movs	r2, #16
 8004322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a08      	ldr	r2, [pc, #32]	; (8004350 <USB_FlushRxFifo+0x5c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e006      	b.n	8004344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d0f0      	beq.n	8004324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	00030d40 	.word	0x00030d40

08004354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0306 	and.w	r3, r3, #6
 800439e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
 80043aa:	e00a      	b.n	80043c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d002      	beq.n	80043b8 <USB_GetDevSpeed+0x32>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d102      	bne.n	80043be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043b8:	2302      	movs	r3, #2
 80043ba:	75fb      	strb	r3, [r7, #23]
 80043bc:	e001      	b.n	80043c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043be:	230f      	movs	r3, #15
 80043c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d13a      	bne.n	8004462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	b29b      	uxth	r3, r3
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440a:	4313      	orrs	r3, r2
 800440c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d155      	bne.n	80044d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004448:	4313      	orrs	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e036      	b.n	80044d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11a      	bne.n	80044d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	791b      	ldrb	r3, [r3, #4]
 80044b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044b6:	430b      	orrs	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d161      	bne.n	80045c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004512:	d11f      	bne.n	8004554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	2101      	movs	r1, #1
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004574:	4013      	ands	r3, r2
 8004576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	b29b      	uxth	r3, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004598:	4013      	ands	r3, r2
 800459a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	0159      	lsls	r1, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	4619      	mov	r1, r3
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <USB_DeactivateEndpoint+0x1b0>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]
 80045be:	e060      	b.n	8004682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d11f      	bne.n	8004618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	43db      	mvns	r3, r3
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004638:	4013      	ands	r3, r2
 800463a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	43db      	mvns	r3, r3
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4013      	ands	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	440b      	add	r3, r1
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	4619      	mov	r1, r3
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <USB_DeactivateEndpoint+0x1b4>)
 800467e:	4013      	ands	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	ec337800 	.word	0xec337800
 8004694:	eff37800 	.word	0xeff37800

08004698 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 815c 	bne.w	8004972 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d132      	bne.n	8004728 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004720:	0cdb      	lsrs	r3, r3, #19
 8004722:	04db      	lsls	r3, r3, #19
 8004724:	6113      	str	r3, [r2, #16]
 8004726:	e074      	b.n	8004812 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004742:	0cdb      	lsrs	r3, r3, #19
 8004744:	04db      	lsls	r3, r3, #19
 8004746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800476a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	440b      	add	r3, r1
 8004784:	1e59      	subs	r1, r3, #1
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	fbb1 f3f3 	udiv	r3, r1, r3
 800478e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004790:	4b9d      	ldr	r3, [pc, #628]	; (8004a08 <USB_EPStartXfer+0x370>)
 8004792:	400b      	ands	r3, r1
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	0148      	lsls	r0, r1, #5
 8004798:	69f9      	ldr	r1, [r7, #28]
 800479a:	4401      	add	r1, r0
 800479c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047a0:	4313      	orrs	r3, r2
 80047a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	0148      	lsls	r0, r1, #5
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	4401      	add	r1, r0
 80047c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047c6:	4313      	orrs	r3, r2
 80047c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	791b      	ldrb	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d11f      	bne.n	8004812 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004810:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d14b      	bne.n	80048b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d128      	bne.n	800488e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d110      	bne.n	800486e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e00f      	b.n	800488e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	0151      	lsls	r1, r2, #5
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	440a      	add	r2, r1
 8004884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e133      	b.n	8004b18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	791b      	ldrb	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d015      	beq.n	8004904 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 811b 	beq.w	8004b18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	69f9      	ldr	r1, [r7, #28]
 80048fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048fe:	4313      	orrs	r3, r2
 8004900:	634b      	str	r3, [r1, #52]	; 0x34
 8004902:	e109      	b.n	8004b18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d110      	bne.n	8004936 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e00f      	b.n	8004956 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	b298      	uxth	r0, r3
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	4603      	mov	r3, r0
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fade 	bl	8004f2c <USB_WritePacket>
 8004970:	e0d2      	b.n	8004b18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498c:	0cdb      	lsrs	r3, r3, #19
 800498e:	04db      	lsls	r3, r3, #19
 8004990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d126      	bne.n	8004a0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	0148      	lsls	r0, r1, #5
 80049d8:	69f9      	ldr	r1, [r7, #28]
 80049da:	4401      	add	r1, r0
 80049dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a02:	6113      	str	r3, [r2, #16]
 8004a04:	e03a      	b.n	8004a7c <USB_EPStartXfer+0x3e4>
 8004a06:	bf00      	nop
 8004a08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	1e5a      	subs	r2, r3, #1
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	8afa      	ldrh	r2, [r7, #22]
 8004a28:	fb03 f202 	mul.w	r2, r3, r2
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	8afb      	ldrh	r3, [r7, #22]
 8004a40:	04d9      	lsls	r1, r3, #19
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <USB_EPStartXfer+0x48c>)
 8004a44:	400b      	ands	r3, r1
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	0148      	lsls	r0, r1, #5
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	4401      	add	r1, r0
 8004a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	0148      	lsls	r0, r1, #5
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	4401      	add	r1, r0
 8004a74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10d      	bne.n	8004a9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6919      	ldr	r1, [r3, #16]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d128      	bne.n	8004af8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d110      	bne.n	8004ad8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00f      	b.n	8004af8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	1ff80000 	.word	0x1ff80000

08004b28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	f040 80ce 	bne.w	8004ce6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d132      	bne.n	8004bb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	0cdb      	lsrs	r3, r3, #19
 8004bb2:	04db      	lsls	r3, r3, #19
 8004bb4:	6113      	str	r3, [r2, #16]
 8004bb6:	e04e      	b.n	8004c56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	0cdb      	lsrs	r3, r3, #19
 8004bd4:	04db      	lsls	r3, r3, #19
 8004bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d903      	bls.n	8004c10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	0148      	lsls	r0, r1, #5
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	4401      	add	r1, r0
 8004c4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c52:	4313      	orrs	r3, r2
 8004c54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d11e      	bne.n	8004c9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e097      	b.n	8004dca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8083 	beq.w	8004dca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	6979      	ldr	r1, [r7, #20]
 8004cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ce4:	e071      	b.n	8004dca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d00:	0cdb      	lsrs	r3, r3, #19
 8004d02:	04db      	lsls	r3, r3, #19
 8004d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d78:	6939      	ldr	r1, [r7, #16]
 8004d7a:	0148      	lsls	r0, r1, #5
 8004d7c:	6979      	ldr	r1, [r7, #20]
 8004d7e:	4401      	add	r1, r0
 8004d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d84:	4313      	orrs	r3, r2
 8004d86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6919      	ldr	r1, [r3, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	460a      	mov	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d14a      	bne.n	8004e8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0e:	f040 8086 	bne.w	8004f1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d902      	bls.n	8004e70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e6e:	e056      	b.n	8004f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e88:	d0e7      	beq.n	8004e5a <USB_EPStopXfer+0x82>
 8004e8a:	e048      	b.n	8004f1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea4:	d13b      	bne.n	8004f1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ec8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d902      	bls.n	8004f04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
          break;
 8004f02:	e00c      	b.n	8004f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1c:	d0e7      	beq.n	8004eee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d123      	bne.n	8004f9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	3303      	adds	r3, #3
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e018      	b.n	8004f92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	031a      	lsls	r2, r3, #12
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3301      	adds	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e2      	bcc.n	8004f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3724      	adds	r7, #36	; 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b08b      	sub	sp, #44	; 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e014      	b.n	8004ffe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	3301      	adds	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	429a      	cmp	r2, r3
 8005004:	d3e6      	bcc.n	8004fd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005006:	8bfb      	ldrh	r3, [r7, #30]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005016:	461a      	mov	r2, r3
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	b2da      	uxtb	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	701a      	strb	r2, [r3, #0]
      i++;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	3301      	adds	r3, #1
 8005036:	623b      	str	r3, [r7, #32]
      pDest++;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	3b01      	subs	r3, #1
 8005042:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005044:	8bfb      	ldrh	r3, [r7, #30]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ea      	bne.n	8005020 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800504c:	4618      	mov	r0, r3
 800504e:	372c      	adds	r7, #44	; 0x2c
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d12c      	bne.n	80050ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	db12      	blt.n	80050ac <USB_EPSetStall+0x54>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e02b      	b.n	8005126 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db12      	blt.n	8005106 <USB_EPSetStall+0xae>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00f      	beq.n	8005106 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005104:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005124:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d128      	bne.n	80051a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800516e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d003      	beq.n	8005180 <USB_EPClearStall+0x4c>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	791b      	ldrb	r3, [r3, #4]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d138      	bne.n	80051f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e027      	b.n	80051f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	791b      	ldrb	r3, [r3, #4]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d003      	beq.n	80051d2 <USB_EPClearStall+0x9e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d10f      	bne.n	80051f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005222:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527a:	f023 0302 	bic.w	r3, r3, #2
 800527e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052a8:	f023 0303 	bic.w	r3, r3, #3
 80052ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	0c1b      	lsrs	r3, r3, #16
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	b29b      	uxth	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800538c:	68bb      	ldr	r3, [r7, #8]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0301 	and.w	r3, r3, #1
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005430:	f023 0307 	bic.w	r3, r3, #7
 8005434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	460b      	mov	r3, r1
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	333c      	adds	r3, #60	; 0x3c
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4a26      	ldr	r2, [pc, #152]	; (8005510 <USB_EP0_OutStart+0xb8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d90a      	bls.n	8005492 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d101      	bne.n	8005492 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e037      	b.n	8005502 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	f043 0318 	orr.w	r3, r3, #24
 80054c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10f      	bne.n	8005500 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	4f54300a 	.word	0x4f54300a

08005514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <USB_CoreReset+0x64>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e01b      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	daf2      	bge.n	8005520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <USB_CoreReset+0x64>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d0f0      	beq.n	800554a <USB_CoreReset+0x36>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	00030d40 	.word	0x00030d40

0800557c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005588:	2054      	movs	r0, #84	; 0x54
 800558a:	f002 fae7 	bl	8007b5c <USBD_static_malloc>
 800558e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	32b0      	adds	r2, #176	; 0xb0
 80055a0:	2100      	movs	r1, #0
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055a6:	2302      	movs	r3, #2
 80055a8:	e08b      	b.n	80056c2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	32b0      	adds	r2, #176	; 0xb0
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	32b0      	adds	r2, #176	; 0xb0
 80055c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7c1b      	ldrb	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11b      	bne.n	800560e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <USBD_CUSTOM_HID_Init+0x150>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3326      	adds	r3, #38	; 0x26
 80055ec:	2205      	movs	r2, #5
 80055ee:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80055f0:	4b37      	ldr	r3, [pc, #220]	; (80056d0 <USBD_CUSTOM_HID_Init+0x154>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 020f 	and.w	r2, r3, #15
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005608:	2205      	movs	r2, #5
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	e01a      	b.n	8005644 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800560e:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <USBD_CUSTOM_HID_Init+0x150>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3326      	adds	r3, #38	; 0x26
 8005624:	2201      	movs	r2, #1
 8005626:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005628:	4b29      	ldr	r3, [pc, #164]	; (80056d0 <USBD_CUSTOM_HID_Init+0x154>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005640:	2201      	movs	r2, #1
 8005642:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <USBD_CUSTOM_HID_Init+0x150>)
 8005646:	7819      	ldrb	r1, [r3, #0]
 8005648:	2302      	movs	r3, #2
 800564a:	2203      	movs	r2, #3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f002 f974 	bl	800793a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <USBD_CUSTOM_HID_Init+0x150>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f003 020f 	and.w	r2, r3, #15
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	2201      	movs	r2, #1
 800566a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <USBD_CUSTOM_HID_Init+0x154>)
 800566e:	7819      	ldrb	r1, [r3, #0]
 8005670:	2302      	movs	r3, #2
 8005672:	2203      	movs	r2, #3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f002 f960 	bl	800793a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <USBD_CUSTOM_HID_Init+0x154>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f003 020f 	and.w	r2, r3, #15
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005692:	2201      	movs	r2, #1
 8005694:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	33b0      	adds	r3, #176	; 0xb0
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <USBD_CUSTOM_HID_Init+0x154>)
 80056b4:	7819      	ldrb	r1, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f002 fa2c 	bl	8007b18 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000086 	.word	0x20000086
 80056d0:	20000087 	.word	0x20000087

080056d4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80056e0:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f002 f94d 	bl	8007986 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80056ec:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3324      	adds	r3, #36	; 0x24
 8005702:	2200      	movs	r2, #0
 8005704:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3326      	adds	r3, #38	; 0x26
 800571c:	2200      	movs	r2, #0
 800571e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f002 f92d 	bl	8007986 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005744:	2200      	movs	r2, #0
 8005746:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005760:	2200      	movs	r2, #0
 8005762:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	32b0      	adds	r2, #176	; 0xb0
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01f      	beq.n	80057b6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	33b0      	adds	r3, #176	; 0xb0
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	32b0      	adds	r2, #176	; 0xb0
 8005794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005798:	4618      	mov	r0, r3
 800579a:	f002 f9ed 	bl	8007b78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	32b0      	adds	r2, #176	; 0xb0
 80057a8:	2100      	movs	r1, #0
 80057aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000086 	.word	0x20000086
 80057c4:	20000087 	.word	0x20000087

080057c8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	32b0      	adds	r2, #176	; 0xb0
 80057dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e0f8      	b.n	80059ee <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005804:	2b00      	cmp	r3, #0
 8005806:	d056      	beq.n	80058b6 <USBD_CUSTOM_HID_Setup+0xee>
 8005808:	2b20      	cmp	r3, #32
 800580a:	f040 80e8 	bne.w	80059de <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	3b02      	subs	r3, #2
 8005814:	2b09      	cmp	r3, #9
 8005816:	d846      	bhi.n	80058a6 <USBD_CUSTOM_HID_Setup+0xde>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <USBD_CUSTOM_HID_Setup+0x58>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005879 	.word	0x08005879
 8005824:	08005857 	.word	0x08005857
 8005828:	080058a7 	.word	0x080058a7
 800582c:	080058a7 	.word	0x080058a7
 8005830:	080058a7 	.word	0x080058a7
 8005834:	080058a7 	.word	0x080058a7
 8005838:	080058a7 	.word	0x080058a7
 800583c:	08005889 	.word	0x08005889
 8005840:	08005867 	.word	0x08005867
 8005844:	08005849 	.word	0x08005849
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	885b      	ldrh	r3, [r3, #2]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8005854:	e02e      	b.n	80058b4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3340      	adds	r3, #64	; 0x40
 800585a:	2201      	movs	r2, #1
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 fcce 	bl	8007200 <USBD_CtlSendData>
          break;
 8005864:	e026      	b.n	80058b4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	885b      	ldrh	r3, [r3, #2]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	b29b      	uxth	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8005876:	e01d      	b.n	80058b4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3344      	adds	r3, #68	; 0x44
 800587c:	2201      	movs	r2, #1
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fcbd 	bl	8007200 <USBD_CtlSendData>
          break;
 8005886:	e015      	b.n	80058b4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2201      	movs	r2, #1
 800588c:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800588e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	88db      	ldrh	r3, [r3, #6]
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	bf28      	it	cs
 8005898:	2340      	movcs	r3, #64	; 0x40
 800589a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800589c:	461a      	mov	r2, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fcda 	bl	8007258 <USBD_CtlPrepareRx>
          break;
 80058a4:	e006      	b.n	80058b4 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fc38 	bl	800711e <USBD_CtlError>
          ret = USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	75fb      	strb	r3, [r7, #23]
          break;
 80058b2:	bf00      	nop
      }
      break;
 80058b4:	e09a      	b.n	80059ec <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b0b      	cmp	r3, #11
 80058bc:	f200 8086 	bhi.w	80059cc <USBD_CUSTOM_HID_Setup+0x204>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <USBD_CUSTOM_HID_Setup+0x100>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	080059db 	.word	0x080059db
 80058d0:	080059cd 	.word	0x080059cd
 80058d4:	080059cd 	.word	0x080059cd
 80058d8:	080059cd 	.word	0x080059cd
 80058dc:	080059cd 	.word	0x080059cd
 80058e0:	08005923 	.word	0x08005923
 80058e4:	080059cd 	.word	0x080059cd
 80058e8:	080059cd 	.word	0x080059cd
 80058ec:	080059cd 	.word	0x080059cd
 80058f0:	0800597b 	.word	0x0800597b
 80058f4:	080059a5 	.word	0x080059a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d107      	bne.n	8005914 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005904:	f107 030e 	add.w	r3, r7, #14
 8005908:	2202      	movs	r2, #2
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fc77 	bl	8007200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005912:	e063      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fc01 	bl	800711e <USBD_CtlError>
            ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
          break;
 8005920:	e05c      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	885b      	ldrh	r3, [r3, #2]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b22      	cmp	r3, #34	; 0x22
 800592c:	d110      	bne.n	8005950 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	88db      	ldrh	r3, [r3, #6]
 8005932:	2b47      	cmp	r3, #71	; 0x47
 8005934:	bf28      	it	cs
 8005936:	2347      	movcs	r3, #71	; 0x47
 8005938:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	33b0      	adds	r3, #176	; 0xb0
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e00d      	b.n	800596c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	885b      	ldrh	r3, [r3, #2]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b21      	cmp	r3, #33	; 0x21
 800595a:	d107      	bne.n	800596c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800595c:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <USBD_CUSTOM_HID_Setup+0x230>)
 800595e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	88db      	ldrh	r3, [r3, #6]
 8005964:	2b09      	cmp	r3, #9
 8005966:	bf28      	it	cs
 8005968:	2309      	movcs	r3, #9
 800596a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800596c:	8bfb      	ldrh	r3, [r7, #30]
 800596e:	461a      	mov	r2, r3
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fc44 	bl	8007200 <USBD_CtlSendData>
          break;
 8005978:	e030      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3348      	adds	r3, #72	; 0x48
 800598a:	2201      	movs	r2, #1
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fc36 	bl	8007200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005994:	e022      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fbc0 	bl	800711e <USBD_CtlError>
            ret = USBD_FAIL;
 800599e:	2303      	movs	r3, #3
 80059a0:	75fb      	strb	r3, [r7, #23]
          break;
 80059a2:	e01b      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d106      	bne.n	80059be <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	885b      	ldrh	r3, [r3, #2]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059bc:	e00e      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fbac 	bl	800711e <USBD_CtlError>
            ret = USBD_FAIL;
 80059c6:	2303      	movs	r3, #3
 80059c8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ca:	e007      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fba5 	bl	800711e <USBD_CtlError>
          ret = USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	75fb      	strb	r3, [r7, #23]
          break;
 80059d8:	e000      	b.n	80059dc <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80059da:	bf00      	nop
      }
      break;
 80059dc:	e006      	b.n	80059ec <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fb9c 	bl	800711e <USBD_CtlError>
      ret = USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	bf00      	nop
  }
  return (uint8_t)ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000070 	.word	0x20000070

080059fc <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	32b0      	adds	r2, #176	; 0xb0
 8005a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e021      	b.n	8005a64 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	32b0      	adds	r2, #176	; 0xb0
 8005a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d112      	bne.n	8005a62 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <USBD_CUSTOM_HID_SendReport+0x70>)
 8005a50:	7819      	ldrb	r1, [r3, #0]
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f002 f83d 	bl	8007ad6 <USBD_LL_Transmit>
 8005a5c:	e001      	b.n	8005a62 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000086 	.word	0x20000086

08005a70 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005a78:	2181      	movs	r1, #129	; 0x81
 8005a7a:	4815      	ldr	r0, [pc, #84]	; (8005ad0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005a7c:	f000 fd17 	bl	80064ae <USBD_GetEpDesc>
 8005a80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005a82:	2101      	movs	r1, #1
 8005a84:	4812      	ldr	r0, [pc, #72]	; (8005ad0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005a86:	f000 fd12 	bl	80064ae <USBD_GetEpDesc>
 8005a8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f042 0202 	orr.w	r2, r2, #2
 8005a9a:	711a      	strb	r2, [r3, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f042 0202 	orr.w	r2, r2, #2
 8005ab4:	711a      	strb	r2, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2201      	movs	r2, #1
 8005abe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2229      	movs	r2, #41	; 0x29
 8005ac4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005ac6:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000044 	.word	0x20000044

08005ad4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005adc:	2181      	movs	r1, #129	; 0x81
 8005ade:	4815      	ldr	r0, [pc, #84]	; (8005b34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005ae0:	f000 fce5 	bl	80064ae <USBD_GetEpDesc>
 8005ae4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4812      	ldr	r0, [pc, #72]	; (8005b34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005aea:	f000 fce0 	bl	80064ae <USBD_GetEpDesc>
 8005aee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f042 0202 	orr.w	r2, r2, #2
 8005afe:	711a      	strb	r2, [r3, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2205      	movs	r2, #5
 8005b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f042 0202 	orr.w	r2, r2, #2
 8005b18:	711a      	strb	r2, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2205      	movs	r2, #5
 8005b22:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2229      	movs	r2, #41	; 0x29
 8005b28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005b2a:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000044 	.word	0x20000044

08005b38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005b40:	2181      	movs	r1, #129	; 0x81
 8005b42:	4815      	ldr	r0, [pc, #84]	; (8005b98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005b44:	f000 fcb3 	bl	80064ae <USBD_GetEpDesc>
 8005b48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4812      	ldr	r0, [pc, #72]	; (8005b98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005b4e:	f000 fcae 	bl	80064ae <USBD_GetEpDesc>
 8005b52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f042 0202 	orr.w	r2, r2, #2
 8005b62:	711a      	strb	r2, [r3, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f042 0202 	orr.w	r2, r2, #2
 8005b7c:	711a      	strb	r2, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2201      	movs	r2, #1
 8005b86:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2229      	movs	r2, #41	; 0x29
 8005b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005b8e:	4b02      	ldr	r3, [pc, #8]	; (8005b98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000044 	.word	0x20000044

08005b9c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32b0      	adds	r2, #176	; 0xb0
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	32b0      	adds	r2, #176	; 0xb0
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e017      	b.n	8005c1c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	32b0      	adds	r2, #176	; 0xb0
 8005bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	33b0      	adds	r3, #176	; 0xb0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	7810      	ldrb	r0, [r2, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	7852      	ldrb	r2, [r2, #1]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	32b0      	adds	r2, #176	; 0xb0
 8005c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e00f      	b.n	8005c62 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	32b0      	adds	r2, #176	; 0xb0
 8005c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005c54:	7819      	ldrb	r1, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 ff5c 	bl	8007b18 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000087 	.word	0x20000087

08005c70 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32b0      	adds	r2, #176	; 0xb0
 8005c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c86:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e016      	b.n	8005cc0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d111      	bne.n	8005cbe <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	33b0      	adds	r3, #176	; 0xb0
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	7810      	ldrb	r0, [r2, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	7852      	ldrb	r2, [r2, #1]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005cd6:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	2000007c 	.word	0x2000007c

08005ce8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e009      	b.n	8005d10 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	33b0      	adds	r3, #176	; 0xb0
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e01f      	b.n	8005d74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f001 fd7f 	bl	800786c <USBD_LL_Init>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e025      	b.n	8005de0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32ae      	adds	r2, #174	; 0xae
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00f      	beq.n	8005dd0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32ae      	adds	r2, #174	; 0xae
 8005dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	f107 020e 	add.w	r2, r7, #14
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
 8005dc8:	4602      	mov	r2, r0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fd87 	bl	8007904 <USBD_LL_Start>
 8005df6:	4603      	mov	r3, r0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	4611      	mov	r1, r2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f908 	bl	80070aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d01a      	beq.n	8005ef4 <USBD_LL_SetupStage+0x72>
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d822      	bhi.n	8005f08 <USBD_LL_SetupStage+0x86>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <USBD_LL_SetupStage+0x4a>
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d00a      	beq.n	8005ee0 <USBD_LL_SetupStage+0x5e>
 8005eca:	e01d      	b.n	8005f08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb5f 	bl	8006598 <USBD_StdDevReq>
 8005eda:	4603      	mov	r3, r0
 8005edc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ede:	e020      	b.n	8005f22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fbc7 	bl	800667c <USBD_StdItfReq>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef2:	e016      	b.n	8005f22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc29 	bl	8006754 <USBD_StdEPReq>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
      break;
 8005f06:	e00c      	b.n	8005f22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fd54 	bl	80079c4 <USBD_LL_StallEP>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	bf00      	nop
  }

  return ret;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	460b      	mov	r3, r1
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d16e      	bne.n	8006022 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	f040 8098 	bne.w	8006088 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d913      	bls.n	8005f8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	1ad2      	subs	r2, r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	bf28      	it	cs
 8005f7e:	4613      	movcs	r3, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f001 f984 	bl	8007292 <USBD_CtlContinueRx>
 8005f8a:	e07d      	b.n	8006088 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d014      	beq.n	8005fc4 <USBD_LL_DataOutStage+0x98>
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d81d      	bhi.n	8005fda <USBD_LL_DataOutStage+0xae>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <USBD_LL_DataOutStage+0x7c>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d003      	beq.n	8005fae <USBD_LL_DataOutStage+0x82>
 8005fa6:	e018      	b.n	8005fda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	75bb      	strb	r3, [r7, #22]
            break;
 8005fac:	e018      	b.n	8005fe0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fa5e 	bl	800647a <USBD_CoreFindIF>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fc2:	e00d      	b.n	8005fe0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fa60 	bl	8006494 <USBD_CoreFindEP>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd8:	e002      	b.n	8005fe0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75bb      	strb	r3, [r7, #22]
            break;
 8005fde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005fe0:	7dbb      	ldrb	r3, [r7, #22]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d119      	bne.n	800601a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d113      	bne.n	800601a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ff2:	7dba      	ldrb	r2, [r7, #22]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	32ae      	adds	r2, #174	; 0xae
 8005ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006002:	7dba      	ldrb	r2, [r7, #22]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800600a:	7dba      	ldrb	r2, [r7, #22]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	32ae      	adds	r2, #174	; 0xae
 8006010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 f94a 	bl	80072b4 <USBD_CtlSendStatus>
 8006020:	e032      	b.n	8006088 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006028:	b2db      	uxtb	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fa31 	bl	8006494 <USBD_CoreFindEP>
 8006032:	4603      	mov	r3, r0
 8006034:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	2bff      	cmp	r3, #255	; 0xff
 800603a:	d025      	beq.n	8006088 <USBD_LL_DataOutStage+0x15c>
 800603c:	7dbb      	ldrb	r3, [r7, #22]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d122      	bne.n	8006088 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d117      	bne.n	800607e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800604e:	7dba      	ldrb	r2, [r7, #22]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	32ae      	adds	r2, #174	; 0xae
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800605e:	7dba      	ldrb	r2, [r7, #22]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006066:	7dba      	ldrb	r2, [r7, #22]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	32ae      	adds	r2, #174	; 0xae
 800606c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	7afa      	ldrb	r2, [r7, #11]
 8006074:	4611      	mov	r1, r2
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	4798      	blx	r3
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	e000      	b.n	800608a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	460b      	mov	r3, r1
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060a0:	7afb      	ldrb	r3, [r7, #11]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d16f      	bne.n	8006186 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3314      	adds	r3, #20
 80060aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d15a      	bne.n	800616c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d914      	bls.n	80060ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f001 f8ac 	bl	8007236 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060de:	2300      	movs	r3, #0
 80060e0:	2200      	movs	r2, #0
 80060e2:	2100      	movs	r1, #0
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f001 fd17 	bl	8007b18 <USBD_LL_PrepareReceive>
 80060ea:	e03f      	b.n	800616c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d11c      	bne.n	8006132 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006100:	429a      	cmp	r2, r3
 8006102:	d316      	bcc.n	8006132 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800610e:	429a      	cmp	r2, r3
 8006110:	d20f      	bcs.n	8006132 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f001 f88d 	bl	8007236 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006124:	2300      	movs	r3, #0
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 fcf4 	bl	8007b18 <USBD_LL_PrepareReceive>
 8006130:	e01c      	b.n	800616c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d10f      	bne.n	800615e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800615e:	2180      	movs	r1, #128	; 0x80
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f001 fc2f 	bl	80079c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 f8b7 	bl	80072da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03a      	beq.n	80061ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff fe42 	bl	8005e00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006184:	e032      	b.n	80061ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f97f 	bl	8006494 <USBD_CoreFindEP>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2bff      	cmp	r3, #255	; 0xff
 800619e:	d025      	beq.n	80061ec <USBD_LL_DataInStage+0x15a>
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d122      	bne.n	80061ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d11c      	bne.n	80061ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061b2:	7dfa      	ldrb	r2, [r7, #23]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	32ae      	adds	r2, #174	; 0xae
 80061b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d014      	beq.n	80061ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061c2:	7dfa      	ldrb	r2, [r7, #23]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061ca:	7dfa      	ldrb	r2, [r7, #23]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	32ae      	adds	r2, #174	; 0xae
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	7afa      	ldrb	r2, [r7, #11]
 80061d8:	4611      	mov	r1, r2
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	4798      	blx	r3
 80061de:	4603      	mov	r3, r0
 80061e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061e2:	7dbb      	ldrb	r3, [r7, #22]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061e8:	7dbb      	ldrb	r3, [r7, #22]
 80061ea:	e000      	b.n	80061ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d014      	beq.n	800625c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6852      	ldr	r2, [r2, #4]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	4611      	mov	r1, r2
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	2200      	movs	r2, #0
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fb69 	bl	800793a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006278:	2340      	movs	r3, #64	; 0x40
 800627a:	2200      	movs	r2, #0
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fb5b 	bl	800793a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	621a      	str	r2, [r3, #32]

  return ret;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d106      	bne.n	8006308 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006300:	b2da      	uxtb	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d110      	bne.n	800634c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	32ae      	adds	r2, #174	; 0xae
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e01c      	b.n	80063b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d115      	bne.n	80063b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	; 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	32ae      	adds	r2, #174	; 0xae
 80063a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	4611      	mov	r1, r2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32ae      	adds	r2, #174	; 0xae
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	e01c      	b.n	8006416 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d115      	bne.n	8006414 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	; 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	4611      	mov	r1, r2
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00e      	beq.n	8006470 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	4611      	mov	r1, r2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006486:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	885b      	ldrh	r3, [r3, #2]
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d920      	bls.n	8006518 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064de:	e013      	b.n	8006508 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064e0:	f107 030a 	add.w	r3, r7, #10
 80064e4:	4619      	mov	r1, r3
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f000 f81b 	bl	8006522 <USBD_GetNextDesc>
 80064ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d108      	bne.n	8006508 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	789b      	ldrb	r3, [r3, #2]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	429a      	cmp	r2, r3
 8006502:	d008      	beq.n	8006516 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	b29a      	uxth	r2, r3
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	429a      	cmp	r2, r3
 8006512:	d8e5      	bhi.n	80064e0 <USBD_GetEpDesc+0x32>
 8006514:	e000      	b.n	8006518 <USBD_GetEpDesc+0x6a>
          break;
 8006516:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006518:	693b      	ldr	r3, [r7, #16]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	4413      	add	r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800657a:	8a3b      	ldrh	r3, [r7, #16]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b21a      	sxth	r2, r3
 8006580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006584:	4313      	orrs	r3, r2
 8006586:	b21b      	sxth	r3, r3
 8006588:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800658a:	89fb      	ldrh	r3, [r7, #14]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d005      	beq.n	80065be <USBD_StdDevReq+0x26>
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d857      	bhi.n	8006666 <USBD_StdDevReq+0xce>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00f      	beq.n	80065da <USBD_StdDevReq+0x42>
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d153      	bne.n	8006666 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	32ae      	adds	r2, #174	; 0xae
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e04a      	b.n	8006670 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d83b      	bhi.n	800665a <USBD_StdDevReq+0xc2>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <USBD_StdDevReq+0x50>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	0800663d 	.word	0x0800663d
 80065ec:	08006651 	.word	0x08006651
 80065f0:	0800665b 	.word	0x0800665b
 80065f4:	08006647 	.word	0x08006647
 80065f8:	0800665b 	.word	0x0800665b
 80065fc:	0800661b 	.word	0x0800661b
 8006600:	08006611 	.word	0x08006611
 8006604:	0800665b 	.word	0x0800665b
 8006608:	08006633 	.word	0x08006633
 800660c:	08006625 	.word	0x08006625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa3c 	bl	8006a90 <USBD_GetDescriptor>
          break;
 8006618:	e024      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fba1 	bl	8006d64 <USBD_SetAddress>
          break;
 8006622:	e01f      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fbe0 	bl	8006dec <USBD_SetConfig>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
          break;
 8006630:	e018      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc83 	bl	8006f40 <USBD_GetConfig>
          break;
 800663a:	e013      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fcb4 	bl	8006fac <USBD_GetStatus>
          break;
 8006644:	e00e      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fce3 	bl	8007014 <USBD_SetFeature>
          break;
 800664e:	e009      	b.n	8006664 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fd07 	bl	8007066 <USBD_ClrFeature>
          break;
 8006658:	e004      	b.n	8006664 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fd5e 	bl	800711e <USBD_CtlError>
          break;
 8006662:	bf00      	nop
      }
      break;
 8006664:	e004      	b.n	8006670 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd58 	bl	800711e <USBD_CtlError>
      break;
 800666e:	bf00      	nop
  }

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop

0800667c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d005      	beq.n	80066a2 <USBD_StdItfReq+0x26>
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d852      	bhi.n	8006740 <USBD_StdItfReq+0xc4>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <USBD_StdItfReq+0x26>
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d14e      	bne.n	8006740 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d840      	bhi.n	8006732 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	889b      	ldrh	r3, [r3, #4]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d836      	bhi.n	8006728 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	889b      	ldrh	r3, [r3, #4]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fed9 	bl	800647a <USBD_CoreFindIF>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	d01d      	beq.n	800670e <USBD_StdItfReq+0x92>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11a      	bne.n	800670e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066d8:	7bba      	ldrb	r2, [r7, #14]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	32ae      	adds	r2, #174	; 0xae
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066e8:	7bba      	ldrb	r2, [r7, #14]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066f0:	7bba      	ldrb	r2, [r7, #14]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006706:	e004      	b.n	8006712 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006708:	2303      	movs	r3, #3
 800670a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800670c:	e001      	b.n	8006712 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	88db      	ldrh	r3, [r3, #6]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d110      	bne.n	800673c <USBD_StdItfReq+0xc0>
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10d      	bne.n	800673c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fdc7 	bl	80072b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006726:	e009      	b.n	800673c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fcf7 	bl	800711e <USBD_CtlError>
          break;
 8006730:	e004      	b.n	800673c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fcf2 	bl	800711e <USBD_CtlError>
          break;
 800673a:	e000      	b.n	800673e <USBD_StdItfReq+0xc2>
          break;
 800673c:	bf00      	nop
      }
      break;
 800673e:	e004      	b.n	800674a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fceb 	bl	800711e <USBD_CtlError>
      break;
 8006748:	bf00      	nop
  }

  return ret;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	889b      	ldrh	r3, [r3, #4]
 8006766:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d007      	beq.n	8006784 <USBD_StdEPReq+0x30>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	f200 817f 	bhi.w	8006a78 <USBD_StdEPReq+0x324>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d02a      	beq.n	80067d4 <USBD_StdEPReq+0x80>
 800677e:	2b20      	cmp	r3, #32
 8006780:	f040 817a 	bne.w	8006a78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fe83 	bl	8006494 <USBD_CoreFindEP>
 800678e:	4603      	mov	r3, r0
 8006790:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006792:	7b7b      	ldrb	r3, [r7, #13]
 8006794:	2bff      	cmp	r3, #255	; 0xff
 8006796:	f000 8174 	beq.w	8006a82 <USBD_StdEPReq+0x32e>
 800679a:	7b7b      	ldrb	r3, [r7, #13]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 8170 	bne.w	8006a82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067a2:	7b7a      	ldrb	r2, [r7, #13]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067aa:	7b7a      	ldrb	r2, [r7, #13]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	32ae      	adds	r2, #174	; 0xae
 80067b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8163 	beq.w	8006a82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	; 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067d2:	e156      	b.n	8006a82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d008      	beq.n	80067ee <USBD_StdEPReq+0x9a>
 80067dc:	2b03      	cmp	r3, #3
 80067de:	f300 8145 	bgt.w	8006a6c <USBD_StdEPReq+0x318>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 809b 	beq.w	800691e <USBD_StdEPReq+0x1ca>
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d03c      	beq.n	8006866 <USBD_StdEPReq+0x112>
 80067ec:	e13e      	b.n	8006a6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d002      	beq.n	8006800 <USBD_StdEPReq+0xac>
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d016      	beq.n	800682c <USBD_StdEPReq+0xd8>
 80067fe:	e02c      	b.n	800685a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <USBD_StdEPReq+0xce>
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d00a      	beq.n	8006822 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f8d7 	bl	80079c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f8d3 	bl	80079c4 <USBD_LL_StallEP>
 800681e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006820:	e020      	b.n	8006864 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc7a 	bl	800711e <USBD_CtlError>
              break;
 800682a:	e01b      	b.n	8006864 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	885b      	ldrh	r3, [r3, #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10e      	bne.n	8006852 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <USBD_StdEPReq+0xfe>
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d008      	beq.n	8006852 <USBD_StdEPReq+0xfe>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	88db      	ldrh	r3, [r3, #6]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 f8b9 	bl	80079c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fd2e 	bl	80072b4 <USBD_CtlSendStatus>

              break;
 8006858:	e004      	b.n	8006864 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc5e 	bl	800711e <USBD_CtlError>
              break;
 8006862:	bf00      	nop
          }
          break;
 8006864:	e107      	b.n	8006a76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d002      	beq.n	8006878 <USBD_StdEPReq+0x124>
 8006872:	2b03      	cmp	r3, #3
 8006874:	d016      	beq.n	80068a4 <USBD_StdEPReq+0x150>
 8006876:	e04b      	b.n	8006910 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <USBD_StdEPReq+0x146>
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	2b80      	cmp	r3, #128	; 0x80
 8006882:	d00a      	beq.n	800689a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 f89b 	bl	80079c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f897 	bl	80079c4 <USBD_LL_StallEP>
 8006896:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006898:	e040      	b.n	800691c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc3e 	bl	800711e <USBD_CtlError>
              break;
 80068a2:	e03b      	b.n	800691c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	885b      	ldrh	r3, [r3, #2]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d136      	bne.n	800691a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f8a1 	bl	8007a02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fcf7 	bl	80072b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fde2 	bl	8006494 <USBD_CoreFindEP>
 80068d0:	4603      	mov	r3, r0
 80068d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068d4:	7b7b      	ldrb	r3, [r7, #13]
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d01f      	beq.n	800691a <USBD_StdEPReq+0x1c6>
 80068da:	7b7b      	ldrb	r3, [r7, #13]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11c      	bne.n	800691a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068e0:	7b7a      	ldrb	r2, [r7, #13]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068e8:	7b7a      	ldrb	r2, [r7, #13]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	32ae      	adds	r2, #174	; 0xae
 80068ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068f8:	7b7a      	ldrb	r2, [r7, #13]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32ae      	adds	r2, #174	; 0xae
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800690e:	e004      	b.n	800691a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fc03 	bl	800711e <USBD_CtlError>
              break;
 8006918:	e000      	b.n	800691c <USBD_StdEPReq+0x1c8>
              break;
 800691a:	bf00      	nop
          }
          break;
 800691c:	e0ab      	b.n	8006a76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d002      	beq.n	8006930 <USBD_StdEPReq+0x1dc>
 800692a:	2b03      	cmp	r3, #3
 800692c:	d032      	beq.n	8006994 <USBD_StdEPReq+0x240>
 800692e:	e097      	b.n	8006a60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <USBD_StdEPReq+0x1f2>
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d004      	beq.n	8006946 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fbed 	bl	800711e <USBD_CtlError>
                break;
 8006944:	e091      	b.n	8006a6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da0b      	bge.n	8006966 <USBD_StdEPReq+0x212>
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3310      	adds	r3, #16
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	e00b      	b.n	800697e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	3304      	adds	r3, #4
 800697e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2202      	movs	r2, #2
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc37 	bl	8007200 <USBD_CtlSendData>
              break;
 8006992:	e06a      	b.n	8006a6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006998:	2b00      	cmp	r3, #0
 800699a:	da11      	bge.n	80069c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	f003 020f 	and.w	r2, r3, #15
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d117      	bne.n	80069e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fbb0 	bl	800711e <USBD_CtlError>
                  break;
 80069be:	e054      	b.n	8006a6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb9d 	bl	800711e <USBD_CtlError>
                  break;
 80069e4:	e041      	b.n	8006a6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da0b      	bge.n	8006a06 <USBD_StdEPReq+0x2b2>
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	3310      	adds	r3, #16
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	3304      	adds	r3, #4
 8006a04:	e00b      	b.n	8006a1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <USBD_StdEPReq+0x2d8>
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d103      	bne.n	8006a34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	e00e      	b.n	8006a52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f801 	bl	8007a40 <USBD_LL_IsStallEP>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e002      	b.n	8006a52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2202      	movs	r2, #2
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fbd1 	bl	8007200 <USBD_CtlSendData>
              break;
 8006a5e:	e004      	b.n	8006a6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb5b 	bl	800711e <USBD_CtlError>
              break;
 8006a68:	bf00      	nop
          }
          break;
 8006a6a:	e004      	b.n	8006a76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fb55 	bl	800711e <USBD_CtlError>
          break;
 8006a74:	bf00      	nop
      }
      break;
 8006a76:	e005      	b.n	8006a84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fb4f 	bl	800711e <USBD_CtlError>
      break;
 8006a80:	e000      	b.n	8006a84 <USBD_StdEPReq+0x330>
      break;
 8006a82:	bf00      	nop
  }

  return ret;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	f200 8128 	bhi.w	8006d06 <USBD_GetDescriptor+0x276>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <USBD_GetDescriptor+0x2c>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006af1 	.word	0x08006af1
 8006ac4:	08006b31 	.word	0x08006b31
 8006ac8:	08006d07 	.word	0x08006d07
 8006acc:	08006d07 	.word	0x08006d07
 8006ad0:	08006ca7 	.word	0x08006ca7
 8006ad4:	08006cd3 	.word	0x08006cd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
      break;
 8006aee:	e112      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7c1b      	ldrb	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f107 0208 	add.w	r2, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b12:	e100      	b.n	8006d16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e0f2      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	f200 80ac 	bhi.w	8006c94 <USBD_GetDescriptor+0x204>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <USBD_GetDescriptor+0xb4>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b5d 	.word	0x08006b5d
 8006b48:	08006b91 	.word	0x08006b91
 8006b4c:	08006bc5 	.word	0x08006bc5
 8006b50:	08006bf9 	.word	0x08006bf9
 8006b54:	08006c2d 	.word	0x08006c2d
 8006b58:	08006c61 	.word	0x08006c61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7c12      	ldrb	r2, [r2, #16]
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7e:	e091      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 facb 	bl	800711e <USBD_CtlError>
            err++;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8e:	e089      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bb2:	e077      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fab1 	bl	800711e <USBD_CtlError>
            err++;
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bc2:	e06f      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be6:	e05d      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa97 	bl	800711e <USBD_CtlError>
            err++;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf6:	e055      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	7c12      	ldrb	r2, [r2, #16]
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c1a:	e043      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa7d 	bl	800711e <USBD_CtlError>
            err++;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	3301      	adds	r3, #1
 8006c28:	72fb      	strb	r3, [r7, #11]
          break;
 8006c2a:	e03b      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	7c12      	ldrb	r2, [r2, #16]
 8006c44:	f107 0108 	add.w	r1, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c4e:	e029      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa63 	bl	800711e <USBD_CtlError>
            err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c5e:	e021      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7c12      	ldrb	r2, [r2, #16]
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c82:	e00f      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa49 	bl	800711e <USBD_CtlError>
            err++;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	72fb      	strb	r3, [r7, #11]
          break;
 8006c92:	e007      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa41 	bl	800711e <USBD_CtlError>
          err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ca2:	bf00      	nop
      }
      break;
 8006ca4:	e037      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7c1b      	ldrb	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	f107 0208 	add.w	r2, r7, #8
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
 8006cbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cc0:	e029      	b.n	8006d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa2a 	bl	800711e <USBD_CtlError>
        err++;
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd0:	e021      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f107 0208 	add.w	r2, r7, #8
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4798      	blx	r3
 8006cea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cf4:	e00f      	b.n	8006d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa10 	bl	800711e <USBD_CtlError>
        err++;
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	3301      	adds	r3, #1
 8006d02:	72fb      	strb	r3, [r7, #11]
      break;
 8006d04:	e007      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa08 	bl	800711e <USBD_CtlError>
      err++;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	3301      	adds	r3, #1
 8006d12:	72fb      	strb	r3, [r7, #11]
      break;
 8006d14:	bf00      	nop
  }

  if (err != 0U)
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11e      	bne.n	8006d5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	88db      	ldrh	r3, [r3, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d016      	beq.n	8006d52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d24:	893b      	ldrh	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00e      	beq.n	8006d48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	88da      	ldrh	r2, [r3, #6]
 8006d2e:	893b      	ldrh	r3, [r7, #8]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bf28      	it	cs
 8006d34:	4613      	movcs	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d3a:	893b      	ldrh	r3, [r7, #8]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa5d 	bl	8007200 <USBD_CtlSendData>
 8006d46:	e009      	b.n	8006d5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f9e7 	bl	800711e <USBD_CtlError>
 8006d50:	e004      	b.n	8006d5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 faae 	bl	80072b4 <USBD_CtlSendStatus>
 8006d58:	e000      	b.n	8006d5c <USBD_GetDescriptor+0x2cc>
    return;
 8006d5a:	bf00      	nop
  }
}
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop

08006d64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	889b      	ldrh	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d131      	bne.n	8006dda <USBD_SetAddress+0x76>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	88db      	ldrh	r3, [r3, #6]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d12d      	bne.n	8006dda <USBD_SetAddress+0x76>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	885b      	ldrh	r3, [r3, #2]
 8006d82:	2b7f      	cmp	r3, #127	; 0x7f
 8006d84:	d829      	bhi.n	8006dda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	885b      	ldrh	r3, [r3, #2]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d104      	bne.n	8006da8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f9bc 	bl	800711e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	e01d      	b.n	8006de4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7bfa      	ldrb	r2, [r7, #15]
 8006dac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fe6f 	bl	8007a98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa7a 	bl	80072b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dce:	e009      	b.n	8006de4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd8:	e004      	b.n	8006de4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f99e 	bl	800711e <USBD_CtlError>
  }
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	4b4e      	ldr	r3, [pc, #312]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e04:	4b4d      	ldr	r3, [pc, #308]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d905      	bls.n	8006e18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f985 	bl	800711e <USBD_CtlError>
    return USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e08c      	b.n	8006f32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d002      	beq.n	8006e2a <USBD_SetConfig+0x3e>
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d029      	beq.n	8006e7c <USBD_SetConfig+0x90>
 8006e28:	e075      	b.n	8006f16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e2a:	4b44      	ldr	r3, [pc, #272]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d020      	beq.n	8006e74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e32:	4b42      	ldr	r3, [pc, #264]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fe ffe7 	bl	8005e16 <USBD_SetClassConfig>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f962 	bl	800711e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e62:	e065      	b.n	8006f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa25 	bl	80072b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e72:	e05d      	b.n	8006f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa1d 	bl	80072b4 <USBD_CtlSendStatus>
      break;
 8006e7a:	e059      	b.n	8006f30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e7c:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d112      	bne.n	8006eaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e96:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <USBD_SetConfig+0x150>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fe ffd6 	bl	8005e4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa06 	bl	80072b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ea8:	e042      	b.n	8006f30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <USBD_SetConfig+0x150>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d02a      	beq.n	8006f0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fe ffc4 	bl	8005e4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ec6:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <USBD_SetConfig+0x150>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ed0:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <USBD_SetConfig+0x150>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe ff9d 	bl	8005e16 <USBD_SetClassConfig>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f918 	bl	800711e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fe ffa9 	bl	8005e4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f04:	e014      	b.n	8006f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9d4 	bl	80072b4 <USBD_CtlSendStatus>
      break;
 8006f0c:	e010      	b.n	8006f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9d0 	bl	80072b4 <USBD_CtlSendStatus>
      break;
 8006f14:	e00c      	b.n	8006f30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f900 	bl	800711e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f1e:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <USBD_SetConfig+0x150>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fe ff92 	bl	8005e4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2e:	bf00      	nop
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000288 	.word	0x20000288

08006f40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d004      	beq.n	8006f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8e2 	bl	800711e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f5a:	e023      	b.n	8006fa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	dc02      	bgt.n	8006f6e <USBD_GetConfig+0x2e>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc03      	bgt.n	8006f74 <USBD_GetConfig+0x34>
 8006f6c:	e015      	b.n	8006f9a <USBD_GetConfig+0x5a>
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d00b      	beq.n	8006f8a <USBD_GetConfig+0x4a>
 8006f72:	e012      	b.n	8006f9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	2201      	movs	r2, #1
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f93c 	bl	8007200 <USBD_CtlSendData>
        break;
 8006f88:	e00c      	b.n	8006fa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f934 	bl	8007200 <USBD_CtlSendData>
        break;
 8006f98:	e004      	b.n	8006fa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8be 	bl	800711e <USBD_CtlError>
        break;
 8006fa2:	bf00      	nop
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d81e      	bhi.n	8007002 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d004      	beq.n	8006fd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f8a5 	bl	800711e <USBD_CtlError>
        break;
 8006fd4:	e01a      	b.n	800700c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f043 0202 	orr.w	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f900 	bl	8007200 <USBD_CtlSendData>
      break;
 8007000:	e004      	b.n	800700c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f88a 	bl	800711e <USBD_CtlError>
      break;
 800700a:	bf00      	nop
  }
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d107      	bne.n	8007036 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f940 	bl	80072b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007034:	e013      	b.n	800705e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d10b      	bne.n	8007056 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	b29b      	uxth	r3, r3
 8007046:	b2da      	uxtb	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f930 	bl	80072b4 <USBD_CtlSendStatus>
}
 8007054:	e003      	b.n	800705e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f860 	bl	800711e <USBD_CtlError>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	2b02      	cmp	r3, #2
 800707c:	d80b      	bhi.n	8007096 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	885b      	ldrh	r3, [r3, #2]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10c      	bne.n	80070a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f910 	bl	80072b4 <USBD_CtlSendStatus>
      }
      break;
 8007094:	e004      	b.n	80070a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f840 	bl	800711e <USBD_CtlError>
      break;
 800709e:	e000      	b.n	80070a2 <USBD_ClrFeature+0x3c>
      break;
 80070a0:	bf00      	nop
  }
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fa41 	bl	800655c <SWAPBYTE>
 80070da:	4603      	mov	r3, r0
 80070dc:	461a      	mov	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fa34 	bl	800655c <SWAPBYTE>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fa27 	bl	800655c <SWAPBYTE>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	80da      	strh	r2, [r3, #6]
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fc4a 	bl	80079c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fc46 	bl	80079c4 <USBD_LL_StallEP>
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d036      	beq.n	80071c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800715a:	6938      	ldr	r0, [r7, #16]
 800715c:	f000 f836 	bl	80071cc <USBD_GetLen>
 8007160:	4603      	mov	r3, r0
 8007162:	3301      	adds	r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	4413      	add	r3, r2
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
  idx++;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	3301      	adds	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	2203      	movs	r2, #3
 8007188:	701a      	strb	r2, [r3, #0]
  idx++;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	3301      	adds	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007190:	e013      	b.n	80071ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	4413      	add	r3, r2
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3301      	adds	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
    idx++;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	3301      	adds	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	4413      	add	r3, r2
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	3301      	adds	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e7      	bne.n	8007192 <USBD_GetString+0x52>
 80071c2:	e000      	b.n	80071c6 <USBD_GetString+0x86>
    return;
 80071c4:	bf00      	nop
  }
}
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071dc:	e005      	b.n	80071ea <USBD_GetLen+0x1e>
  {
    len++;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	3301      	adds	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f5      	bne.n	80071de <USBD_GetLen+0x12>
  }

  return len;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2202      	movs	r2, #2
 8007210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fc55 	bl	8007ad6 <USBD_LL_Transmit>

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fc44 	bl	8007ad6 <USBD_LL_Transmit>

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2203      	movs	r2, #3
 8007268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	2100      	movs	r1, #0
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fc48 	bl	8007b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fc37 	bl	8007b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2204      	movs	r2, #4
 80072c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fc03 	bl	8007ad6 <USBD_LL_Transmit>

  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2205      	movs	r2, #5
 80072e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc11 	bl	8007b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SendGovnoReport>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void SendGovnoReport(uint8_t* report, uint16_t length) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	807b      	strh	r3, [r7, #2]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, length);
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	461a      	mov	r2, r3
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4803      	ldr	r0, [pc, #12]	; (8007320 <SendGovnoReport+0x20>)
 8007314:	f7fe fb72 	bl	80059fc <USBD_CUSTOM_HID_SendReport>
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	2000028c 	.word	0x2000028c

08007324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007328:	2200      	movs	r2, #0
 800732a:	4912      	ldr	r1, [pc, #72]	; (8007374 <MX_USB_DEVICE_Init+0x50>)
 800732c:	4812      	ldr	r0, [pc, #72]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 800732e:	f7fe fcf5 	bl	8005d1c <USBD_Init>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007338:	f7f9 fde4 	bl	8000f04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800733c:	490f      	ldr	r1, [pc, #60]	; (800737c <MX_USB_DEVICE_Init+0x58>)
 800733e:	480e      	ldr	r0, [pc, #56]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007340:	f7fe fd1c 	bl	8005d7c <USBD_RegisterClass>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800734a:	f7f9 fddb 	bl	8000f04 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800734e:	490c      	ldr	r1, [pc, #48]	; (8007380 <MX_USB_DEVICE_Init+0x5c>)
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007352:	f7fe fcc9 	bl	8005ce8 <USBD_CUSTOM_HID_RegisterInterface>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800735c:	f7f9 fdd2 	bl	8000f04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007360:	4805      	ldr	r0, [pc, #20]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007362:	f7fe fd41 	bl	8005de8 <USBD_Start>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800736c:	f7f9 fdca 	bl	8000f04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007370:	bf00      	nop
 8007372:	bd80      	pop	{r7, pc}
 8007374:	200000e0 	.word	0x200000e0
 8007378:	2000028c 	.word	0x2000028c
 800737c:	2000000c 	.word	0x2000000c
 8007380:	200000d0 	.word	0x200000d0

08007384 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800738a:	4618      	mov	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007398:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	460a      	mov	r2, r1
 80073ae:	71fb      	strb	r3, [r7, #7]
 80073b0:	4613      	mov	r3, r2
 80073b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80073b4:	4806      	ldr	r0, [pc, #24]	; (80073d0 <CUSTOM_HID_OutEvent_FS+0x2c>)
 80073b6:	f7fe fc35 	bl	8005c24 <USBD_CUSTOM_HID_ReceivePacket>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	e000      	b.n	80073c8 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 80073c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	2000028c 	.word	0x2000028c

080073d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2212      	movs	r2, #18
 80073e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	200000fc 	.word	0x200000fc

080073f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2204      	movs	r2, #4
 8007408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000110 	.word	0x20000110

0800741c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d105      	bne.n	800743a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4907      	ldr	r1, [pc, #28]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
 8007432:	4808      	ldr	r0, [pc, #32]	; (8007454 <USBD_FS_ProductStrDescriptor+0x38>)
 8007434:	f7ff fe84 	bl	8007140 <USBD_GetString>
 8007438:	e004      	b.n	8007444 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4904      	ldr	r1, [pc, #16]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <USBD_FS_ProductStrDescriptor+0x38>)
 8007440:	f7ff fe7e 	bl	8007140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000568 	.word	0x20000568
 8007454:	08007c54 	.word	0x08007c54

08007458 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007468:	4804      	ldr	r0, [pc, #16]	; (800747c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800746a:	f7ff fe69 	bl	8007140 <USBD_GetString>
  return USBD_StrDesc;
 800746e:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000568 	.word	0x20000568
 800747c:	08007c74 	.word	0x08007c74

08007480 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	221a      	movs	r2, #26
 8007490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007492:	f000 f843 	bl	800751c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007496:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000114 	.word	0x20000114

080074a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ba:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074bc:	f7ff fe40 	bl	8007140 <USBD_GetString>
 80074c0:	e004      	b.n	80074cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074c8:	f7ff fe3a 	bl	8007140 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000568 	.word	0x20000568
 80074dc:	08007c88 	.word	0x08007c88

080074e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4907      	ldr	r1, [pc, #28]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074f6:	4808      	ldr	r0, [pc, #32]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074f8:	f7ff fe22 	bl	8007140 <USBD_GetString>
 80074fc:	e004      	b.n	8007508 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4904      	ldr	r1, [pc, #16]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007502:	4805      	ldr	r0, [pc, #20]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007504:	f7ff fe1c 	bl	8007140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000568 	.word	0x20000568
 8007518:	08007c9c 	.word	0x08007c9c

0800751c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <Get_SerialNum+0x44>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <Get_SerialNum+0x48>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800752e:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <Get_SerialNum+0x4c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007542:	2208      	movs	r2, #8
 8007544:	4909      	ldr	r1, [pc, #36]	; (800756c <Get_SerialNum+0x50>)
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f814 	bl	8007574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800754c:	2204      	movs	r2, #4
 800754e:	4908      	ldr	r1, [pc, #32]	; (8007570 <Get_SerialNum+0x54>)
 8007550:	68b8      	ldr	r0, [r7, #8]
 8007552:	f000 f80f 	bl	8007574 <IntToUnicode>
  }
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	1fff7a10 	.word	0x1fff7a10
 8007564:	1fff7a14 	.word	0x1fff7a14
 8007568:	1fff7a18 	.word	0x1fff7a18
 800756c:	20000116 	.word	0x20000116
 8007570:	20000126 	.word	0x20000126

08007574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007586:	2300      	movs	r3, #0
 8007588:	75fb      	strb	r3, [r7, #23]
 800758a:	e027      	b.n	80075dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0f1b      	lsrs	r3, r3, #28
 8007590:	2b09      	cmp	r3, #9
 8007592:	d80b      	bhi.n	80075ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	0f1b      	lsrs	r3, r3, #28
 8007598:	b2da      	uxtb	r2, r3
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4619      	mov	r1, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	440b      	add	r3, r1
 80075a4:	3230      	adds	r2, #48	; 0x30
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e00a      	b.n	80075c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	0f1b      	lsrs	r3, r3, #28
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4619      	mov	r1, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	440b      	add	r3, r1
 80075bc:	3237      	adds	r2, #55	; 0x37
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	3301      	adds	r3, #1
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	3301      	adds	r3, #1
 80075da:	75fb      	strb	r3, [r7, #23]
 80075dc:	7dfa      	ldrb	r2, [r7, #23]
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3d3      	bcc.n	800758c <IntToUnicode+0x18>
  }
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007614:	d13a      	bne.n	800768c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	6313      	str	r3, [r2, #48]	; 0x30
 8007626:	4b1b      	ldr	r3, [pc, #108]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007632:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007638:	2302      	movs	r3, #2
 800763a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007640:	2303      	movs	r3, #3
 8007642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007644:	230a      	movs	r3, #10
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	4619      	mov	r1, r3
 800764e:	4812      	ldr	r0, [pc, #72]	; (8007698 <HAL_PCD_MspInit+0xa4>)
 8007650:	f7fa fafc 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 8007656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007658:	4a0e      	ldr	r2, [pc, #56]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 800765a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765e:	6353      	str	r3, [r2, #52]	; 0x34
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 8007666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007668:	4a0a      	ldr	r2, [pc, #40]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 800766a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800766e:	6453      	str	r3, [r2, #68]	; 0x44
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <HAL_PCD_MspInit+0xa0>)
 8007672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800767c:	2200      	movs	r2, #0
 800767e:	2100      	movs	r1, #0
 8007680:	2043      	movs	r0, #67	; 0x43
 8007682:	f7fa faac 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007686:	2043      	movs	r0, #67	; 0x43
 8007688:	f7fa fac5 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800768c:	bf00      	nop
 800768e:	3728      	adds	r7, #40	; 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40023800 	.word	0x40023800
 8007698:	40020000 	.word	0x40020000

0800769c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7fe fbe5 	bl	8005e82 <USBD_LL_SetupStage>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f7fe fc1f 	bl	8005f2c <USBD_LL_DataOutStage>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	334c      	adds	r3, #76	; 0x4c
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	4619      	mov	r1, r3
 800771e:	f7fe fcb8 	bl	8006092 <USBD_LL_DataInStage>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe fdec 	bl	8006316 <USBD_LL_SOF>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	2b02      	cmp	r3, #2
 8007758:	d001      	beq.n	800775e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800775a:	f7f9 fbd3 	bl	8000f04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fd96 	bl	800629a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fd3e 	bl	80061f6 <USBD_LL_Reset>
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fd91 	bl	80062ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <HAL_PCD_SuspendCallback+0x48>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4a03      	ldr	r2, [pc, #12]	; (80077cc <HAL_PCD_SuspendCallback+0x48>)
 80077be:	f043 0306 	orr.w	r3, r3, #6
 80077c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fd81 	bl	80062e6 <USBD_LL_Resume>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fdd9 	bl	80063ba <USBD_LL_IsoOUTIncomplete>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fd95 	bl	8006356 <USBD_LL_IsoINIncomplete>
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fdeb 	bl	800641e <USBD_LL_DevConnected>
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fde8 	bl	8006434 <USBD_LL_DevDisconnected>
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d13c      	bne.n	80078f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800787c:	4a20      	ldr	r2, [pc, #128]	; (8007900 <USBD_LL_Init+0x94>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <USBD_LL_Init+0x94>)
 8007888:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800788c:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <USBD_LL_Init+0x94>)
 800788e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <USBD_LL_Init+0x94>)
 8007896:	2204      	movs	r2, #4
 8007898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800789a:	4b19      	ldr	r3, [pc, #100]	; (8007900 <USBD_LL_Init+0x94>)
 800789c:	2202      	movs	r2, #2
 800789e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078a0:	4b17      	ldr	r3, [pc, #92]	; (8007900 <USBD_LL_Init+0x94>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078a6:	4b16      	ldr	r3, [pc, #88]	; (8007900 <USBD_LL_Init+0x94>)
 80078a8:	2202      	movs	r2, #2
 80078aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078ac:	4b14      	ldr	r3, [pc, #80]	; (8007900 <USBD_LL_Init+0x94>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <USBD_LL_Init+0x94>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <USBD_LL_Init+0x94>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078be:	4b10      	ldr	r3, [pc, #64]	; (8007900 <USBD_LL_Init+0x94>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <USBD_LL_Init+0x94>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078ca:	480d      	ldr	r0, [pc, #52]	; (8007900 <USBD_LL_Init+0x94>)
 80078cc:	f7fa fb73 	bl	8001fb6 <HAL_PCD_Init>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078d6:	f7f9 fb15 	bl	8000f04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	4808      	ldr	r0, [pc, #32]	; (8007900 <USBD_LL_Init+0x94>)
 80078de:	f7fb fdb2 	bl	8003446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078e2:	2240      	movs	r2, #64	; 0x40
 80078e4:	2100      	movs	r1, #0
 80078e6:	4806      	ldr	r0, [pc, #24]	; (8007900 <USBD_LL_Init+0x94>)
 80078e8:	f7fb fd66 	bl	80033b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078ec:	2280      	movs	r2, #128	; 0x80
 80078ee:	2101      	movs	r1, #1
 80078f0:	4803      	ldr	r0, [pc, #12]	; (8007900 <USBD_LL_Init+0x94>)
 80078f2:	f7fb fd61 	bl	80033b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000768 	.word	0x20000768

08007904 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800791a:	4618      	mov	r0, r3
 800791c:	f7fa fc68 	bl	80021f0 <HAL_PCD_Start>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f930 	bl	8007b8c <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	461a      	mov	r2, r3
 8007948:	4603      	mov	r3, r0
 800794a:	70fb      	strb	r3, [r7, #3]
 800794c:	460b      	mov	r3, r1
 800794e:	70bb      	strb	r3, [r7, #2]
 8007950:	4613      	mov	r3, r2
 8007952:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007962:	78bb      	ldrb	r3, [r7, #2]
 8007964:	883a      	ldrh	r2, [r7, #0]
 8007966:	78f9      	ldrb	r1, [r7, #3]
 8007968:	f7fb f939 	bl	8002bde <HAL_PCD_EP_Open>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f90a 	bl	8007b8c <USBD_Get_USB_Status>
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797c:	7bbb      	ldrb	r3, [r7, #14]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fb f982 	bl	8002cae <HAL_PCD_EP_Close>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f8eb 	bl	8007b8c <USBD_Get_USB_Status>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fb fa42 	bl	8002e6c <HAL_PCD_EP_SetStall>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f8cc 	bl	8007b8c <USBD_Get_USB_Status>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fb fa87 	bl	8002f34 <HAL_PCD_EP_ClrStall>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f8ad 	bl	8007b8c <USBD_Get_USB_Status>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da0b      	bge.n	8007a74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	333e      	adds	r3, #62	; 0x3e
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	e00b      	b.n	8007a8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fb f86c 	bl	8002b94 <HAL_PCD_SetAddress>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f862 	bl	8007b8c <USBD_Get_USB_Status>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007af4:	7af9      	ldrb	r1, [r7, #11]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	f7fb f96d 	bl	8002dd8 <HAL_PCD_EP_Transmit>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f841 	bl	8007b8c <USBD_Get_USB_Status>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	460b      	mov	r3, r1
 8007b26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b36:	7af9      	ldrb	r1, [r7, #11]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	f7fb f901 	bl	8002d42 <HAL_PCD_EP_Receive>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f820 	bl	8007b8c <USBD_Get_USB_Status>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b50:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <USBD_static_malloc+0x18>)
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000c74 	.word	0x20000c74

08007b78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]

}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d817      	bhi.n	8007bd0 <USBD_Get_USB_Status+0x44>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <USBD_Get_USB_Status+0x1c>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bbf 	.word	0x08007bbf
 8007bb0:	08007bc5 	.word	0x08007bc5
 8007bb4:	08007bcb 	.word	0x08007bcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
    break;
 8007bbc:	e00b      	b.n	8007bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc2:	e008      	b.n	8007bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc8:	e005      	b.n	8007bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8007bce:	e002      	b.n	8007bd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd4:	bf00      	nop
  }
  return usb_status;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <__libc_init_array>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4d0d      	ldr	r5, [pc, #52]	; (8007c1c <__libc_init_array+0x38>)
 8007be8:	4c0d      	ldr	r4, [pc, #52]	; (8007c20 <__libc_init_array+0x3c>)
 8007bea:	1b64      	subs	r4, r4, r5
 8007bec:	10a4      	asrs	r4, r4, #2
 8007bee:	2600      	movs	r6, #0
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	d109      	bne.n	8007c08 <__libc_init_array+0x24>
 8007bf4:	4d0b      	ldr	r5, [pc, #44]	; (8007c24 <__libc_init_array+0x40>)
 8007bf6:	4c0c      	ldr	r4, [pc, #48]	; (8007c28 <__libc_init_array+0x44>)
 8007bf8:	f000 f820 	bl	8007c3c <_init>
 8007bfc:	1b64      	subs	r4, r4, r5
 8007bfe:	10a4      	asrs	r4, r4, #2
 8007c00:	2600      	movs	r6, #0
 8007c02:	42a6      	cmp	r6, r4
 8007c04:	d105      	bne.n	8007c12 <__libc_init_array+0x2e>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0c:	4798      	blx	r3
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7ee      	b.n	8007bf0 <__libc_init_array+0xc>
 8007c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c16:	4798      	blx	r3
 8007c18:	3601      	adds	r6, #1
 8007c1a:	e7f2      	b.n	8007c02 <__libc_init_array+0x1e>
 8007c1c:	08007ccc 	.word	0x08007ccc
 8007c20:	08007ccc 	.word	0x08007ccc
 8007c24:	08007ccc 	.word	0x08007ccc
 8007c28:	08007cd4 	.word	0x08007cd4

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <_init>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr

08007c48 <_fini>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	bf00      	nop
 8007c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4e:	bc08      	pop	{r3}
 8007c50:	469e      	mov	lr, r3
 8007c52:	4770      	bx	lr
