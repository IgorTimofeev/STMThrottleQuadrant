
STMThrottleQuadrant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d28  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f38  08008f38  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f40  08008f40  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  20000120  0800906c  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800906c  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011577  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c6  00000000  00000000  000316c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c177  00000000  00000000  00036178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012002  00000000  00000000  000522ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096779  00000000  00000000  000642f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faa6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  000faabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000120 	.word	0x20000120
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ea8 	.word	0x08008ea8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000124 	.word	0x20000124
 80001d4:	08008ea8 	.word	0x08008ea8

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2uiz>:
 80008b4:	004a      	lsls	r2, r1, #1
 80008b6:	d211      	bcs.n	80008dc <__aeabi_d2uiz+0x28>
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d211      	bcs.n	80008e2 <__aeabi_d2uiz+0x2e>
 80008be:	d50d      	bpl.n	80008dc <__aeabi_d2uiz+0x28>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d40e      	bmi.n	80008e8 <__aeabi_d2uiz+0x34>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	fa23 f002 	lsr.w	r0, r3, r2
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d102      	bne.n	80008ee <__aeabi_d2uiz+0x3a>
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	4770      	bx	lr
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b974 	b.w	8000bf4 <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	9d08      	ldr	r5, [sp, #32]
 800092a:	4604      	mov	r4, r0
 800092c:	468e      	mov	lr, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d14d      	bne.n	80009ce <__udivmoddi4+0xaa>
 8000932:	428a      	cmp	r2, r1
 8000934:	4694      	mov	ip, r2
 8000936:	d969      	bls.n	8000a0c <__udivmoddi4+0xe8>
 8000938:	fab2 f282 	clz	r2, r2
 800093c:	b152      	cbz	r2, 8000954 <__udivmoddi4+0x30>
 800093e:	fa01 f302 	lsl.w	r3, r1, r2
 8000942:	f1c2 0120 	rsb	r1, r2, #32
 8000946:	fa20 f101 	lsr.w	r1, r0, r1
 800094a:	fa0c fc02 	lsl.w	ip, ip, r2
 800094e:	ea41 0e03 	orr.w	lr, r1, r3
 8000952:	4094      	lsls	r4, r2
 8000954:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000958:	0c21      	lsrs	r1, r4, #16
 800095a:	fbbe f6f8 	udiv	r6, lr, r8
 800095e:	fa1f f78c 	uxth.w	r7, ip
 8000962:	fb08 e316 	mls	r3, r8, r6, lr
 8000966:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800096a:	fb06 f107 	mul.w	r1, r6, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d90a      	bls.n	8000988 <__udivmoddi4+0x64>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 30ff 	add.w	r0, r6, #4294967295
 800097a:	f080 811f 	bcs.w	8000bbc <__udivmoddi4+0x298>
 800097e:	4299      	cmp	r1, r3
 8000980:	f240 811c 	bls.w	8000bbc <__udivmoddi4+0x298>
 8000984:	3e02      	subs	r6, #2
 8000986:	4463      	add	r3, ip
 8000988:	1a5b      	subs	r3, r3, r1
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000998:	fb00 f707 	mul.w	r7, r0, r7
 800099c:	42a7      	cmp	r7, r4
 800099e:	d90a      	bls.n	80009b6 <__udivmoddi4+0x92>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	f080 810a 	bcs.w	8000bc0 <__udivmoddi4+0x29c>
 80009ac:	42a7      	cmp	r7, r4
 80009ae:	f240 8107 	bls.w	8000bc0 <__udivmoddi4+0x29c>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ba:	1be4      	subs	r4, r4, r7
 80009bc:	2600      	movs	r6, #0
 80009be:	b11d      	cbz	r5, 80009c8 <__udivmoddi4+0xa4>
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	2300      	movs	r3, #0
 80009c4:	e9c5 4300 	strd	r4, r3, [r5]
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	428b      	cmp	r3, r1
 80009d0:	d909      	bls.n	80009e6 <__udivmoddi4+0xc2>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	f000 80ef 	beq.w	8000bb6 <__udivmoddi4+0x292>
 80009d8:	2600      	movs	r6, #0
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	4630      	mov	r0, r6
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	fab3 f683 	clz	r6, r3
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d14a      	bne.n	8000a84 <__udivmoddi4+0x160>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xd4>
 80009f2:	4282      	cmp	r2, r0
 80009f4:	f200 80f9 	bhi.w	8000bea <__udivmoddi4+0x2c6>
 80009f8:	1a84      	subs	r4, r0, r2
 80009fa:	eb61 0303 	sbc.w	r3, r1, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	469e      	mov	lr, r3
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d0e0      	beq.n	80009c8 <__udivmoddi4+0xa4>
 8000a06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a0a:	e7dd      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000a0c:	b902      	cbnz	r2, 8000a10 <__udivmoddi4+0xec>
 8000a0e:	deff      	udf	#255	; 0xff
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	f040 8092 	bne.w	8000b3e <__udivmoddi4+0x21a>
 8000a1a:	eba1 010c 	sub.w	r1, r1, ip
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2601      	movs	r6, #1
 8000a28:	0c20      	lsrs	r0, r4, #16
 8000a2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a36:	fb0e f003 	mul.w	r0, lr, r3
 8000a3a:	4288      	cmp	r0, r1
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x12c>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x12a>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2c0>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	1a09      	subs	r1, r1, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a58:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x156>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x154>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2ca>
 8000a78:	4608      	mov	r0, r1
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a82:	e79c      	b.n	80009be <__udivmoddi4+0x9a>
 8000a84:	f1c6 0720 	rsb	r7, r6, #32
 8000a88:	40b3      	lsls	r3, r6
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa20 f407 	lsr.w	r4, r0, r7
 8000a96:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9a:	431c      	orrs	r4, r3
 8000a9c:	40f9      	lsrs	r1, r7
 8000a9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000aa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aaa:	0c20      	lsrs	r0, r4, #16
 8000aac:	fa1f fe8c 	uxth.w	lr, ip
 8000ab0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ab4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab8:	fb08 f00e 	mul.w	r0, r8, lr
 8000abc:	4288      	cmp	r0, r1
 8000abe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b8>
 8000ac4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad0:	4288      	cmp	r0, r1
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4461      	add	r1, ip
 8000adc:	1a09      	subs	r1, r1, r0
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ae4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af0:	458e      	cmp	lr, r1
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1e2>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2b4>
 8000afe:	458e      	cmp	lr, r1
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2b4>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4461      	add	r1, ip
 8000b06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b0e:	eba1 010e 	sub.w	r1, r1, lr
 8000b12:	42a1      	cmp	r1, r4
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46a6      	mov	lr, r4
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x2a4>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x2a0>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x212>
 8000b1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b22:	eb61 010e 	sbc.w	r1, r1, lr
 8000b26:	fa01 f707 	lsl.w	r7, r1, r7
 8000b2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b2e:	40f1      	lsrs	r1, r6
 8000b30:	431f      	orrs	r7, r3
 8000b32:	e9c5 7100 	strd	r7, r1, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	f1c2 0320 	rsb	r3, r2, #32
 8000b42:	40d8      	lsrs	r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	fa21 f303 	lsr.w	r3, r1, r3
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	4301      	orrs	r1, r0
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b60:	0c0b      	lsrs	r3, r1, #16
 8000b62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b66:	fb00 f60e 	mul.w	r6, r0, lr
 8000b6a:	429e      	cmp	r6, r3
 8000b6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x260>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b8>
 8000b7c:	429e      	cmp	r6, r3
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b8>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1b9b      	subs	r3, r3, r6
 8000b86:	b289      	uxth	r1, r1
 8000b88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b94:	fb06 f30e 	mul.w	r3, r6, lr
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x28a>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2b0>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2b0>
 8000baa:	3e02      	subs	r6, #2
 8000bac:	4461      	add	r1, ip
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0x104>
 8000bb6:	462e      	mov	r6, r5
 8000bb8:	4628      	mov	r0, r5
 8000bba:	e705      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000bbc:	4606      	mov	r6, r0
 8000bbe:	e6e3      	b.n	8000988 <__udivmoddi4+0x64>
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	e6f8      	b.n	80009b6 <__udivmoddi4+0x92>
 8000bc4:	454b      	cmp	r3, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f8>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f8>
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x28a>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1e2>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x260>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b8>
 8000be4:	3b02      	subs	r3, #2
 8000be6:	4461      	add	r1, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x12c>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e709      	b.n	8000a02 <__udivmoddi4+0xde>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x156>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	ed87 0b00 	vstr	d0, [r7]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000c0a:	ec43 2b17 	vmov	d7, r2, r3
 8000c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000c12:	eef0 0a67 	vmov.f32	s1, s15
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_ZN4Math5clampEmmm>:
#pragma once

class Math {
	public:
		static uint32_t clamp(uint32_t value, uint32_t min, uint32_t max) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
			if (value < min)
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d202      	bcs.n	8000c3a <_ZN4Math5clampEmmm+0x1a>
				value = min;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e005      	b.n	8000c46 <_ZN4Math5clampEmmm+0x26>
			else if (value > max)
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d901      	bls.n	8000c46 <_ZN4Math5clampEmmm+0x26>
				value = max;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

			return value;
 8000c46:	68fb      	ldr	r3, [r7, #12]
		}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>:
#include <cmath>
#include "stm32f4xx_hal.h"

class AnalogPin {
	public:
		AnalogPin(ADC_HandleTypeDef* adc, uint32_t channel) :
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
			_adc(adc),
			_channel(channel)
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm+0x34>)
 8000c68:	e9c1 2300 	strd	r2, r3, [r1]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
		{

		}
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	bff00000 	.word	0xbff00000

08000c8c <_ZN9AnalogPin8getValueEv>:

		uint32_t getValue() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
			// Changing channel
			ADC_ChannelConfTypeDef channelConfig = {
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
				.Channel = _channel,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
				.Rank = 1,
				.SamplingTime = ADC_SAMPLETIME_28CYCLES,
			};
 8000cae:	60fb      	str	r3, [r7, #12]

			HAL_ADC_ConfigChannel(&hadc1, &channelConfig);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <_ZN9AnalogPin8getValueEv+0x68>)
 8000cb8:	f001 fad4 	bl	8002264 <HAL_ADC_ConfigChannel>

			// Reading value
			HAL_ADC_Start(_adc);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 f94f 	bl	8001f64 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(_adc, HAL_MAX_DELAY);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f04f 31ff 	mov.w	r1, #4294967295
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fa2f 	bl	8002132 <HAL_ADC_PollForConversion>
			uint32_t value = HAL_ADC_GetValue(_adc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fab5 	bl	8002248 <HAL_ADC_GetValue>
 8000cde:	61f8      	str	r0, [r7, #28]
			HAL_ADC_Stop(_adc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 f9f1 	bl	80020cc <HAL_ADC_Stop>

			return value;
 8000cea:	69fb      	ldr	r3, [r7, #28]
		}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000013c 	.word	0x2000013c

08000cf8 <_ZN9AnalogPin14getSmoothValueEhd>:

		uint32_t getSmoothValue(uint8_t deltaThreshold, double newValueFactor) {
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	460b      	mov	r3, r1
 8000d04:	ed87 0b00 	vstr	d0, [r7]
 8000d08:	72fb      	strb	r3, [r7, #11]
			double newValue = getValue();
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff ffbe 	bl	8000c8c <_ZN9AnalogPin8getValueEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fccc 	bl	80006b0 <__aeabi_ui2d>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			if (_lastValue < 0) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	f7ff fd99 	bl	8000864 <__aeabi_dcmplt>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <_ZN9AnalogPin14getSmoothValueEhd+0x4c>
				_lastValue = newValue;
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d3e:	e9c1 2300 	strd	r2, r3, [r1]
 8000d42:	e04b      	b.n	8000ddc <_ZN9AnalogPin14getSmoothValueEhd+0xe4>
			}
			else {
				if (std::abs(newValue - _lastValue) > deltaThreshold)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d4e:	f7ff fb71 	bl	8000434 <__aeabi_dsub>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	ec43 2b17 	vmov	d7, r2, r3
 8000d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d5e:	eef0 0a67 	vmov.f32	s1, s15
 8000d62:	f7ff ff49 	bl	8000bf8 <_ZSt3absd>
 8000d66:	ec55 4b10 	vmov	r4, r5, d0
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcaf 	bl	80006d0 <__aeabi_i2d>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	2101      	movs	r1, #1
 8000d78:	460e      	mov	r6, r1
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	f7ff fd8f 	bl	80008a0 <__aeabi_dcmpgt>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <_ZN9AnalogPin14getSmoothValueEhd+0x94>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	461e      	mov	r6, r3
 8000d8c:	b2f3      	uxtb	r3, r6
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d024      	beq.n	8000ddc <_ZN9AnalogPin14getSmoothValueEhd+0xe4>
					_lastValue = newValue * newValueFactor + _lastValue * (1 - newValueFactor);
 8000d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d9a:	f7ff fa1d 	bl	80001d8 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4690      	mov	r8, r2
 8000da4:	4699      	mov	r9, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4910      	ldr	r1, [pc, #64]	; (8000df8 <_ZN9AnalogPin14getSmoothValueEhd+0x100>)
 8000db6:	f7ff fb3d 	bl	8000434 <__aeabi_dsub>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	f7ff fa09 	bl	80001d8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4640      	mov	r0, r8
 8000dcc:	4649      	mov	r1, r9
 8000dce:	f7ff fb33 	bl	8000438 <__adddf3>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
			}

			return _lastValue;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fd65 	bl	80008b4 <__aeabi_d2uiz>
 8000dea:	4603      	mov	r3, r0
		}
 8000dec:	4618      	mov	r0, r3
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df6:	bf00      	nop
 8000df8:	3ff00000 	.word	0x3ff00000

08000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>:

#include "stm32f4xx_hal.h"

class DigitalPin {
	public:
		DigitalPin(GPIO_TypeDef* port, uint32_t pin) :
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
			_port(port),
			_pin(pin)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
		{

		}
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_ZN10DigitalPin8setValueEb>:

		void beginOutput() {
			begin(GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
		}

		void setValue(bool value) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(_port, _pin, value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	b299      	uxth	r1, r3
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <_ZN10DigitalPin8setValueEb+0x20>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <_ZN10DigitalPin8setValueEb+0x22>
 8000e42:	2301      	movs	r3, #1
 8000e44:	461a      	mov	r2, r3
 8000e46:	f002 f9d3 	bl	80031f0 <HAL_GPIO_WritePin>
		}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN10DigitalPin8getValueEv>:

		bool getValue() {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
			return HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_RESET;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	4610      	mov	r0, r2
 8000e68:	f002 f9aa 	bl	80031c0 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
		}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>:
#include "analog_pin.h"
#include "math.h"

class Potentiometer {
	public:
		Potentiometer(const AnalogPin& analogPin, uint32_t minimum, uint32_t maximum) :
 8000e80:	b490      	push	{r4, r7}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
			_analogPin(analogPin),
			_minimum(minimum),
			_maximum(maximum)
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4614      	mov	r4, r2
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	615a      	str	r2, [r3, #20]
		{

		}
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc90      	pop	{r4, r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	0000      	movs	r0, r0
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <_ZN13Potentiometer8getValueEv>:

		uint32_t getValue() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
			uint32_t pinValue = _analogPin.getSmoothValue(20, 0.005);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000f28 <_ZN13Potentiometer8getValueEv+0x70>
 8000ec6:	2114      	movs	r1, #20
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff15 	bl	8000cf8 <_ZN9AnalogPin14getSmoothValueEhd>
 8000ece:	6178      	str	r0, [r7, #20]

//			return pinValue;

			uint32_t clampedPinValue = Math::clamp(pinValue, _minimum, _maximum);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6919      	ldr	r1, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff fea0 	bl	8000c20 <_ZN4Math5clampEmmm>
 8000ee0:	6138      	str	r0, [r7, #16]
			float ratio = (float) (clampedPinValue - _minimum) / (float) (_maximum - _minimum);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f08:	edc7 7a03 	vstr	s15, [r7, #12]

			return (uint32_t) (ratio * 4096.0f);
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f30 <_ZN13Potentiometer8getValueEv+0x78>
 8000f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1c:	ee17 3a90 	vmov	r3, s15
		}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	47ae147b 	.word	0x47ae147b
 8000f2c:	3f747ae1 	.word	0x3f747ae1
 8000f30:	45800000 	.word	0x45800000

08000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>:
			pressed;
};

class Encoder {
	public:
		Encoder(const DigitalPin& clkPin, const DigitalPin& dtPin, const DigitalPin& swPin) :
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
			_clkPin(clkPin),
			_dtPin(dtPin),
			_swPin(swPin)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	3308      	adds	r3, #8
 8000f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	3310      	adds	r3, #16
 8000f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f66:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
		{
			_oldRotation = readRotation();
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f86f 	bl	8001054 <_ZN7Encoder12readRotationEv>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	761a      	strb	r2, [r3, #24]
		}
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN7Encoder8getStateEv>:

		EncoderState getState() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
			EncoderState state;
			state.left = false;
 8000f90:	2300      	movs	r3, #0
 8000f92:	723b      	strb	r3, [r7, #8]
			state.right = false;
 8000f94:	2300      	movs	r3, #0
 8000f96:	727b      	strb	r3, [r7, #9]
			state.pressed = _swPin.getValue();
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff58 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	72bb      	strb	r3, [r7, #10]

			auto rotation = readRotation();
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f854 	bl	8001054 <_ZN7Encoder12readRotationEv>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]

			if (rotation != _oldRotation) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e1b      	ldrb	r3, [r3, #24]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d034      	beq.n	8001024 <_ZN7Encoder8getStateEv+0x9c>
				switch (_oldRotation | (rotation << 2)) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7e1b      	ldrb	r3, [r3, #24]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d825      	bhi.n	8001016 <_ZN7Encoder8getStateEv+0x8e>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <_ZN7Encoder8getStateEv+0x48>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	0800101d 	.word	0x0800101d
 8000fd4:	08001011 	.word	0x08001011
 8000fd8:	08001017 	.word	0x08001017
 8000fdc:	08001011 	.word	0x08001011
 8000fe0:	08001017 	.word	0x08001017
 8000fe4:	0800101d 	.word	0x0800101d
 8000fe8:	08001017 	.word	0x08001017
 8000fec:	08001011 	.word	0x08001011
 8000ff0:	08001011 	.word	0x08001011
 8000ff4:	08001017 	.word	0x08001017
 8000ff8:	0800101d 	.word	0x0800101d
 8000ffc:	08001017 	.word	0x08001017
 8001000:	08001011 	.word	0x08001011
 8001004:	08001017 	.word	0x08001017
 8001008:	08001011 	.word	0x08001011
 800100c:	0800101d 	.word	0x0800101d

					// Button simulation
					case 0: case 5: case 10: case 15:
						break;
					case 1: case 7: case 8: case 14: case 3: case 12:
						state.right = true;
 8001010:	2301      	movs	r3, #1
 8001012:	727b      	strb	r3, [r7, #9]
						break;
 8001014:	e003      	b.n	800101e <_ZN7Encoder8getStateEv+0x96>
					default:
						state.left = true;
 8001016:	2301      	movs	r3, #1
 8001018:	723b      	strb	r3, [r7, #8]
						break;
 800101a:	e000      	b.n	800101e <_ZN7Encoder8getStateEv+0x96>
						break;
 800101c:	bf00      	nop

				}

				_oldRotation = rotation;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	761a      	strb	r2, [r3, #24]
			}


			return state;
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	f107 0208 	add.w	r2, r7, #8
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	4611      	mov	r1, r2
 8001030:	8019      	strh	r1, [r3, #0]
 8001032:	3302      	adds	r3, #2
 8001034:	0c12      	lsrs	r2, r2, #16
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	2300      	movs	r3, #0
 800103a:	7b3a      	ldrb	r2, [r7, #12]
 800103c:	f362 0307 	bfi	r3, r2, #0, #8
 8001040:	7b7a      	ldrb	r2, [r7, #13]
 8001042:	f362 230f 	bfi	r3, r2, #8, #8
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	f362 4317 	bfi	r3, r2, #16, #8
		}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN7Encoder12readRotationEv>:
		DigitalPin _clkPin;
		DigitalPin _dtPin;
		DigitalPin _swPin;
		uint8_t _oldRotation = 0;

		uint8_t readRotation() {
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
			return (_clkPin.getValue() << 1) | _dtPin.getValue();
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fef7 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8001064:	4603      	mov	r3, r0
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b25c      	sxtb	r4, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3308      	adds	r3, #8
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff feef 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8001074:	4603      	mov	r3, r0
 8001076:	b25b      	sxtb	r3, r3
 8001078:	4323      	orrs	r3, r4
 800107a:	b25b      	sxtb	r3, r3
 800107c:	b2db      	uxtb	r3, r3
		}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}

08001086 <_ZN22JoystickAbstractButtonC1ERK10DigitalPin>:
#include "../digital_pin.h"
#include "report_descriptor.h"

class JoystickAbstractButton {
	public:
		JoystickAbstractButton(const DigitalPin& pin) :
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
			_pin(pin)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	e883 0003 	stmia.w	r3, {r0, r1}
		{

		}
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN14JoystickButtonC1ERK10DigitalPin>:
		DigitalPin _pin;
};

class JoystickButton : public JoystickAbstractButton {
	public:
		JoystickButton(const DigitalPin& pin) : JoystickAbstractButton(pin) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffe4 	bl	8001086 <_ZN22JoystickAbstractButtonC1ERK10DigitalPin>

		}
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>:

		void updateReport(JoystickReportDescriptor& report, uint8_t& index) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
			report.buttons |= _pin.getValue() << index++;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff febb 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	b2d0      	uxtb	r0, r2
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	7010      	strb	r0, [r2, #0]
 80010ec:	fa01 f203 	lsl.w	r2, r1, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f8c3 200a 	str.w	r2, [r3, #10]
		}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN20JoystickToggleButtonC1ERK10DigitalPin>:
};

class JoystickToggleButton : public JoystickAbstractButton {
	public:
		JoystickToggleButton(const DigitalPin& pin) : JoystickAbstractButton(pin) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffb6 	bl	8001086 <_ZN22JoystickAbstractButtonC1ERK10DigitalPin>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	821a      	strh	r2, [r3, #16]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	749a      	strb	r2, [r3, #18]
			_lastPinValue = _pin.getValue();
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe8b 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	749a      	strb	r2, [r3, #18]
		}
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh>:

		void updateReport(JoystickReportDescriptor& report, uint8_t& index) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
			auto pinValue = _pin.getValue();
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe78 	bl	8000e52 <_ZN10DigitalPin8getValueEv>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
			auto time = HAL_GetTick();
 8001166:	f000 fe89 	bl	8001e7c <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

			if (pinValue != _lastPinValue) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	7c9b      	ldrb	r3, [r3, #18]
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	429a      	cmp	r2, r3
 8001174:	d014      	beq.n	80011a0 <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh+0x52>
				if (pinValue) {
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh+0x3e>
					_pressDeadline1 = time + _pressDuration;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8a1b      	ldrh	r3, [r3, #16]
 8001180:	461a      	mov	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	441a      	add	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	e006      	b.n	800119a <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh+0x4c>
				}
				else {
					_pressDeadline2 = time + _pressDuration;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8a1b      	ldrh	r3, [r3, #16]
 8001190:	461a      	mov	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	441a      	add	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	60da      	str	r2, [r3, #12]
				}

				_lastPinValue = pinValue;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	7dfa      	ldrb	r2, [r7, #23]
 800119e:	749a      	strb	r2, [r3, #18]
			}

			if (time >= _pressDeadline1)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d302      	bcc.n	80011b0 <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh+0x62>
				_pressDeadline1 = 0;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]

			if (time >= _pressDeadline2)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d302      	bcc.n	80011c0 <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh+0x72>
				_pressDeadline2 = 0;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]

			report.buttons |= (_pressDeadline1 > 0) << index++;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	b2d0      	uxtb	r0, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	7010      	strb	r0, [r2, #0]
 80011dc:	fa01 f203 	lsl.w	r2, r1, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f8c3 200a 	str.w	r2, [r3, #10]
			report.buttons |= (_pressDeadline2 > 0) << index++;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	b2d0      	uxtb	r0, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	7010      	strb	r0, [r2, #0]
 800120a:	fa01 f203 	lsl.w	r2, r1, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8001214:	431a      	orrs	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f8c3 200a 	str.w	r2, [r3, #10]
		}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN15JoystickEncoderC1ERK7Encoder>:
#include "../encoder.h"
#include "report_descriptor.h"

class JoystickEncoder {
	public:
		JoystickEncoder(const Encoder& encoder) : _encoder(encoder) {
 8001224:	b4b0      	push	{r4, r5, r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	22c8      	movs	r2, #200	; 0xc8
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	f103 040c 	add.w	r4, r3, #12
 8001248:	4615      	mov	r5, r2
 800124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001252:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		}
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bcb0      	pop	{r4, r5, r7}
 8001260:	4770      	bx	lr

08001262 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>:

		void updateReport(JoystickReportDescriptor& report, uint8_t& index) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
			auto state = _encoder.getState();
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	330c      	adds	r3, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe88 	bl	8000f88 <_ZN7Encoder8getStateEv>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	743a      	strb	r2, [r7, #16]
 800127e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001282:	747a      	strb	r2, [r7, #17]
 8001284:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001288:	74bb      	strb	r3, [r7, #18]
			auto time = HAL_GetTick();
 800128a:	f000 fdf7 	bl	8001e7c <HAL_GetTick>
 800128e:	6178      	str	r0, [r7, #20]

			// Left
			if (state.left) {
 8001290:	7c3b      	ldrb	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x42>
				_leftDeadline = time + _interval;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	441a      	add	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x52>
			}
			else if (time >= _leftDeadline) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d302      	bcc.n	80012b4 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x52>
				_leftDeadline = 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
			}

			// Right
			if (state.right) {
 80012b4:	7c7b      	ldrb	r3, [r7, #17]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x66>
				_rightDeadline = time + _interval;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	441a      	add	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	e007      	b.n	80012d8 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x76>
			}
			else if (time >= _rightDeadline) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh+0x76>
				_rightDeadline = 0;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
			}

			report.buttons |= (_leftDeadline > 0) << index++;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	b2d0      	uxtb	r0, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	7010      	strb	r0, [r2, #0]
 80012f4:	fa01 f203 	lsl.w	r2, r1, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80012fe:	431a      	orrs	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f8c3 200a 	str.w	r2, [r3, #10]
			report.buttons |= state.pressed << index++;
 8001306:	7cbb      	ldrb	r3, [r7, #18]
 8001308:	4619      	mov	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	b2d0      	uxtb	r0, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	7010      	strb	r0, [r2, #0]
 8001316:	fa01 f203 	lsl.w	r2, r1, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8001320:	431a      	orrs	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f8c3 200a 	str.w	r2, [r3, #10]
			report.buttons |= (_rightDeadline > 0) << index++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	b2d0      	uxtb	r0, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	7010      	strb	r0, [r2, #0]
 8001344:	fa01 f203 	lsl.w	r2, r1, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800134e:	431a      	orrs	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f8c3 200a 	str.w	r2, [r3, #10]
		}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <_ZN8JoystickC1Ev>:
#include "button.h"
#include "encoder.h"

class Joystick {
	public:
		Joystick() {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b0cd      	sub	sp, #308	; 0x134
 8001364:	af00      	add	r7, sp, #0
 8001366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800136a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f103 0410 	add.w	r4, r3, #16
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	49c6      	ldr	r1, [pc, #792]	; (80016a0 <_ZN8JoystickC1Ev+0x340>)
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc64 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 800138c:	f107 0108 	add.w	r1, r7, #8
 8001390:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001394:	f240 6279 	movw	r2, #1657	; 0x679
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fd71 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 800139e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	2201      	movs	r2, #1
 80013b2:	49bb      	ldr	r1, [pc, #748]	; (80016a0 <_ZN8JoystickC1Ev+0x340>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc4d 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 80013ba:	f107 0118 	add.w	r1, r7, #24
 80013be:	f640 3372 	movw	r3, #2930	; 0xb72
 80013c2:	f240 62a5 	movw	r2, #1701	; 0x6a5
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff fd5a 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 80013cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2202      	movs	r2, #2
 80013e0:	49af      	ldr	r1, [pc, #700]	; (80016a0 <_ZN8JoystickC1Ev+0x340>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc36 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 80013e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013ec:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80013f0:	f240 62b5 	movw	r2, #1717	; 0x6b5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fd43 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 80013fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140c:	2203      	movs	r2, #3
 800140e:	49a4      	ldr	r1, [pc, #656]	; (80016a0 <_ZN8JoystickC1Ev+0x340>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc1f 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001416:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800141a:	f640 3386 	movw	r3, #2950	; 0xb86
 800141e:	f240 6292 	movw	r2, #1682	; 0x692
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fd2c 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8001428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800142c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001436:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800143a:	2204      	movs	r2, #4
 800143c:	4998      	ldr	r1, [pc, #608]	; (80016a0 <_ZN8JoystickC1Ev+0x340>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc08 	bl	8000c54 <_ZN9AnalogPinC1EP17ADC_HandleTypeDefm>
 8001444:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	2200      	movs	r2, #0
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fd16 	bl	8000e80 <_ZN13PotentiometerC1ERK9AnalogPinmm>
 8001454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001462:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001466:	2210      	movs	r2, #16
 8001468:	498e      	ldr	r1, [pc, #568]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fcc6 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001470:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001474:	2220      	movs	r2, #32
 8001476:	498b      	ldr	r1, [pc, #556]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fcbf 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800147e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	4987      	ldr	r1, [pc, #540]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fcb8 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800148c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001490:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001494:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001498:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800149c:	f7ff fd4a 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 80014a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a4:	4619      	mov	r1, r3
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff febc 	bl	8001224 <_ZN15JoystickEncoderC1ERK7Encoder>
 80014ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80014ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	4978      	ldr	r1, [pc, #480]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc9a 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d0:	4974      	ldr	r1, [pc, #464]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc92 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	4970      	ldr	r1, [pc, #448]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fc8a 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80014e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014ec:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80014f0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80014f4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80014f8:	f7ff fd1c 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 80014fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001500:	4619      	mov	r1, r3
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fe8e 	bl	8001224 <_ZN15JoystickEncoderC1ERK7Encoder>
 8001508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800150c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001516:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800151a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800151e:	4961      	ldr	r1, [pc, #388]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fc6b 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001526:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	495d      	ldr	r1, [pc, #372]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc63 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001536:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	4959      	ldr	r1, [pc, #356]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc5b 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001546:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800154a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800154e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001552:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001556:	f7ff fced 	bl	8000f34 <_ZN7EncoderC1ERK10DigitalPinS2_S2_>
 800155a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800155e:	4619      	mov	r1, r3
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fe5f 	bl	8001224 <_ZN15JoystickEncoderC1ERK7Encoder>
 8001566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800156a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8001574:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157c:	494a      	ldr	r1, [pc, #296]	; (80016a8 <_ZN8JoystickC1Ev+0x348>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc3c 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001584:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001588:	4619      	mov	r1, r3
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fdbb 	bl	8001106 <_ZN20JoystickToggleButtonC1ERK10DigitalPin>
 8001590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 748a 	add.w	r4, r3, #276	; 0x114
 800159e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a6:	4940      	ldr	r1, [pc, #256]	; (80016a8 <_ZN8JoystickC1Ev+0x348>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fc27 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80015ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015b2:	4619      	mov	r1, r3
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff fda6 	bl	8001106 <_ZN20JoystickToggleButtonC1ERK10DigitalPin>
 80015ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80015c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <_ZN8JoystickC1Ev+0x348>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc12 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 80015d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015dc:	4619      	mov	r1, r3
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fd91 	bl	8001106 <_ZN20JoystickToggleButtonC1ERK10DigitalPin>
 80015e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80015f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f6:	2208      	movs	r2, #8
 80015f8:	492a      	ldr	r1, [pc, #168]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbfe 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001600:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001604:	4619      	mov	r1, r3
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fd7d 	bl	8001106 <_ZN20JoystickToggleButtonC1ERK10DigitalPin>
 800160c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800161a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	4920      	ldr	r1, [pc, #128]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fbe9 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800162a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fd3a 	bl	80010aa <_ZN14JoystickButtonC1ERK10DigitalPin>
 8001636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800163a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 8001644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800164c:	4916      	ldr	r1, [pc, #88]	; (80016a8 <_ZN8JoystickC1Ev+0x348>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fbd4 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001658:	4619      	mov	r1, r3
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fd25 	bl	80010aa <_ZN14JoystickButtonC1ERK10DigitalPin>
 8001660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 800166e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001672:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001676:	490b      	ldr	r1, [pc, #44]	; (80016a4 <_ZN8JoystickC1Ev+0x344>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fbbf 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 800167e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fd10 	bl	80010aa <_ZN14JoystickButtonC1ERK10DigitalPin>

		}
 800168a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800168e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000013c 	.word	0x2000013c
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020000 	.word	0x40020000

080016ac <_ZN8Joystick4tickEv>:

		void tick() {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
			updateReportAxis();
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f80c 	bl	80016d2 <_ZN8Joystick16updateReportAxisEv>
			updateReportButtons();
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f83e 	bl	800173c <_ZN8Joystick19updateReportButtonsEv>

			SendGovnoReport((uint8_t*) &_report, sizeof(JoystickReportDescriptor));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	210e      	movs	r1, #14
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 ff51 	bl	800856c <SendGovnoReport>
		}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN8Joystick16updateReportAxisEv>:
		JoystickButton
			_button1 = JoystickButton(DigitalPin(GPIOB, GPIO_PIN_10)),
			_button2 = JoystickButton(DigitalPin(GPIOA, GPIO_PIN_15)),
			_button3 = JoystickButton(DigitalPin(GPIOB, GPIO_PIN_15));

		void updateReportAxis() {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
			_report.x = _speedBrake.getValue();
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3310      	adds	r3, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fbea 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	801a      	strh	r2, [r3, #0]
			_report.y = _throttle1.getValue();
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3328      	adds	r3, #40	; 0x28
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fbe1 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	805a      	strh	r2, [r3, #2]
			_report.z = _throttle2.getValue();
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3340      	adds	r3, #64	; 0x40
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fbd8 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	809a      	strh	r2, [r3, #4]
			_report.rx = _flaps.getValue();
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3358      	adds	r3, #88	; 0x58
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fbcf 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	80da      	strh	r2, [r3, #6]
			_report.ry = _trimWheel.getValue();
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3370      	adds	r3, #112	; 0x70
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fbc6 	bl	8000eb8 <_ZN13Potentiometer8getValueEv>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	811a      	strh	r2, [r3, #8]
		}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN8Joystick19updateReportButtonsEv>:

		void updateReportButtons() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
			uint8_t index = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

			_report.buttons = 0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	815a      	strh	r2, [r3, #10]
 800174e:	2200      	movs	r2, #0
 8001750:	819a      	strh	r2, [r3, #12]

			_toggle1.updateReport(_report, index);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	f107 020f 	add.w	r2, r7, #15
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fcf5 	bl	800114e <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh>
			_toggle2.updateReport(_report, index);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f107 020f 	add.w	r2, r7, #15
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fcec 	bl	800114e <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh>
			_toggle3.updateReport(_report, index);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	f107 020f 	add.w	r2, r7, #15
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fce3 	bl	800114e <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh>

			_encoder1.updateReport(_report, index);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3388      	adds	r3, #136	; 0x88
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	f107 020f 	add.w	r2, r7, #15
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd65 	bl	8001262 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>
			_encoder2.updateReport(_report, index);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	33b0      	adds	r3, #176	; 0xb0
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	f107 020f 	add.w	r2, r7, #15
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd5d 	bl	8001262 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>
			_encoder3.updateReport(_report, index);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	33d8      	adds	r3, #216	; 0xd8
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	f107 020f 	add.w	r2, r7, #15
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd55 	bl	8001262 <_ZN15JoystickEncoder12updateReportER24JoystickReportDescriptorRh>

			_button1.updateReport(_report, index);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f107 020f 	add.w	r2, r7, #15
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc7f 	bl	80010c8 <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_button2.updateReport(_report, index);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	f107 020f 	add.w	r2, r7, #15
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc76 	bl	80010c8 <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>
			_button3.updateReport(_report, index);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f107 020f 	add.w	r2, r7, #15
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc6d 	bl	80010c8 <_ZN14JoystickButton12updateReportER24JoystickReportDescriptorRh>

			_landingGear.updateReport(_report, index);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	f107 020f 	add.w	r2, r7, #15
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fca7 	bl	800114e <_ZN20JoystickToggleButton12updateReportER24JoystickReportDescriptorRh>
		}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_Z8yobaMainv>:
#include "digital_pin.h"

Joystick joystick = Joystick();
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);

void yobaMain() {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	LEDPin.setValue(true);
 800180c:	2101      	movs	r1, #1
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <_Z8yobaMainv+0x14>)
 8001810:	f7ff fb07 	bl	8000e22 <_ZN10DigitalPin8setValueEb>

	while (true) {
		joystick.tick();
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <_Z8yobaMainv+0x18>)
 8001816:	f7ff ff49 	bl	80016ac <_ZN8Joystick4tickEv>
 800181a:	e7fb      	b.n	8001814 <_Z8yobaMainv+0xc>
 800181c:	20000350 	.word	0x20000350
 8001820:	200001e8 	.word	0x200001e8

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001828:	f000 fac2 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182c:	f000 f80c 	bl	8001848 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001830:	f000 f8f8 	bl	8001a24 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001834:	f000 f87a 	bl	800192c <_ZL12MX_ADC1_Initv>
  MX_DMA_Init();
 8001838:	f000 f8d4 	bl	80019e4 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 800183c:	f006 fea8 	bl	8008590 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  yobaMain();
 8001840:	f7ff ffe2 	bl	8001808 <_Z8yobaMainv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001844:	e7fe      	b.n	8001844 <main+0x20>
	...

08001848 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f007 fb1e 	bl	8008e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <_Z18SystemClock_Configv+0xdc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <_Z18SystemClock_Configv+0xdc>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <_Z18SystemClock_Configv+0xdc>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <_Z18SystemClock_Configv+0xe0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a25      	ldr	r2, [pc, #148]	; (8001928 <_Z18SystemClock_Configv+0xe0>)
 8001892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <_Z18SystemClock_Configv+0xe0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80018b8:	230f      	movs	r3, #15
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80018bc:	2390      	movs	r3, #144	; 0x90
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018c4:	2305      	movs	r3, #5
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 ff0d 	bl	80046ec <HAL_RCC_OscConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80018e2:	f000 f91d 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2101      	movs	r1, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f96a 	bl	8004bdc <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001918:	f000 f902 	bl	8001b20 <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	; 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <_ZL12MX_ADC1_Initv+0xb0>)
 8001942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001958:	2201      	movs	r2, #1
 800195a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001966:	2200      	movs	r2, #0
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <_ZL12MX_ADC1_Initv+0xb4>)
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001978:	2201      	movs	r2, #1
 800197a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 8001986:	2201      	movs	r2, #1
 8001988:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198a:	4813      	ldr	r0, [pc, #76]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 800198c:	f000 faa6 	bl	8001edc <HAL_ADC_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80019a0:	f000 f8be 	bl	8001b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <_ZL12MX_ADC1_Initv+0xac>)
 80019b6:	f000 fc55 	bl	8002264 <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80019ca:	f000 f8a9 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000013c 	.word	0x2000013c
 80019dc:	40012000 	.word	0x40012000
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <_ZL11MX_DMA_Initv+0x3c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <_ZL11MX_DMA_Initv+0x3c>)
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <_ZL11MX_DMA_Initv+0x3c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2038      	movs	r0, #56	; 0x38
 8001a0c:	f000 ff33 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f000 ff4c 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <_ZL12MX_GPIO_Initv+0xec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab0:	4818      	ldr	r0, [pc, #96]	; (8001b14 <_ZL12MX_GPIO_Initv+0xf0>)
 8001ab2:	f001 fb9d 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <_ZL12MX_GPIO_Initv+0xf0>)
 8001ad0:	f001 f9f2 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001ad4:	f24f 73f8 	movw	r3, #63480	; 0xf7f8
 8001ad8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <_ZL12MX_GPIO_Initv+0xf4>)
 8001aea:	f001 f9e5 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001aee:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <_ZL12MX_GPIO_Initv+0xf8>)
 8001b04:	f001 f9d8 	bl	8002eb8 <HAL_GPIO_Init>

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020000 	.word	0x40020000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10d      	bne.n	8001b58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d108      	bne.n	8001b58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Joystick joystick = Joystick();
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b48:	f7ff fc0a 	bl	8001360 <_ZN8JoystickC1Ev>
DigitalPin LEDPin = DigitalPin(GPIOC, GPIO_PIN_13);
 8001b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001b54:	f7ff f952 	bl	8000dfc <_ZN10DigitalPinC1EP12GPIO_TypeDefm>
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001e8 	.word	0x200001e8
 8001b64:	40020800 	.word	0x40020800
 8001b68:	20000350 	.word	0x20000350

08001b6c <_GLOBAL__sub_I_hadc1>:
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff ffd9 	bl	8001b2c <_Z41__static_initialization_and_destruction_0ii>
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <HAL_ADC_MspInit+0xdc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d157      	bne.n	8001c9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_ADC_MspInit+0xe0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c26:	231f      	movs	r3, #31
 8001c28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	481d      	ldr	r0, [pc, #116]	; (8001cb0 <HAL_ADC_MspInit+0xe4>)
 8001c3a:	f001 f93d 	bl	8002eb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c40:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <HAL_ADC_MspInit+0xec>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c82:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c84:	f000 fe2e 	bl	80028e4 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c8e:	f7ff ff47 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_ADC_MspInit+0xe8>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	20000184 	.word	0x20000184
 8001cb8:	40026410 	.word	0x40026410

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f8a4 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA2_Stream0_IRQHandler+0x10>)
 8001d16:	f000 fe93 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000184 	.word	0x20000184

08001d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <OTG_FS_IRQHandler+0x10>)
 8001d2a:	f001 fbca 	bl	80034c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000083c 	.word	0x2000083c

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d62:	490e      	ldr	r1, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d78:	4c0b      	ldr	r4, [pc, #44]	; (8001da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d86:	f7ff ffd7 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f007 f861 	bl	8008e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8e:	f7ff fd49 	bl	8001824 <main>
  bx  lr    
 8001d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001da0:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 8001da4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001da8:	20000da0 	.word	0x20000da0

08001dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_Init+0x40>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_Init+0x40>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_Init+0x40>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 fd41 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	200f      	movs	r0, #15
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff feca 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fd59 	bl	80028ca <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 fd21 	bl	8002876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000358 	.word	0x20000358

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000358 	.word	0x20000358

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008

08001edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e033      	b.n	8001f5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fe66 	bl	8001bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f22:	f023 0302 	bic.w	r3, r3, #2
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 faca 	bl	80024c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4a:	e001      	b.n	8001f50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Start+0x1a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e097      	b.n	80020ae <HAL_ADC_Start+0x14a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d018      	beq.n	8001fc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_ADC_Start+0x158>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a45      	ldr	r2, [pc, #276]	; (80020c0 <HAL_ADC_Start+0x15c>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9a      	lsrs	r2, r3, #18
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d15f      	bne.n	8002094 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	d106      	bne.n	8002022 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f023 0206 	bic.w	r2, r3, #6
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
 8002020:	e002      	b.n	8002028 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_ADC_Start+0x160>)
 8002032:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800203c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d129      	bne.n	80020ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e020      	b.n	80020ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_ADC_Start+0x164>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d11b      	bne.n	80020ac <HAL_ADC_Start+0x148>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d114      	bne.n	80020ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	e00b      	b.n	80020ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	40012300 	.word	0x40012300
 80020c8:	40012000 	.word	0x40012000

080020cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Stop+0x16>
 80020de:	2302      	movs	r3, #2
 80020e0:	e021      	b.n	8002126 <HAL_ADC_Stop+0x5a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214e:	d113      	bne.n	8002178 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d10b      	bne.n	8002178 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e063      	b.n	8002240 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002178:	f7ff fe80 	bl	8001e7c <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800217e:	e021      	b.n	80021c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d01d      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_PollForConversion+0x6c>
 800218e:	f7ff fe75 	bl	8001e7c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d212      	bcs.n	80021c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d00b      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d1d6      	bne.n	8002180 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0212 	mvn.w	r2, #18
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d123      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11f      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d111      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1c>
 800227c:	2302      	movs	r3, #2
 800227e:	e113      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x244>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d925      	bls.n	80022dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4403      	add	r3, r0
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	409a      	lsls	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e022      	b.n	8002322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	2207      	movs	r2, #7
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	4603      	mov	r3, r0
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4403      	add	r3, r0
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d824      	bhi.n	8002374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b05      	subs	r3, #5
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b05      	subs	r3, #5
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
 8002372:	e04c      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d824      	bhi.n	80023c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b23      	subs	r3, #35	; 0x23
 800238e:	221f      	movs	r2, #31
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b23      	subs	r3, #35	; 0x23
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
 80023c4:	e023      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b41      	subs	r3, #65	; 0x41
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b41      	subs	r3, #65	; 0x41
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_ADC_ConfigChannel+0x250>)
 8002410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_ADC_ConfigChannel+0x254>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10f      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d8>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d10b      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <HAL_ADC_ConfigChannel+0x254>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d12b      	bne.n	800249e <HAL_ADC_ConfigChannel+0x23a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_ADC_ConfigChannel+0x258>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_ADC_ConfigChannel+0x1f4>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b11      	cmp	r3, #17
 8002456:	d122      	bne.n	800249e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_ADC_ConfigChannel+0x258>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d111      	bne.n	800249e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_ADC_ConfigChannel+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_ADC_ConfigChannel+0x260>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	0c9a      	lsrs	r2, r3, #18
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002490:	e002      	b.n	8002498 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40012300 	.word	0x40012300
 80024b8:	40012000 	.word	0x40012000
 80024bc:	10000012 	.word	0x10000012
 80024c0:	20000000 	.word	0x20000000
 80024c4:	431bde83 	.word	0x431bde83

080024c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d0:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <ADC_Init+0x1f0>)
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	4a58      	ldr	r2, [pc, #352]	; (80026bc <ADC_Init+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800256e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e00f      	b.n	80025c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0202 	bic.w	r2, r2, #2
 80025d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7e1b      	ldrb	r3, [r3, #24]
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002602:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	3b01      	subs	r3, #1
 8002620:	035a      	lsls	r2, r3, #13
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e007      	b.n	800263c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800263a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	3b01      	subs	r3, #1
 8002658:	051a      	lsls	r2, r3, #20
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800267e:	025a      	lsls	r2, r3, #9
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	029a      	lsls	r2, r3, #10
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40012300 	.word	0x40012300
 80026bc:	0f000001 	.word	0x0f000001

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff29 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff3e 	bl	8002708 <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff8e 	bl	80027b4 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff31 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa2 	bl	800281c <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fac4 	bl	8001e7c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e099      	b.n	8002a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002920:	e00f      	b.n	8002942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002922:	f7ff faab 	bl	8001e7c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b05      	cmp	r3, #5
 800292e:	d908      	bls.n	8002942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e078      	b.n	8002a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e8      	bne.n	8002922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_DMA_Init+0x158>)
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4313      	orrs	r3, r2
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d117      	bne.n	8002a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9e9 	bl	8002dc0 <DMA_CheckFifoParam>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a02:	2301      	movs	r3, #1
 8002a04:	e016      	b.n	8002a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f9a0 	bl	8002d54 <DMA_CalcBaseAndBitshift>
 8002a14:	4603      	mov	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	223f      	movs	r2, #63	; 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	f010803f 	.word	0xf010803f

08002a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a4c:	4b8e      	ldr	r3, [pc, #568]	; (8002c88 <HAL_DMA_IRQHandler+0x248>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a8e      	ldr	r2, [pc, #568]	; (8002c8c <HAL_DMA_IRQHandler+0x24c>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01a      	beq.n	8002aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	2208      	movs	r2, #8
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2201      	movs	r2, #1
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2204      	movs	r2, #4
 8002b06:	409a      	lsls	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d043      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d024      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e01f      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e016      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0208 	bic.w	r2, r2, #8
 8002b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 808f 	beq.w	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8087 	beq.w	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d136      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0216 	bic.w	r2, r2, #22
 8002bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x1da>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0208 	bic.w	r2, r2, #8
 8002c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	223f      	movs	r2, #63	; 0x3f
 8002c30:	409a      	lsls	r2, r3
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d07e      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
        }
        return;
 8002c56:	e079      	b.n	8002d4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d031      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
 8002c84:	e02c      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d023      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
 8002ca0:	e01e      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0210 	bic.w	r2, r2, #16
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d032      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2205      	movs	r2, #5
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d307      	bcc.n	8002d28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f2      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x2cc>
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
 8002d4a:	e000      	b.n	8002d4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3b10      	subs	r3, #16
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <DMA_CalcBaseAndBitshift+0x68>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d909      	bls.n	8002d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	1d1a      	adds	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58
 8002d94:	e007      	b.n	8002da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	aaaaaaab 	.word	0xaaaaaaab
 8002dbc:	08008f30 	.word	0x08008f30

08002dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11f      	bne.n	8002e1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d856      	bhi.n	8002e8e <DMA_CheckFifoParam+0xce>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <DMA_CheckFifoParam+0x28>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e0b 	.word	0x08002e0b
 8002df0:	08002df9 	.word	0x08002df9
 8002df4:	08002e8f 	.word	0x08002e8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d046      	beq.n	8002e92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e08:	e043      	b.n	8002e92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e12:	d140      	bne.n	8002e96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e18:	e03d      	b.n	8002e96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e22:	d121      	bne.n	8002e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d837      	bhi.n	8002e9a <DMA_CheckFifoParam+0xda>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <DMA_CheckFifoParam+0x70>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e47 	.word	0x08002e47
 8002e38:	08002e41 	.word	0x08002e41
 8002e3c:	08002e59 	.word	0x08002e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      break;
 8002e44:	e030      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d025      	beq.n	8002e9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e56:	e022      	b.n	8002e9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e60:	d11f      	bne.n	8002ea2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e66:	e01c      	b.n	8002ea2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d903      	bls.n	8002e76 <DMA_CheckFifoParam+0xb6>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d003      	beq.n	8002e7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e74:	e018      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7a:	e015      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e00b      	b.n	8002ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e00a      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8002e92:	bf00      	nop
 8002e94:	e008      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8002e96:	bf00      	nop
 8002e98:	e006      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e004      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e159      	b.n	8003188 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8148 	bne.w	8003182 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d005      	beq.n	8002f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d017      	beq.n	8002fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a2 	beq.w	8003182 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_GPIO_Init+0x2e8>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_GPIO_Init+0x2e8>)
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_GPIO_Init+0x2e8>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800305a:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_GPIO_Init+0x2ec>)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3302      	adds	r3, #2
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_GPIO_Init+0x2f0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d019      	beq.n	80030ba <HAL_GPIO_Init+0x202>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_GPIO_Init+0x2f4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_GPIO_Init+0x1fe>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_GPIO_Init+0x2f8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00d      	beq.n	80030b2 <HAL_GPIO_Init+0x1fa>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a46      	ldr	r2, [pc, #280]	; (80031b4 <HAL_GPIO_Init+0x2fc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x1f6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_GPIO_Init+0x300>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x1f2>
 80030a6:	2304      	movs	r3, #4
 80030a8:	e008      	b.n	80030bc <HAL_GPIO_Init+0x204>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x204>
 80030ae:	2303      	movs	r3, #3
 80030b0:	e004      	b.n	80030bc <HAL_GPIO_Init+0x204>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_Init+0x204>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_GPIO_Init+0x204>
 80030ba:	2300      	movs	r3, #0
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f002 0203 	and.w	r2, r2, #3
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	4093      	lsls	r3, r2
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030cc:	4935      	ldr	r1, [pc, #212]	; (80031a4 <HAL_GPIO_Init+0x2ec>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_GPIO_Init+0x304>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <HAL_GPIO_Init+0x304>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_GPIO_Init+0x304>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_GPIO_Init+0x304>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_GPIO_Init+0x304>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003152:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <HAL_GPIO_Init+0x304>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <HAL_GPIO_Init+0x304>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_GPIO_Init+0x304>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	f67f aea2 	bls.w	8002ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003224:	b08f      	sub	sp, #60	; 0x3c
 8003226:	af0a      	add	r7, sp, #40	; 0x28
 8003228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e10f      	b.n	8003454 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f005 fb06 	bl	8008860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f001 ff7f 	bl	8005176 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	687e      	ldr	r6, [r7, #4]
 8003280:	466d      	mov	r5, sp
 8003282:	f106 0410 	add.w	r4, r6, #16
 8003286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003292:	e885 0003 	stmia.w	r5, {r0, r1}
 8003296:	1d33      	adds	r3, r6, #4
 8003298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329a:	6838      	ldr	r0, [r7, #0]
 800329c:	f001 fe56 	bl	8004f4c <USB_CoreInit>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0d0      	b.n	8003454 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 ff6d 	bl	8005198 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e04a      	b.n	800335a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	333d      	adds	r3, #61	; 0x3d
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	333c      	adds	r3, #60	; 0x3c
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	b298      	uxth	r0, r3
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3344      	adds	r3, #68	; 0x44
 8003300:	4602      	mov	r2, r0
 8003302:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3340      	adds	r3, #64	; 0x40
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3348      	adds	r3, #72	; 0x48
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334c      	adds	r3, #76	; 0x4c
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3354      	adds	r3, #84	; 0x54
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3301      	adds	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3af      	bcc.n	80032c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e044      	b.n	80033f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3301      	adds	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3b5      	bcc.n	800336a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	687e      	ldr	r6, [r7, #4]
 8003406:	466d      	mov	r5, sp
 8003408:	f106 0410 	add.w	r4, r6, #16
 800340c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003418:	e885 0003 	stmia.w	r5, {r0, r1}
 800341c:	1d33      	adds	r3, r6, #4
 800341e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003420:	6838      	ldr	r0, [r7, #0]
 8003422:	f001 ff05 	bl	8005230 <USB_DevInit>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e00d      	b.n	8003454 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 f854 	bl	80064fa <USB_DevDisconnect>

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800345c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_PCD_Start+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e020      	b.n	80034ba <HAL_PCD_Start+0x5e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	2b01      	cmp	r3, #1
 8003486:	d109      	bne.n	800349c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fe57 	bl	8005154 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 f804 	bl	80064b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034c2:	b590      	push	{r4, r7, lr}
 80034c4:	b08d      	sub	sp, #52	; 0x34
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 f8c2 	bl	8006662 <USB_GetMode>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 848a 	bne.w	8003dfa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 f826 	bl	800653c <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8480 	beq.w	8003df8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 f813 	bl	800653c <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d107      	bne.n	8003530 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f002 0202 	and.w	r2, r2, #2
 800352e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 f801 	bl	800653c <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d161      	bne.n	8003608 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0210 	bic.w	r2, r2, #16
 8003552:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	0c5b      	lsrs	r3, r3, #17
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2b02      	cmp	r3, #2
 800357e:	d124      	bne.n	80035ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d035      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359a:	b29b      	uxth	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	6a38      	ldr	r0, [r7, #32]
 80035a0:	f002 fe38 	bl	8006214 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b0:	441a      	add	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035c2:	441a      	add	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
 80035c8:	e016      	b.n	80035f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	0c5b      	lsrs	r3, r3, #17
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d110      	bne.n	80035f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035dc:	2208      	movs	r2, #8
 80035de:	4619      	mov	r1, r3
 80035e0:	6a38      	ldr	r0, [r7, #32]
 80035e2:	f002 fe17 	bl	8006214 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f2:	441a      	add	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0210 	orr.w	r2, r2, #16
 8003606:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f002 ff95 	bl	800653c <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003618:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800361c:	f040 80a7 	bne.w	800376e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f002 ff9a 	bl	8006562 <USB_ReadDevAllOutEpInterrupt>
 800362e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003630:	e099      	b.n	8003766 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808e 	beq.w	800375a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f002 ffbe 	bl	80065ca <USB_ReadDevOutEPInterrupt>
 800364e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	2301      	movs	r3, #1
 800366a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 feaa 	bl	80043c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2308      	movs	r3, #8
 800368e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 ff80 	bl	8004598 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	461a      	mov	r2, r3
 80036b0:	2310      	movs	r3, #16
 80036b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d030      	beq.n	8003720 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d109      	bne.n	80036de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	3304      	adds	r3, #4
 80036f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	78db      	ldrb	r3, [r3, #3]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d108      	bne.n	800370e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	b2db      	uxtb	r3, r3
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 f9a5 	bl	8008a58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	461a      	mov	r2, r3
 800371c:	2302      	movs	r3, #2
 800371e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	461a      	mov	r2, r3
 8003738:	2320      	movs	r3, #32
 800373a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	461a      	mov	r2, r3
 8003754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003758:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af62 	bne.w	8003632 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fee2 	bl	800653c <USB_ReadInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003782:	f040 80db 	bne.w	800393c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 ff03 	bl	8006596 <USB_ReadDevAllInEpInterrupt>
 8003790:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003796:	e0cd      	b.n	8003934 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80c2 	beq.w	8003928 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 ff29 	bl	8006606 <USB_ReadDevInEPInterrupt>
 80037b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d057      	beq.n	8003870 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	2201      	movs	r2, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e0:	4013      	ands	r3, r2
 80037e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	2301      	movs	r3, #1
 80037f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d132      	bne.n	8003864 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	334c      	adds	r3, #76	; 0x4c
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	3348      	adds	r3, #72	; 0x48
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4419      	add	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	334c      	adds	r3, #76	; 0x4c
 8003834:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d113      	bne.n	8003864 <HAL_PCD_IRQHandler+0x3a2>
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3354      	adds	r3, #84	; 0x54
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800385c:	461a      	mov	r2, r3
 800385e:	2101      	movs	r1, #1
 8003860:	f002 ff30 	bl	80066c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f005 f879 	bl	8008962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	461a      	mov	r2, r3
 8003888:	2308      	movs	r3, #8
 800388a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a2:	461a      	mov	r2, r3
 80038a4:	2310      	movs	r3, #16
 80038a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038be:	461a      	mov	r2, r3
 80038c0:	2340      	movs	r3, #64	; 0x40
 80038c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d023      	beq.n	8003916 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d0:	6a38      	ldr	r0, [r7, #32]
 80038d2:	f001 fe11 	bl	80054f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	3338      	adds	r3, #56	; 0x38
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	78db      	ldrb	r3, [r3, #3]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f005 f8bc 	bl	8008a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	461a      	mov	r2, r3
 8003912:	2302      	movs	r3, #2
 8003914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fcc3 	bl	80042ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	3301      	adds	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	f47f af2e 	bne.w	8003798 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f002 fdfb 	bl	800653c <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800394c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003950:	d122      	bne.n	8003998 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800396c:	2b01      	cmp	r3, #1
 800396e:	d108      	bne.n	8003982 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003978:	2100      	movs	r1, #0
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 feaa 	bl	80046d4 <HAL_PCDEx_LPM_Callback>
 8003980:	e002      	b.n	8003988 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f005 f85a 	bl	8008a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 fdcd 	bl	800653c <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ac:	d112      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f005 f816 	bl	80089f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fdaf 	bl	800653c <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e8:	f040 80b7 	bne.w	8003b5a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2110      	movs	r1, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fd76 	bl	80054f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	e046      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d3b3      	bcc.n	8003a12 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003abc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad6:	f043 030b 	orr.w	r3, r3, #11
 8003ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aec:	f043 030b 	orr.w	r3, r3, #11
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	e015      	b.n	8003b20 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f043 030b 	orr.w	r3, r3, #11
 8003b1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b44:	461a      	mov	r2, r3
 8003b46:	f002 fdbd 	bl	80066c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f002 fcec 	bl	800653c <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	d124      	bne.n	8003bba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fd82 	bl	800667e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fd37 	bl	80055f2 <USB_GetDevSpeed>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681c      	ldr	r4, [r3, #0]
 8003b90:	f001 f9d0 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8003b94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f001 fa36 	bl	8005010 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f004 ff04 	bl	80089b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f002 fcbc 	bl	800653c <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d10a      	bne.n	8003be4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f004 fee1 	bl	8008996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f002 0208 	and.w	r2, r2, #8
 8003be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 fca7 	bl	800653c <USB_ReadInterrupts>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d122      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c04:	2301      	movs	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	e014      	b.n	8003c34 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb0f 	bl	800424c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	3301      	adds	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e5      	bcc.n	8003c0a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fc7a 	bl	800653c <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d13b      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c54:	2301      	movs	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e02b      	b.n	8003cb2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3340      	adds	r3, #64	; 0x40
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d115      	bne.n	8003cac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da12      	bge.n	8003cac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	333f      	adds	r3, #63	; 0x3f
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fad0 	bl	800424c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	3301      	adds	r3, #1
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3ce      	bcc.n	8003c5a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f002 fc33 	bl	800653c <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce0:	d155      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e045      	b.n	8003d74 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d12e      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da2b      	bge.n	8003d6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d121      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6053      	str	r3, [r2, #4]
            break;
 8003d6c:	e007      	b.n	8003d7e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	3301      	adds	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3b4      	bcc.n	8003ce8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fbd2 	bl	800653c <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d10a      	bne.n	8003dba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f004 fe7b 	bl	8008aa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 fbbc 	bl	800653c <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d115      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f004 fe6b 	bl	8008abc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e000      	b.n	8003dfa <HAL_PCD_IRQHandler+0x938>
      return;
 8003df8:	bf00      	nop
    }
  }
}
 8003dfa:	3734      	adds	r7, #52	; 0x34
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd90      	pop	{r4, r7, pc}

08003e00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_PCD_SetAddress+0x1a>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e013      	b.n	8003e42 <HAL_PCD_SetAddress+0x42>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 fb1a 	bl	800646c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	4608      	mov	r0, r1
 8003e54:	4611      	mov	r1, r2
 8003e56:	461a      	mov	r2, r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	70fb      	strb	r3, [r7, #3]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	803b      	strh	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da0f      	bge.n	8003e90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	3338      	adds	r3, #56	; 0x38
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	705a      	strb	r2, [r3, #1]
 8003e8e:	e00f      	b.n	8003eb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ebc:	883a      	ldrh	r2, [r7, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	78ba      	ldrb	r2, [r7, #2]
 8003ec6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eda:	78bb      	ldrb	r3, [r7, #2]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d102      	bne.n	8003ee6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_PCD_EP_Open+0xaa>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e00e      	b.n	8003f12 <HAL_PCD_EP_Open+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fb9a 	bl	800563c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f10:	7afb      	ldrb	r3, [r7, #11]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da0f      	bge.n	8003f4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	3338      	adds	r3, #56	; 0x38
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	705a      	strb	r2, [r3, #1]
 8003f4c:	e00f      	b.n	8003f6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_PCD_EP_Close+0x6e>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e00e      	b.n	8003fa6 <HAL_PCD_EP_Close+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fbd8 	bl	800574c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	f001 feb7 	bl	8005d94 <USB_EP0StartXfer>
 8004026:	e008      	b.n	800403a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	f001 fc65 	bl	8005904 <USB_EPStartXfer>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	460b      	mov	r3, r1
 8004052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3338      	adds	r3, #56	; 0x38
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2201      	movs	r2, #1
 8004082:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004084:	7afb      	ldrb	r3, [r7, #11]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	b2da      	uxtb	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	f001 fe6d 	bl	8005d94 <USB_EP0StartXfer>
 80040ba:	e008      	b.n	80040ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	f001 fc1b 	bl	8005904 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d901      	bls.n	80040f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e050      	b.n	8004198 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da0f      	bge.n	800411e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3338      	adds	r3, #56	; 0x38
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	705a      	strb	r2, [r3, #1]
 800411c:	e00d      	b.n	800413a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_PCD_EP_SetStall+0x82>
 8004156:	2302      	movs	r3, #2
 8004158:	e01e      	b.n	8004198 <HAL_PCD_EP_SetStall+0xc0>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	4618      	mov	r0, r3
 800416a:	f002 f8ab 	bl	80062c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	b2d9      	uxtb	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004188:	461a      	mov	r2, r3
 800418a:	f002 fa9b 	bl	80066c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d901      	bls.n	80041be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e042      	b.n	8004244 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da0f      	bge.n	80041e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	705a      	strb	r2, [r3, #1]
 80041e4:	e00f      	b.n	8004206 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_PCD_EP_ClrStall+0x86>
 8004222:	2302      	movs	r3, #2
 8004224:	e00e      	b.n	8004244 <HAL_PCD_EP_ClrStall+0xa4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	4618      	mov	r0, r3
 8004236:	f002 f8b3 	bl	80063a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	da0c      	bge.n	800427a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e00c      	b.n	8004294 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	4618      	mov	r0, r3
 800429c:	f001 fed2 	bl	8006044 <USB_EPStopXfer>
 80042a0:	4603      	mov	r3, r0
 80042a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042a4:	7afb      	ldrb	r3, [r7, #11]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08a      	sub	sp, #40	; 0x28
 80042b2:	af02      	add	r7, sp, #8
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	3338      	adds	r3, #56	; 0x38
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d901      	bls.n	80042e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06c      	b.n	80043c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d902      	bls.n	8004302 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3303      	adds	r3, #3
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800430a:	e02b      	b.n	8004364 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	429a      	cmp	r2, r3
 8004320:	d902      	bls.n	8004328 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	3303      	adds	r3, #3
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6919      	ldr	r1, [r3, #16]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004340:	b2db      	uxtb	r3, r3
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4603      	mov	r3, r0
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	f001 ff26 	bl	8006198 <USB_WritePacket>

    ep->xfer_buff  += len;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	441a      	add	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	441a      	add	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	b29b      	uxth	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	429a      	cmp	r2, r3
 8004378:	d809      	bhi.n	800438e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004382:	429a      	cmp	r2, r3
 8004384:	d203      	bcs.n	800438e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1be      	bne.n	800430c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	429a      	cmp	r2, r3
 8004398:	d811      	bhi.n	80043be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2201      	movs	r2, #1
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	6939      	ldr	r1, [r7, #16]
 80043b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ba:	4013      	ands	r3, r2
 80043bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	333c      	adds	r3, #60	; 0x3c
 80043e0:	3304      	adds	r3, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d17b      	bne.n	80044f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4a61      	ldr	r2, [pc, #388]	; (8004590 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f240 80b9 	bls.w	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80b3 	beq.w	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	461a      	mov	r2, r3
 800442c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004430:	6093      	str	r3, [r2, #8]
 8004432:	e0a7      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	2320      	movs	r3, #32
 800444e:	6093      	str	r3, [r2, #8]
 8004450:	e098      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 8093 	bne.w	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a4b      	ldr	r2, [pc, #300]	; (8004590 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d90f      	bls.n	8004486 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	e07e      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	0159      	lsls	r1, r3, #5
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	440b      	add	r3, r1
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d114      	bne.n	80044e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044d0:	461a      	mov	r2, r3
 80044d2:	2101      	movs	r1, #1
 80044d4:	f002 f8f6 	bl	80066c4 <USB_EP0_OutStart>
 80044d8:	e006      	b.n	80044e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f004 fa1c 	bl	800892c <HAL_PCD_DataOutStageCallback>
 80044f4:	e046      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d124      	bne.n	8004548 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	6093      	str	r3, [r2, #8]
 800451c:	e032      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	461a      	mov	r2, r3
 8004536:	2320      	movs	r3, #32
 8004538:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f004 f9f3 	bl	800892c <HAL_PCD_DataOutStageCallback>
 8004546:	e01d      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d114      	bne.n	8004578 <PCD_EP_OutXfrComplete_int+0x1b0>
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d108      	bne.n	8004578 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004570:	461a      	mov	r2, r3
 8004572:	2100      	movs	r1, #0
 8004574:	f002 f8a6 	bl	80066c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f004 f9d4 	bl	800892c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	4f54300a 	.word	0x4f54300a
 8004594:	4f54310a 	.word	0x4f54310a

08004598 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	333c      	adds	r3, #60	; 0x3c
 80045b0:	3304      	adds	r3, #4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d90e      	bls.n	80045ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f004 f98b 	bl	8008908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <PCD_EP_OutSetupPacket_int+0x88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d90c      	bls.n	8004614 <PCD_EP_OutSetupPacket_int+0x7c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d108      	bne.n	8004614 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800460c:	461a      	mov	r2, r3
 800460e:	2101      	movs	r1, #1
 8004610:	f002 f858 	bl	80066c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	4f54300a 	.word	0x4f54300a

08004624 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
 8004630:	4613      	mov	r3, r2
 8004632:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004642:	883b      	ldrh	r3, [r7, #0]
 8004644:	0419      	lsls	r1, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	430a      	orrs	r2, r1
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
 8004650:	e028      	b.n	80046a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e00d      	b.n	8004682 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3340      	adds	r3, #64	; 0x40
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4413      	add	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	3301      	adds	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	3b01      	subs	r3, #1
 8004688:	429a      	cmp	r2, r3
 800468a:	d3ec      	bcc.n	8004666 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800468c:	883b      	ldrh	r3, [r7, #0]
 800468e:	0418      	lsls	r0, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	3b01      	subs	r3, #1
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	4302      	orrs	r2, r0
 800469c:	3340      	adds	r3, #64	; 0x40
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e267      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d075      	beq.n	80047f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00c      	beq.n	8004730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471e:	2b08      	cmp	r3, #8
 8004720:	d112      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004722:	4b82      	ldr	r3, [pc, #520]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472e:	d10b      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	4b7e      	ldr	r3, [pc, #504]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d05b      	beq.n	80047f4 <HAL_RCC_OscConfig+0x108>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d157      	bne.n	80047f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e242      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x74>
 8004752:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a75      	ldr	r2, [pc, #468]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e01d      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0x98>
 800476a:	4b70      	ldr	r3, [pc, #448]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6f      	ldr	r2, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b6d      	ldr	r3, [pc, #436]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6c      	ldr	r2, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004784:	4b69      	ldr	r3, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a68      	ldr	r2, [pc, #416]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b66      	ldr	r3, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a65      	ldr	r2, [pc, #404]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd fb6a 	bl	8001e7c <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd fb66 	bl	8001e7c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e207      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0xc0>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fb56 	bl	8001e7c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fd fb52 	bl	8001e7c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1f3      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	4b51      	ldr	r3, [pc, #324]	; (800492c <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0xe8>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004802:	4b4a      	ldr	r3, [pc, #296]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b44      	ldr	r3, [pc, #272]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1c7      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4937      	ldr	r1, [pc, #220]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x244>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fb0b 	bl	8001e7c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd fb07 	bl	8001e7c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1a8      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4925      	ldr	r1, [pc, #148]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCC_OscConfig+0x244>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd faea 	bl	8001e7c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fd fae6 	bl	8001e7c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e187      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d036      	beq.n	8004944 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_RCC_OscConfig+0x248>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd faca 	bl	8001e7c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fd fac6 	bl	8001e7c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e167      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x240>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x200>
 800490a:	e01b      	b.n	8004944 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x248>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fd fab3 	bl	8001e7c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	e00e      	b.n	8004938 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491a:	f7fd faaf 	bl	8001e7c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d907      	bls.n	8004938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e150      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ea      	bne.n	800491a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8097 	beq.w	8004a80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004956:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	4b7d      	ldr	r3, [pc, #500]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a7c      	ldr	r2, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b77      	ldr	r3, [pc, #476]	; (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498e:	4b74      	ldr	r3, [pc, #464]	; (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a73      	ldr	r2, [pc, #460]	; (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fd fa6f 	bl	8001e7c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7fd fa6b 	bl	8001e7c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e10c      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_OscConfig+0x474>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x2ea>
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a63      	ldr	r2, [pc, #396]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e01c      	b.n	8004a10 <HAL_RCC_OscConfig+0x324>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x30c>
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a5e      	ldr	r2, [pc, #376]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b5c      	ldr	r3, [pc, #368]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a5b      	ldr	r2, [pc, #364]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x324>
 80049f8:	4b58      	ldr	r3, [pc, #352]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a57      	ldr	r2, [pc, #348]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	4b55      	ldr	r3, [pc, #340]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a54      	ldr	r2, [pc, #336]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	f023 0304 	bic.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd fa30 	bl	8001e7c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd fa2c 	bl	8001e7c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0cb      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCC_OscConfig+0x334>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a44:	f7fd fa1a 	bl	8001e7c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fa16 	bl	8001e7c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0b5      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a1 	beq.w	8004bcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d05c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d141      	bne.n	8004b22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd f9ea 	bl	8001e7c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd f9e6 	bl	8001e7c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e087      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	491b      	ldr	r1, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd f9bf 	bl	8001e7c <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b02:	f7fd f9bb 	bl	8001e7c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e05c      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x416>
 8004b20:	e054      	b.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fd f9a8 	bl	8001e7c <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd f9a4 	bl	8001e7c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e045      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x444>
 8004b4e:	e03d      	b.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e038      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40007000 	.word	0x40007000
 8004b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x4ec>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d028      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d121      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d11a      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d111      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800

08004bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0cc      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d90c      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d044      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e067      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4934      	ldr	r1, [pc, #208]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ccc:	f7fd f8d6 	bl	8001e7c <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd4:	f7fd f8d2 	bl	8001e7c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e04f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 020c 	and.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1eb      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d20c      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd f836 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023c00 	.word	0x40023c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	08008f20 	.word	0x08008f20
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000004 	.word	0x20000004

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b090      	sub	sp, #64	; 0x40
 8004dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db8:	2300      	movs	r3, #0
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	f200 80a1 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x34>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dda:	e09b      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004dde:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004de0:	e09b      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de2:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004de6:	e098      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de8:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df2:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	2200      	movs	r2, #0
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	627a      	str	r2, [r7, #36]	; 0x24
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e10:	2100      	movs	r1, #0
 8004e12:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e14:	fb03 f201 	mul.w	r2, r3, r1
 8004e18:	2300      	movs	r3, #0
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a43      	ldr	r2, [pc, #268]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e22:	fba0 1202 	umull	r1, r2, r0, r2
 8004e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e28:	460a      	mov	r2, r1
 8004e2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2e:	4413      	add	r3, r2
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e42:	f7fb fd57 	bl	80008f4 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4e:	e053      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e50:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	2200      	movs	r2, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	617a      	str	r2, [r7, #20]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e62:	f04f 0b00 	mov.w	fp, #0
 8004e66:	4652      	mov	r2, sl
 8004e68:	465b      	mov	r3, fp
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e78:	0150      	lsls	r0, r2, #5
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e82:	eb63 090b 	sbc.w	r9, r3, fp
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	00eb      	lsls	r3, r5, #3
 8004eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb0:	00e2      	lsls	r2, r4, #3
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	eb14 030a 	adds.w	r3, r4, sl
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	eb45 030b 	adc.w	r3, r5, fp
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	028b      	lsls	r3, r1, #10
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed8:	4621      	mov	r1, r4
 8004eda:	028a      	lsls	r2, r1, #10
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	60fa      	str	r2, [r7, #12]
 8004ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eec:	f7fb fd02 	bl	80008f4 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3740      	adds	r7, #64	; 0x40
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	017d7840 	.word	0x017d7840

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000000 	.word	0x20000000

08004f4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	f107 001c 	add.w	r0, r7, #28
 8004f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d122      	bne.n	8004faa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 fbee 	bl	8006780 <USB_CoreReset>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e01a      	b.n	8004fe0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fbe2 	bl	8006780 <USB_CoreReset>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8004fd2:	e005      	b.n	8004fe0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10b      	bne.n	8004ffe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f043 0206 	orr.w	r2, r3, #6
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800500a:	b004      	add	sp, #16
 800500c:	4770      	bx	lr
	...

08005010 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d165      	bne.n	80050f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a41      	ldr	r2, [pc, #260]	; (800512c <USB_SetTurnaroundTime+0x11c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d906      	bls.n	800503a <USB_SetTurnaroundTime+0x2a>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a40      	ldr	r2, [pc, #256]	; (8005130 <USB_SetTurnaroundTime+0x120>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d202      	bcs.n	800503a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005034:	230f      	movs	r3, #15
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e062      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <USB_SetTurnaroundTime+0x120>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d306      	bcc.n	8005050 <USB_SetTurnaroundTime+0x40>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <USB_SetTurnaroundTime+0x124>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d202      	bcs.n	8005050 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800504a:	230e      	movs	r3, #14
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e057      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a38      	ldr	r2, [pc, #224]	; (8005134 <USB_SetTurnaroundTime+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d306      	bcc.n	8005066 <USB_SetTurnaroundTime+0x56>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a37      	ldr	r2, [pc, #220]	; (8005138 <USB_SetTurnaroundTime+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d202      	bcs.n	8005066 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005060:	230d      	movs	r3, #13
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e04c      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a33      	ldr	r2, [pc, #204]	; (8005138 <USB_SetTurnaroundTime+0x128>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d306      	bcc.n	800507c <USB_SetTurnaroundTime+0x6c>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a32      	ldr	r2, [pc, #200]	; (800513c <USB_SetTurnaroundTime+0x12c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d802      	bhi.n	800507c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005076:	230c      	movs	r3, #12
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e041      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a2f      	ldr	r2, [pc, #188]	; (800513c <USB_SetTurnaroundTime+0x12c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d906      	bls.n	8005092 <USB_SetTurnaroundTime+0x82>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a2e      	ldr	r2, [pc, #184]	; (8005140 <USB_SetTurnaroundTime+0x130>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d802      	bhi.n	8005092 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800508c:	230b      	movs	r3, #11
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e036      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <USB_SetTurnaroundTime+0x130>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d906      	bls.n	80050a8 <USB_SetTurnaroundTime+0x98>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <USB_SetTurnaroundTime+0x134>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d802      	bhi.n	80050a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050a2:	230a      	movs	r3, #10
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e02b      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <USB_SetTurnaroundTime+0x134>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d906      	bls.n	80050be <USB_SetTurnaroundTime+0xae>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a25      	ldr	r2, [pc, #148]	; (8005148 <USB_SetTurnaroundTime+0x138>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d202      	bcs.n	80050be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050b8:	2309      	movs	r3, #9
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e020      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a21      	ldr	r2, [pc, #132]	; (8005148 <USB_SetTurnaroundTime+0x138>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d306      	bcc.n	80050d4 <USB_SetTurnaroundTime+0xc4>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <USB_SetTurnaroundTime+0x13c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d802      	bhi.n	80050d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050ce:	2308      	movs	r3, #8
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e015      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	; (800514c <USB_SetTurnaroundTime+0x13c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d906      	bls.n	80050ea <USB_SetTurnaroundTime+0xda>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <USB_SetTurnaroundTime+0x140>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d202      	bcs.n	80050ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050e4:	2307      	movs	r3, #7
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e00a      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050ea:	2306      	movs	r3, #6
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e007      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050f6:	2309      	movs	r3, #9
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e001      	b.n	8005100 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050fc:	2309      	movs	r3, #9
 80050fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	00d8acbf 	.word	0x00d8acbf
 8005130:	00e4e1c0 	.word	0x00e4e1c0
 8005134:	00f42400 	.word	0x00f42400
 8005138:	01067380 	.word	0x01067380
 800513c:	011a499f 	.word	0x011a499f
 8005140:	01312cff 	.word	0x01312cff
 8005144:	014ca43f 	.word	0x014ca43f
 8005148:	016e3600 	.word	0x016e3600
 800514c:	01a6ab1f 	.word	0x01a6ab1f
 8005150:	01e84800 	.word	0x01e84800

08005154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d115      	bne.n	80051e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c6:	2001      	movs	r0, #1
 80051c8:	f7fc fe64 	bl	8001e94 <HAL_Delay>
      ms++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fa45 	bl	8006662 <USB_GetMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d01e      	beq.n	800521c <USB_SetCurrentMode+0x84>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b31      	cmp	r3, #49	; 0x31
 80051e2:	d9f0      	bls.n	80051c6 <USB_SetCurrentMode+0x2e>
 80051e4:	e01a      	b.n	800521c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d115      	bne.n	8005218 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7fc fe4b 	bl	8001e94 <HAL_Delay>
      ms++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 fa2c 	bl	8006662 <USB_GetMode>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <USB_SetCurrentMode+0x84>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b31      	cmp	r3, #49	; 0x31
 8005214:	d9f0      	bls.n	80051f8 <USB_SetCurrentMode+0x60>
 8005216:	e001      	b.n	800521c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e005      	b.n	8005228 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b32      	cmp	r3, #50	; 0x32
 8005220:	d101      	bne.n	8005226 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005230:	b084      	sub	sp, #16
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800523e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e009      	b.n	8005264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3340      	adds	r3, #64	; 0x40
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	3301      	adds	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0e      	cmp	r3, #14
 8005268:	d9f2      	bls.n	8005250 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11c      	bne.n	80052aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
 80052a8:	e00b      	b.n	80052c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	4619      	mov	r1, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	461a      	mov	r2, r3
 80052de:	680b      	ldr	r3, [r1, #0]
 80052e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10c      	bne.n	8005302 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f965 	bl	80055c0 <USB_SetDevSpeed>
 80052f6:	e008      	b.n	800530a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052f8:	2101      	movs	r1, #1
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f960 	bl	80055c0 <USB_SetDevSpeed>
 8005300:	e003      	b.n	800530a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005302:	2103      	movs	r1, #3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f95b 	bl	80055c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800530a:	2110      	movs	r1, #16
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f8f3 	bl	80054f8 <USB_FlushTxFifo>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f91f 	bl	8005560 <USB_FlushRxFifo>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	461a      	mov	r2, r3
 8005334:	2300      	movs	r3, #0
 8005336:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	461a      	mov	r2, r3
 8005340:	2300      	movs	r3, #0
 8005342:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e043      	b.n	80053de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536c:	d118      	bne.n	80053a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e013      	b.n	80053b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	461a      	mov	r2, r3
 8005398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e008      	b.n	80053b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	3301      	adds	r3, #1
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3b7      	bcc.n	8005356 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e043      	b.n	8005474 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005402:	d118      	bne.n	8005436 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	461a      	mov	r2, r3
 8005418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e013      	b.n	8005448 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	461a      	mov	r2, r3
 800542e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	e008      	b.n	8005448 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3301      	adds	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3b7      	bcc.n	80053ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800549c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f043 0210 	orr.w	r2, r3, #16
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <USB_DevInit+0x2c4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f0:	b004      	add	sp, #16
 80054f2:	4770      	bx	lr
 80054f4:	803c3800 	.word	0x803c3800

080054f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <USB_FlushTxFifo+0x64>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e01b      	b.n	8005550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	daf2      	bge.n	8005506 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	019b      	lsls	r3, r3, #6
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a08      	ldr	r2, [pc, #32]	; (800555c <USB_FlushTxFifo+0x64>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e006      	b.n	8005550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b20      	cmp	r3, #32
 800554c:	d0f0      	beq.n	8005530 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	00030d40 	.word	0x00030d40

08005560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a11      	ldr	r2, [pc, #68]	; (80055bc <USB_FlushRxFifo+0x5c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e018      	b.n	80055b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2210      	movs	r2, #16
 800558e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <USB_FlushRxFifo+0x5c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e006      	b.n	80055b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d0f0      	beq.n	8005590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	00030d40 	.word	0x00030d40

080055c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e0:	4313      	orrs	r3, r2
 80055e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]
 8005616:	e00a      	b.n	800562e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d002      	beq.n	8005624 <USB_GetDevSpeed+0x32>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b06      	cmp	r3, #6
 8005622:	d102      	bne.n	800562a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005624:	2302      	movs	r3, #2
 8005626:	75fb      	strb	r3, [r7, #23]
 8005628:	e001      	b.n	800562e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800562a:	230f      	movs	r3, #15
 800562c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d13a      	bne.n	80056ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	68f9      	ldr	r1, [r7, #12]
 8005672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005676:	4313      	orrs	r3, r2
 8005678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d155      	bne.n	800573c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	791b      	ldrb	r3, [r3, #4]
 80056aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	059b      	lsls	r3, r3, #22
 80056b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b4:	4313      	orrs	r3, r2
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e036      	b.n	800573c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11a      	bne.n	800573c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	791b      	ldrb	r3, [r3, #4]
 8005720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005722:	430b      	orrs	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d161      	bne.n	800582c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577e:	d11f      	bne.n	80057c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800579e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e0:	4013      	ands	r3, r2
 80057e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005804:	4013      	ands	r3, r2
 8005806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	0159      	lsls	r1, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	440b      	add	r3, r1
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	4619      	mov	r1, r3
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <USB_DeactivateEndpoint+0x1b0>)
 8005826:	4013      	ands	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
 800582a:	e060      	b.n	80058ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005842:	d11f      	bne.n	8005884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	43db      	mvns	r3, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4013      	ands	r3, r2
 80058ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	0159      	lsls	r1, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	4619      	mov	r1, r3
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <USB_DeactivateEndpoint+0x1b4>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	ec337800 	.word	0xec337800
 8005900:	eff37800 	.word	0xeff37800

08005904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b01      	cmp	r3, #1
 8005922:	f040 815c 	bne.w	8005bde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d132      	bne.n	8005994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800594c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	0cdb      	lsrs	r3, r3, #19
 800598e:	04db      	lsls	r3, r3, #19
 8005990:	6113      	str	r3, [r2, #16]
 8005992:	e074      	b.n	8005a7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ae:	0cdb      	lsrs	r3, r3, #19
 80059b0:	04db      	lsls	r3, r3, #19
 80059b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	440b      	add	r3, r1
 80059f0:	1e59      	subs	r1, r3, #1
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059fc:	4b9d      	ldr	r3, [pc, #628]	; (8005c74 <USB_EPStartXfer+0x370>)
 80059fe:	400b      	ands	r3, r1
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	0148      	lsls	r0, r1, #5
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	4401      	add	r1, r0
 8005a08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	0148      	lsls	r0, r1, #5
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	4401      	add	r1, r0
 8005a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	791b      	ldrb	r3, [r3, #4]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d11f      	bne.n	8005a7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d14b      	bne.n	8005b1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d128      	bne.n	8005afa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d110      	bne.n	8005ada <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	e00f      	b.n	8005afa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e133      	b.n	8005d84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d015      	beq.n	8005b70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 811b 	beq.w	8005d84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	2101      	movs	r1, #1
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	69f9      	ldr	r1, [r7, #28]
 8005b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8005b6e:	e109      	b.n	8005d84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d110      	bne.n	8005ba2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e00f      	b.n	8005bc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6919      	ldr	r1, [r3, #16]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	b298      	uxth	r0, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fade 	bl	8006198 <USB_WritePacket>
 8005bdc:	e0d2      	b.n	8005d84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf8:	0cdb      	lsrs	r3, r3, #19
 8005bfa:	04db      	lsls	r3, r3, #19
 8005bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d126      	bne.n	8005c78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	0148      	lsls	r0, r1, #5
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	4401      	add	r1, r0
 8005c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6e:	6113      	str	r3, [r2, #16]
 8005c70:	e03a      	b.n	8005ce8 <USB_EPStartXfer+0x3e4>
 8005c72:	bf00      	nop
 8005c74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	8afa      	ldrh	r2, [r7, #22]
 8005c94:	fb03 f202 	mul.w	r2, r3, r2
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	8afb      	ldrh	r3, [r7, #22]
 8005cac:	04d9      	lsls	r1, r3, #19
 8005cae:	4b38      	ldr	r3, [pc, #224]	; (8005d90 <USB_EPStartXfer+0x48c>)
 8005cb0:	400b      	ands	r3, r1
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	0148      	lsls	r0, r1, #5
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	4401      	add	r1, r0
 8005cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd8:	69b9      	ldr	r1, [r7, #24]
 8005cda:	0148      	lsls	r0, r1, #5
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	4401      	add	r1, r0
 8005ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10d      	bne.n	8005d0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	460a      	mov	r2, r1
 8005d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	791b      	ldrb	r3, [r3, #4]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d128      	bne.n	8005d64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d110      	bne.n	8005d44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e00f      	b.n	8005d64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	1ff80000 	.word	0x1ff80000

08005d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 80ce 	bne.w	8005f52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d132      	bne.n	8005e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	0cdb      	lsrs	r3, r3, #19
 8005e1e:	04db      	lsls	r3, r3, #19
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	e04e      	b.n	8005ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	0cdb      	lsrs	r3, r3, #19
 8005e40:	04db      	lsls	r3, r3, #19
 8005e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d903      	bls.n	8005e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb2:	6939      	ldr	r1, [r7, #16]
 8005eb4:	0148      	lsls	r0, r1, #5
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	4401      	add	r1, r0
 8005eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d11e      	bne.n	8005f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	461a      	mov	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e097      	b.n	8006036 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8083 	beq.w	8006036 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	2101      	movs	r1, #1
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	6979      	ldr	r1, [r7, #20]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	634b      	str	r3, [r1, #52]	; 0x34
 8005f50:	e071      	b.n	8006036 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6c:	0cdb      	lsrs	r3, r3, #19
 8005f6e:	04db      	lsls	r3, r3, #19
 8005f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe4:	6939      	ldr	r1, [r7, #16]
 8005fe6:	0148      	lsls	r0, r1, #5
 8005fe8:	6979      	ldr	r1, [r7, #20]
 8005fea:	4401      	add	r1, r0
 8005fec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d10d      	bne.n	8006016 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6919      	ldr	r1, [r3, #16]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	460a      	mov	r2, r1
 8006014:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006030:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d14a      	bne.n	80060f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800607a:	f040 8086 	bne.w	800618a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d902      	bls.n	80060dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
          break;
 80060da:	e056      	b.n	800618a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f4:	d0e7      	beq.n	80060c6 <USB_EPStopXfer+0x82>
 80060f6:	e048      	b.n	800618a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006110:	d13b      	bne.n	800618a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006134:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f242 7210 	movw	r2, #10000	; 0x2710
 8006166:	4293      	cmp	r3, r2
 8006168:	d902      	bls.n	8006170 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	75fb      	strb	r3, [r7, #23]
          break;
 800616e:	e00c      	b.n	800618a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d0e7      	beq.n	800615a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	460b      	mov	r3, r1
 80061a8:	71fb      	strb	r3, [r7, #7]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d123      	bne.n	8006206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061be:	88bb      	ldrh	r3, [r7, #4]
 80061c0:	3303      	adds	r3, #3
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e018      	b.n	80061fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	031a      	lsls	r2, r3, #12
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d8:	461a      	mov	r2, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3301      	adds	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	3301      	adds	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	429a      	cmp	r2, r3
 8006204:	d3e2      	bcc.n	80061cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3724      	adds	r7, #36	; 0x24
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006214:	b480      	push	{r7}
 8006216:	b08b      	sub	sp, #44	; 0x2c
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	b29b      	uxth	r3, r3
 8006230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	e014      	b.n	800626a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	601a      	str	r2, [r3, #0]
    pDest++;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	3301      	adds	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	3301      	adds	r3, #1
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	3301      	adds	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	3301      	adds	r3, #1
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	3301      	adds	r3, #1
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	429a      	cmp	r2, r3
 8006270:	d3e6      	bcc.n	8006240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01e      	beq.n	80062b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006282:	461a      	mov	r2, r3
 8006284:	f107 0310 	add.w	r3, r7, #16
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	701a      	strb	r2, [r3, #0]
      i++;
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	3301      	adds	r3, #1
 80062a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062aa:	8bfb      	ldrh	r3, [r7, #30]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062b0:	8bfb      	ldrh	r3, [r7, #30]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ea      	bne.n	800628c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	372c      	adds	r7, #44	; 0x2c
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d12c      	bne.n	800633a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	db12      	blt.n	8006318 <USB_EPSetStall+0x54>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006316:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e02b      	b.n	8006392 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	db12      	blt.n	8006372 <USB_EPSetStall+0xae>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00f      	beq.n	8006372 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006370:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d128      	bne.n	800640e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	791b      	ldrb	r3, [r3, #4]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d003      	beq.n	80063ec <USB_EPClearStall+0x4c>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	791b      	ldrb	r3, [r3, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d138      	bne.n	800645e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e027      	b.n	800645e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800642c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	791b      	ldrb	r3, [r3, #4]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d003      	beq.n	800643e <USB_EPClearStall+0x9e>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	791b      	ldrb	r3, [r3, #4]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d10f      	bne.n	800645e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800648e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e6:	f023 0302 	bic.w	r3, r3, #2
 80064ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006554:	68fb      	ldr	r3, [r7, #12]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0c1b      	lsrs	r3, r3, #16
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	b29b      	uxth	r3, r3
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065f8:	68bb      	ldr	r3, [r7, #8]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	01db      	lsls	r3, r3, #7
 8006638:	b2db      	uxtb	r3, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4013      	ands	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006654:	68bb      	ldr	r3, [r7, #8]
}
 8006656:	4618      	mov	r0, r3
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0301 	and.w	r3, r3, #1
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800669c:	f023 0307 	bic.w	r3, r3, #7
 80066a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	460b      	mov	r3, r1
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	333c      	adds	r3, #60	; 0x3c
 80066da:	3304      	adds	r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4a26      	ldr	r2, [pc, #152]	; (800677c <USB_EP0_OutStart+0xb8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d90a      	bls.n	80066fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f8:	d101      	bne.n	80066fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e037      	b.n	800676e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	461a      	mov	r2, r3
 8006706:	2300      	movs	r3, #0
 8006708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800671c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672c:	f043 0318 	orr.w	r3, r3, #24
 8006730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006744:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d10f      	bne.n	800676c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006766:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800676a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	4f54300a 	.word	0x4f54300a

08006780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <USB_CoreReset+0x64>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e01b      	b.n	80067d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	daf2      	bge.n	800678c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <USB_CoreReset+0x64>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e006      	b.n	80067d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d0f0      	beq.n	80067b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	00030d40 	.word	0x00030d40

080067e8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80067f4:	2054      	movs	r0, #84	; 0x54
 80067f6:	f002 fae7 	bl	8008dc8 <USBD_static_malloc>
 80067fa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	32b0      	adds	r2, #176	; 0xb0
 800680c:	2100      	movs	r1, #0
 800680e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006812:	2302      	movs	r3, #2
 8006814:	e08b      	b.n	800692e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	32b0      	adds	r2, #176	; 0xb0
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	32b0      	adds	r2, #176	; 0xb0
 8006830:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7c1b      	ldrb	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11b      	bne.n	800687a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006842:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <USBD_CUSTOM_HID_Init+0x150>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3326      	adds	r3, #38	; 0x26
 8006858:	2205      	movs	r2, #5
 800685a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800685c:	4b37      	ldr	r3, [pc, #220]	; (800693c <USBD_CUSTOM_HID_Init+0x154>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006874:	2205      	movs	r2, #5
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e01a      	b.n	80068b0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800687a:	4b2f      	ldr	r3, [pc, #188]	; (8006938 <USBD_CUSTOM_HID_Init+0x150>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	3326      	adds	r3, #38	; 0x26
 8006890:	2201      	movs	r2, #1
 8006892:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006894:	4b29      	ldr	r3, [pc, #164]	; (800693c <USBD_CUSTOM_HID_Init+0x154>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 020f 	and.w	r2, r3, #15
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80068ac:	2201      	movs	r2, #1
 80068ae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <USBD_CUSTOM_HID_Init+0x150>)
 80068b2:	7819      	ldrb	r1, [r3, #0]
 80068b4:	2302      	movs	r3, #2
 80068b6:	2203      	movs	r2, #3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f974 	bl	8008ba6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80068be:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <USBD_CUSTOM_HID_Init+0x150>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	3324      	adds	r3, #36	; 0x24
 80068d4:	2201      	movs	r2, #1
 80068d6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80068d8:	4b18      	ldr	r3, [pc, #96]	; (800693c <USBD_CUSTOM_HID_Init+0x154>)
 80068da:	7819      	ldrb	r1, [r3, #0]
 80068dc:	2302      	movs	r3, #2
 80068de:	2203      	movs	r2, #3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f002 f960 	bl	8008ba6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <USBD_CUSTOM_HID_Init+0x154>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 020f 	and.w	r2, r3, #15
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068fe:	2201      	movs	r2, #1
 8006900:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	33b0      	adds	r3, #176	; 0xb0
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <USBD_CUSTOM_HID_Init+0x154>)
 8006920:	7819      	ldrb	r1, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 fa2c 	bl	8008d84 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000086 	.word	0x20000086
 800693c:	20000087 	.word	0x20000087

08006940 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800694c:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <USBD_CUSTOM_HID_DeInit+0xec>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f002 f94d 	bl	8008bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006958:	4b34      	ldr	r3, [pc, #208]	; (8006a2c <USBD_CUSTOM_HID_DeInit+0xec>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	3324      	adds	r3, #36	; 0x24
 800696e:	2200      	movs	r2, #0
 8006970:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f003 020f 	and.w	r2, r3, #15
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	3326      	adds	r3, #38	; 0x26
 8006988:	2200      	movs	r2, #0
 800698a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 f92d 	bl	8008bf2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069b0:	2200      	movs	r2, #0
 80069b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80069b4:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80069cc:	2200      	movs	r2, #0
 80069ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	32b0      	adds	r2, #176	; 0xb0
 80069da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01f      	beq.n	8006a22 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	33b0      	adds	r3, #176	; 0xb0
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32b0      	adds	r2, #176	; 0xb0
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 f9ed 	bl	8008de4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32b0      	adds	r2, #176	; 0xb0
 8006a14:	2100      	movs	r1, #0
 8006a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000086 	.word	0x20000086
 8006a30:	20000087 	.word	0x20000087

08006a34 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32b0      	adds	r2, #176	; 0xb0
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0f8      	b.n	8006c5a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d056      	beq.n	8006b22 <USBD_CUSTOM_HID_Setup+0xee>
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	f040 80e8 	bne.w	8006c4a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	3b02      	subs	r3, #2
 8006a80:	2b09      	cmp	r3, #9
 8006a82:	d846      	bhi.n	8006b12 <USBD_CUSTOM_HID_Setup+0xde>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBD_CUSTOM_HID_Setup+0x58>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006ae5 	.word	0x08006ae5
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006b13 	.word	0x08006b13
 8006a98:	08006b13 	.word	0x08006b13
 8006a9c:	08006b13 	.word	0x08006b13
 8006aa0:	08006b13 	.word	0x08006b13
 8006aa4:	08006b13 	.word	0x08006b13
 8006aa8:	08006af5 	.word	0x08006af5
 8006aac:	08006ad3 	.word	0x08006ad3
 8006ab0:	08006ab5 	.word	0x08006ab5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006ac0:	e02e      	b.n	8006b20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3340      	adds	r3, #64	; 0x40
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fcce 	bl	800846c <USBD_CtlSendData>
          break;
 8006ad0:	e026      	b.n	8006b20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	885b      	ldrh	r3, [r3, #2]
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006ae2:	e01d      	b.n	8006b20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3344      	adds	r3, #68	; 0x44
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fcbd 	bl	800846c <USBD_CtlSendData>
          break;
 8006af2:	e015      	b.n	8006b20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2201      	movs	r2, #1
 8006af8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006afa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	88db      	ldrh	r3, [r3, #6]
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	bf28      	it	cs
 8006b04:	2340      	movcs	r3, #64	; 0x40
 8006b06:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fcda 	bl	80084c4 <USBD_CtlPrepareRx>
          break;
 8006b10:	e006      	b.n	8006b20 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fc38 	bl	800838a <USBD_CtlError>
          ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1e:	bf00      	nop
      }
      break;
 8006b20:	e09a      	b.n	8006c58 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b0b      	cmp	r3, #11
 8006b28:	f200 8086 	bhi.w	8006c38 <USBD_CUSTOM_HID_Setup+0x204>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <USBD_CUSTOM_HID_Setup+0x100>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006c47 	.word	0x08006c47
 8006b3c:	08006c39 	.word	0x08006c39
 8006b40:	08006c39 	.word	0x08006c39
 8006b44:	08006c39 	.word	0x08006c39
 8006b48:	08006c39 	.word	0x08006c39
 8006b4c:	08006b8f 	.word	0x08006b8f
 8006b50:	08006c39 	.word	0x08006c39
 8006b54:	08006c39 	.word	0x08006c39
 8006b58:	08006c39 	.word	0x08006c39
 8006b5c:	08006be7 	.word	0x08006be7
 8006b60:	08006c11 	.word	0x08006c11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d107      	bne.n	8006b80 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b70:	f107 030e 	add.w	r3, r7, #14
 8006b74:	2202      	movs	r2, #2
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fc77 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b7e:	e063      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fc01 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b8c:	e05c      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b22      	cmp	r3, #34	; 0x22
 8006b98:	d110      	bne.n	8006bbc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b35      	cmp	r3, #53	; 0x35
 8006ba0:	bf28      	it	cs
 8006ba2:	2335      	movcs	r3, #53	; 0x35
 8006ba4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	33b0      	adds	r3, #176	; 0xb0
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e00d      	b.n	8006bd8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	885b      	ldrh	r3, [r3, #2]
 8006bc0:	0a1b      	lsrs	r3, r3, #8
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b21      	cmp	r3, #33	; 0x21
 8006bc6:	d107      	bne.n	8006bd8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006bc8:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <USBD_CUSTOM_HID_Setup+0x230>)
 8006bca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	88db      	ldrh	r3, [r3, #6]
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	bf28      	it	cs
 8006bd4:	2309      	movcs	r3, #9
 8006bd6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bd8:	8bfb      	ldrh	r3, [r7, #30]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fc44 	bl	800846c <USBD_CtlSendData>
          break;
 8006be4:	e030      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d107      	bne.n	8006c02 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3348      	adds	r3, #72	; 0x48
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fc36 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c00:	e022      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fbc0 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0e:	e01b      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d106      	bne.n	8006c2a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c28:	e00e      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 fbac 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c32:	2303      	movs	r3, #3
 8006c34:	75fb      	strb	r3, [r7, #23]
          break;
 8006c36:	e007      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fba5 	bl	800838a <USBD_CtlError>
          ret = USBD_FAIL;
 8006c40:	2303      	movs	r3, #3
 8006c42:	75fb      	strb	r3, [r7, #23]
          break;
 8006c44:	e000      	b.n	8006c48 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006c46:	bf00      	nop
      }
      break;
 8006c48:	e006      	b.n	8006c58 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fb9c 	bl	800838a <USBD_CtlError>
      ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	bf00      	nop
  }
  return (uint8_t)ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000070 	.word	0x20000070

08006c68 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	32b0      	adds	r2, #176	; 0xb0
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e021      	b.n	8006cd0 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	32b0      	adds	r2, #176	; 0xb0
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d112      	bne.n	8006cce <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <USBD_CUSTOM_HID_SendReport+0x70>)
 8006cbc:	7819      	ldrb	r1, [r3, #0]
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f002 f83d 	bl	8008d42 <USBD_LL_Transmit>
 8006cc8:	e001      	b.n	8006cce <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000086 	.word	0x20000086

08006cdc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006ce4:	2181      	movs	r1, #129	; 0x81
 8006ce6:	4815      	ldr	r0, [pc, #84]	; (8006d3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006ce8:	f000 fd17 	bl	800771a <USBD_GetEpDesc>
 8006cec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4812      	ldr	r0, [pc, #72]	; (8006d3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006cf2:	f000 fd12 	bl	800771a <USBD_GetEpDesc>
 8006cf6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f042 0202 	orr.w	r2, r2, #2
 8006d06:	711a      	strb	r2, [r3, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f042 0202 	orr.w	r2, r2, #2
 8006d20:	711a      	strb	r2, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2229      	movs	r2, #41	; 0x29
 8006d30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d32:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000044 	.word	0x20000044

08006d40 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d48:	2181      	movs	r1, #129	; 0x81
 8006d4a:	4815      	ldr	r0, [pc, #84]	; (8006da0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d4c:	f000 fce5 	bl	800771a <USBD_GetEpDesc>
 8006d50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d52:	2101      	movs	r1, #1
 8006d54:	4812      	ldr	r0, [pc, #72]	; (8006da0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d56:	f000 fce0 	bl	800771a <USBD_GetEpDesc>
 8006d5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f042 0202 	orr.w	r2, r2, #2
 8006d6a:	711a      	strb	r2, [r3, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2205      	movs	r2, #5
 8006d74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f042 0202 	orr.w	r2, r2, #2
 8006d84:	711a      	strb	r2, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2229      	movs	r2, #41	; 0x29
 8006d94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d96:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000044 	.word	0x20000044

08006da4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006dac:	2181      	movs	r1, #129	; 0x81
 8006dae:	4815      	ldr	r0, [pc, #84]	; (8006e04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006db0:	f000 fcb3 	bl	800771a <USBD_GetEpDesc>
 8006db4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006db6:	2101      	movs	r1, #1
 8006db8:	4812      	ldr	r0, [pc, #72]	; (8006e04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006dba:	f000 fcae 	bl	800771a <USBD_GetEpDesc>
 8006dbe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f042 0202 	orr.w	r2, r2, #2
 8006dce:	711a      	strb	r2, [r3, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f042 0202 	orr.w	r2, r2, #2
 8006de8:	711a      	strb	r2, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2201      	movs	r2, #1
 8006df2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2229      	movs	r2, #41	; 0x29
 8006df8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dfa:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000044 	.word	0x20000044

08006e08 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32b0      	adds	r2, #176	; 0xb0
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32b0      	adds	r2, #176	; 0xb0
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e017      	b.n	8006e88 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	; 0xb0
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	33b0      	adds	r3, #176	; 0xb0
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	7810      	ldrb	r0, [r2, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	7852      	ldrb	r2, [r2, #1]
 8006e82:	4611      	mov	r1, r2
 8006e84:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	; 0xb0
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e00f      	b.n	8006ece <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	32b0      	adds	r2, #176	; 0xb0
 8006eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006ec0:	7819      	ldrb	r1, [r3, #0]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 ff5c 	bl	8008d84 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000087 	.word	0x20000087

08006edc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	32b0      	adds	r2, #176	; 0xb0
 8006eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e016      	b.n	8006f2c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d111      	bne.n	8006f2a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	33b0      	adds	r3, #176	; 0xb0
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	7810      	ldrb	r0, [r2, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	7852      	ldrb	r2, [r2, #1]
 8006f20:	4611      	mov	r1, r2
 8006f22:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	220a      	movs	r2, #10
 8006f40:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006f42:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	2000007c 	.word	0x2000007c

08006f54 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e009      	b.n	8006f7c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	33b0      	adds	r3, #176	; 0xb0
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e01f      	b.n	8006fe0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	79fa      	ldrb	r2, [r7, #7]
 8006fd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 fd7f 	bl	8008ad8 <USBD_LL_Init>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e025      	b.n	800704c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	32ae      	adds	r2, #174	; 0xae
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00f      	beq.n	800703c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32ae      	adds	r2, #174	; 0xae
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f107 020e 	add.w	r2, r7, #14
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fd87 	bl	8008b70 <USBD_LL_Start>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	4611      	mov	r1, r2
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	4611      	mov	r1, r2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f001 f908 	bl	8008316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2b02      	cmp	r3, #2
 8007128:	d01a      	beq.n	8007160 <USBD_LL_SetupStage+0x72>
 800712a:	2b02      	cmp	r3, #2
 800712c:	d822      	bhi.n	8007174 <USBD_LL_SetupStage+0x86>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <USBD_LL_SetupStage+0x4a>
 8007132:	2b01      	cmp	r3, #1
 8007134:	d00a      	beq.n	800714c <USBD_LL_SetupStage+0x5e>
 8007136:	e01d      	b.n	8007174 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fb5f 	bl	8007804 <USBD_StdDevReq>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]
      break;
 800714a:	e020      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fbc7 	bl	80078e8 <USBD_StdItfReq>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
      break;
 800715e:	e016      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc29 	bl	80079c0 <USBD_StdEPReq>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
      break;
 8007172:	e00c      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800717a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800717e:	b2db      	uxtb	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fd54 	bl	8008c30 <USBD_LL_StallEP>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	bf00      	nop
  }

  return ret;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	460b      	mov	r3, r1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d16e      	bne.n	800728e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071be:	2b03      	cmp	r3, #3
 80071c0:	f040 8098 	bne.w	80072f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d913      	bls.n	80071f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	1ad2      	subs	r2, r2, r3
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	bf28      	it	cs
 80071ea:	4613      	movcs	r3, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 f984 	bl	80084fe <USBD_CtlContinueRx>
 80071f6:	e07d      	b.n	80072f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2b02      	cmp	r3, #2
 8007204:	d014      	beq.n	8007230 <USBD_LL_DataOutStage+0x98>
 8007206:	2b02      	cmp	r3, #2
 8007208:	d81d      	bhi.n	8007246 <USBD_LL_DataOutStage+0xae>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <USBD_LL_DataOutStage+0x7c>
 800720e:	2b01      	cmp	r3, #1
 8007210:	d003      	beq.n	800721a <USBD_LL_DataOutStage+0x82>
 8007212:	e018      	b.n	8007246 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	75bb      	strb	r3, [r7, #22]
            break;
 8007218:	e018      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 fa5e 	bl	80076e6 <USBD_CoreFindIF>
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]
            break;
 800722e:	e00d      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fa60 	bl	8007700 <USBD_CoreFindEP>
 8007240:	4603      	mov	r3, r0
 8007242:	75bb      	strb	r3, [r7, #22]
            break;
 8007244:	e002      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	75bb      	strb	r3, [r7, #22]
            break;
 800724a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800724c:	7dbb      	ldrb	r3, [r7, #22]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d119      	bne.n	8007286 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d113      	bne.n	8007286 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	; 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007276:	7dba      	ldrb	r2, [r7, #22]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f001 f94a 	bl	8008520 <USBD_CtlSendStatus>
 800728c:	e032      	b.n	80072f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	b2db      	uxtb	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa31 	bl	8007700 <USBD_CoreFindEP>
 800729e:	4603      	mov	r3, r0
 80072a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072a2:	7dbb      	ldrb	r3, [r7, #22]
 80072a4:	2bff      	cmp	r3, #255	; 0xff
 80072a6:	d025      	beq.n	80072f4 <USBD_LL_DataOutStage+0x15c>
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d122      	bne.n	80072f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d117      	bne.n	80072ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072ba:	7dba      	ldrb	r2, [r7, #22]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	32ae      	adds	r2, #174	; 0xae
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00f      	beq.n	80072ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072ca:	7dba      	ldrb	r2, [r7, #22]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072d2:	7dba      	ldrb	r2, [r7, #22]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	32ae      	adds	r2, #174	; 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	7afa      	ldrb	r2, [r7, #11]
 80072e0:	4611      	mov	r1, r2
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	e000      	b.n	80072f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	460b      	mov	r3, r1
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d16f      	bne.n	80073f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3314      	adds	r3, #20
 8007316:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800731e:	2b02      	cmp	r3, #2
 8007320:	d15a      	bne.n	80073d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d914      	bls.n	8007358 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 f8ac 	bl	80084a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734a:	2300      	movs	r3, #0
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f001 fd17 	bl	8008d84 <USBD_LL_PrepareReceive>
 8007356:	e03f      	b.n	80073d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d11c      	bne.n	800739e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800736c:	429a      	cmp	r2, r3
 800736e:	d316      	bcc.n	800739e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800737a:	429a      	cmp	r2, r3
 800737c:	d20f      	bcs.n	800739e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f001 f88d 	bl	80084a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 fcf4 	bl	8008d84 <USBD_LL_PrepareReceive>
 800739c:	e01c      	b.n	80073d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d10f      	bne.n	80073ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 fc2f 	bl	8008c30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 f8b7 	bl	8008546 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d03a      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff fe42 	bl	800706c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073f0:	e032      	b.n	8007458 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f97f 	bl	8007700 <USBD_CoreFindEP>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2bff      	cmp	r3, #255	; 0xff
 800740a:	d025      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d122      	bne.n	8007458 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d11c      	bne.n	8007458 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	32ae      	adds	r2, #174	; 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d014      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800742e:	7dfa      	ldrb	r2, [r7, #23]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007436:	7dfa      	ldrb	r2, [r7, #23]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	7afa      	ldrb	r2, [r7, #11]
 8007444:	4611      	mov	r1, r2
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800744e:	7dbb      	ldrb	r3, [r7, #22]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007454:	7dbb      	ldrb	r3, [r7, #22]
 8007456:	e000      	b.n	800745a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6852      	ldr	r2, [r2, #4]
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	4611      	mov	r1, r2
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fb69 	bl	8008ba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2200      	movs	r2, #0
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fb5b 	bl	8008ba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2240      	movs	r2, #64	; 0x40
 80074fa:	621a      	str	r2, [r3, #32]

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2da      	uxtb	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b04      	cmp	r3, #4
 8007564:	d106      	bne.n	8007574 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800756c:	b2da      	uxtb	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d110      	bne.n	80075b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	; 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e01c      	b.n	800761e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d115      	bne.n	800761c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32ae      	adds	r2, #174	; 0xae
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	; 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	4611      	mov	r1, r2
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32ae      	adds	r2, #174	; 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e01c      	b.n	8007682 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b03      	cmp	r3, #3
 8007652:	d115      	bne.n	8007680 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32ae      	adds	r2, #174	; 0xae
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	; 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	4611      	mov	r1, r2
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00e      	beq.n	80076dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6852      	ldr	r2, [r2, #4]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	4611      	mov	r1, r2
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800770c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	885b      	ldrh	r3, [r3, #2]
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	429a      	cmp	r2, r3
 8007740:	d920      	bls.n	8007784 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800774a:	e013      	b.n	8007774 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800774c:	f107 030a 	add.w	r3, r7, #10
 8007750:	4619      	mov	r1, r3
 8007752:	6978      	ldr	r0, [r7, #20]
 8007754:	f000 f81b 	bl	800778e <USBD_GetNextDesc>
 8007758:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b05      	cmp	r3, #5
 8007760:	d108      	bne.n	8007774 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	429a      	cmp	r2, r3
 800776e:	d008      	beq.n	8007782 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b29a      	uxth	r2, r3
 800777a:	897b      	ldrh	r3, [r7, #10]
 800777c:	429a      	cmp	r2, r3
 800777e:	d8e5      	bhi.n	800774c <USBD_GetEpDesc+0x32>
 8007780:	e000      	b.n	8007784 <USBD_GetEpDesc+0x6a>
          break;
 8007782:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007784:	693b      	ldr	r3, [r7, #16]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	3301      	adds	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077e6:	8a3b      	ldrh	r3, [r7, #16]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077f6:	89fb      	ldrh	r3, [r7, #14]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d005      	beq.n	800782a <USBD_StdDevReq+0x26>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d857      	bhi.n	80078d2 <USBD_StdDevReq+0xce>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00f      	beq.n	8007846 <USBD_StdDevReq+0x42>
 8007826:	2b20      	cmp	r3, #32
 8007828:	d153      	bne.n	80078d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32ae      	adds	r2, #174	; 0xae
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e04a      	b.n	80078dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d83b      	bhi.n	80078c6 <USBD_StdDevReq+0xc2>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <USBD_StdDevReq+0x50>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078a9 	.word	0x080078a9
 8007858:	080078bd 	.word	0x080078bd
 800785c:	080078c7 	.word	0x080078c7
 8007860:	080078b3 	.word	0x080078b3
 8007864:	080078c7 	.word	0x080078c7
 8007868:	08007887 	.word	0x08007887
 800786c:	0800787d 	.word	0x0800787d
 8007870:	080078c7 	.word	0x080078c7
 8007874:	0800789f 	.word	0x0800789f
 8007878:	08007891 	.word	0x08007891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa3c 	bl	8007cfc <USBD_GetDescriptor>
          break;
 8007884:	e024      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fba1 	bl	8007fd0 <USBD_SetAddress>
          break;
 800788e:	e01f      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbe0 	bl	8008058 <USBD_SetConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
          break;
 800789c:	e018      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc83 	bl	80081ac <USBD_GetConfig>
          break;
 80078a6:	e013      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcb4 	bl	8008218 <USBD_GetStatus>
          break;
 80078b0:	e00e      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fce3 	bl	8008280 <USBD_SetFeature>
          break;
 80078ba:	e009      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fd07 	bl	80082d2 <USBD_ClrFeature>
          break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd5e 	bl	800838a <USBD_CtlError>
          break;
 80078ce:	bf00      	nop
      }
      break;
 80078d0:	e004      	b.n	80078dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd58 	bl	800838a <USBD_CtlError>
      break;
 80078da:	bf00      	nop
  }

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d005      	beq.n	800790e <USBD_StdItfReq+0x26>
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d852      	bhi.n	80079ac <USBD_StdItfReq+0xc4>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <USBD_StdItfReq+0x26>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d14e      	bne.n	80079ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	2b02      	cmp	r3, #2
 800791a:	d840      	bhi.n	800799e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	889b      	ldrh	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d836      	bhi.n	8007994 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	889b      	ldrh	r3, [r3, #4]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fed9 	bl	80076e6 <USBD_CoreFindIF>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2bff      	cmp	r3, #255	; 0xff
 800793c:	d01d      	beq.n	800797a <USBD_StdItfReq+0x92>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007944:	7bba      	ldrb	r2, [r7, #14]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	; 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00f      	beq.n	8007974 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007954:	7bba      	ldrb	r2, [r7, #14]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800795c:	7bba      	ldrb	r2, [r7, #14]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32ae      	adds	r2, #174	; 0xae
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007972:	e004      	b.n	800797e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007978:	e001      	b.n	800797e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fdc7 	bl	8008520 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007992:	e009      	b.n	80079a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fcf7 	bl	800838a <USBD_CtlError>
          break;
 800799c:	e004      	b.n	80079a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fcf2 	bl	800838a <USBD_CtlError>
          break;
 80079a6:	e000      	b.n	80079aa <USBD_StdItfReq+0xc2>
          break;
 80079a8:	bf00      	nop
      }
      break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fceb 	bl	800838a <USBD_CtlError>
      break;
 80079b4:	bf00      	nop
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	889b      	ldrh	r3, [r3, #4]
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d007      	beq.n	80079f0 <USBD_StdEPReq+0x30>
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	f200 817f 	bhi.w	8007ce4 <USBD_StdEPReq+0x324>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d02a      	beq.n	8007a40 <USBD_StdEPReq+0x80>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	f040 817a 	bne.w	8007ce4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fe83 	bl	8007700 <USBD_CoreFindEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079fe:	7b7b      	ldrb	r3, [r7, #13]
 8007a00:	2bff      	cmp	r3, #255	; 0xff
 8007a02:	f000 8174 	beq.w	8007cee <USBD_StdEPReq+0x32e>
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8170 	bne.w	8007cee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a0e:	7b7a      	ldrb	r2, [r7, #13]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a16:	7b7a      	ldrb	r2, [r7, #13]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32ae      	adds	r2, #174	; 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8163 	beq.w	8007cee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a28:	7b7a      	ldrb	r2, [r7, #13]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	; 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a3e:	e156      	b.n	8007cee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d008      	beq.n	8007a5a <USBD_StdEPReq+0x9a>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	f300 8145 	bgt.w	8007cd8 <USBD_StdEPReq+0x318>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 809b 	beq.w	8007b8a <USBD_StdEPReq+0x1ca>
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d03c      	beq.n	8007ad2 <USBD_StdEPReq+0x112>
 8007a58:	e13e      	b.n	8007cd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d002      	beq.n	8007a6c <USBD_StdEPReq+0xac>
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d016      	beq.n	8007a98 <USBD_StdEPReq+0xd8>
 8007a6a:	e02c      	b.n	8007ac6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_StdEPReq+0xce>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d00a      	beq.n	8007a8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f8d7 	bl	8008c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a82:	2180      	movs	r1, #128	; 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f8d3 	bl	8008c30 <USBD_LL_StallEP>
 8007a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e020      	b.n	8007ad0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc7a 	bl	800838a <USBD_CtlError>
              break;
 8007a96:	e01b      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10e      	bne.n	8007abe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b80      	cmp	r3, #128	; 0x80
 8007aaa:	d008      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f8b9 	bl	8008c30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fd2e 	bl	8008520 <USBD_CtlSendStatus>

              break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc5e 	bl	800838a <USBD_CtlError>
              break;
 8007ace:	bf00      	nop
          }
          break;
 8007ad0:	e107      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d002      	beq.n	8007ae4 <USBD_StdEPReq+0x124>
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d016      	beq.n	8007b10 <USBD_StdEPReq+0x150>
 8007ae2:	e04b      	b.n	8007b7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00d      	beq.n	8007b06 <USBD_StdEPReq+0x146>
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d00a      	beq.n	8007b06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f89b 	bl	8008c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f897 	bl	8008c30 <USBD_LL_StallEP>
 8007b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b04:	e040      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc3e 	bl	800838a <USBD_CtlError>
              break;
 8007b0e:	e03b      	b.n	8007b88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	885b      	ldrh	r3, [r3, #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d136      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f8a1 	bl	8008c6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fcf7 	bl	8008520 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fde2 	bl	8007700 <USBD_CoreFindEP>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b40:	7b7b      	ldrb	r3, [r7, #13]
 8007b42:	2bff      	cmp	r3, #255	; 0xff
 8007b44:	d01f      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11c      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b4c:	7b7a      	ldrb	r2, [r7, #13]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b54:	7b7a      	ldrb	r2, [r7, #13]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32ae      	adds	r2, #174	; 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b64:	7b7a      	ldrb	r2, [r7, #13]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	; 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fc03 	bl	800838a <USBD_CtlError>
              break;
 8007b84:	e000      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
              break;
 8007b86:	bf00      	nop
          }
          break;
 8007b88:	e0ab      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d002      	beq.n	8007b9c <USBD_StdEPReq+0x1dc>
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d032      	beq.n	8007c00 <USBD_StdEPReq+0x240>
 8007b9a:	e097      	b.n	8007ccc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	d004      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbed 	bl	800838a <USBD_CtlError>
                break;
 8007bb0:	e091      	b.n	8007cd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	da0b      	bge.n	8007bd2 <USBD_StdEPReq+0x212>
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	3310      	adds	r3, #16
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	e00b      	b.n	8007bea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc37 	bl	800846c <USBD_CtlSendData>
              break;
 8007bfe:	e06a      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da11      	bge.n	8007c2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	f003 020f 	and.w	r2, r3, #15
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d117      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fbb0 	bl	800838a <USBD_CtlError>
                  break;
 8007c2a:	e054      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb9d 	bl	800838a <USBD_CtlError>
                  break;
 8007c50:	e041      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da0b      	bge.n	8007c72 <USBD_StdEPReq+0x2b2>
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	3310      	adds	r3, #16
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	e00b      	b.n	8007c8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBD_StdEPReq+0x2d8>
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d103      	bne.n	8007ca0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e00e      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f801 	bl	8008cac <USBD_LL_IsStallEP>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fbd1 	bl	800846c <USBD_CtlSendData>
              break;
 8007cca:	e004      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb5b 	bl	800838a <USBD_CtlError>
              break;
 8007cd4:	bf00      	nop
          }
          break;
 8007cd6:	e004      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb55 	bl	800838a <USBD_CtlError>
          break;
 8007ce0:	bf00      	nop
      }
      break;
 8007ce2:	e005      	b.n	8007cf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb4f 	bl	800838a <USBD_CtlError>
      break;
 8007cec:	e000      	b.n	8007cf0 <USBD_StdEPReq+0x330>
      break;
 8007cee:	bf00      	nop
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	f200 8128 	bhi.w	8007f72 <USBD_GetDescriptor+0x276>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_GetDescriptor+0x2c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d45 	.word	0x08007d45
 8007d2c:	08007d5d 	.word	0x08007d5d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007f73 	.word	0x08007f73
 8007d38:	08007f73 	.word	0x08007f73
 8007d3c:	08007f13 	.word	0x08007f13
 8007d40:	08007f3f 	.word	0x08007f3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
      break;
 8007d5a:	e112      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7c1b      	ldrb	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10d      	bne.n	8007d80 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d7e:	e100      	b.n	8007f82 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
      break;
 8007d9a:	e0f2      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	885b      	ldrh	r3, [r3, #2]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	f200 80ac 	bhi.w	8007f00 <USBD_GetDescriptor+0x204>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBD_GetDescriptor+0xb4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e65 	.word	0x08007e65
 8007dc0:	08007e99 	.word	0x08007e99
 8007dc4:	08007ecd 	.word	0x08007ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e091      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 facb 	bl	800838a <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e089      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e077      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fab1 	bl	800838a <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e06f      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e05d      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa97 	bl	800838a <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e055      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e86:	e043      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa7d 	bl	800838a <USBD_CtlError>
            err++;
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	3301      	adds	r3, #1
 8007e94:	72fb      	strb	r3, [r7, #11]
          break;
 8007e96:	e03b      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eba:	e029      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa63 	bl	800838a <USBD_CtlError>
            err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eca:	e021      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7c12      	ldrb	r2, [r2, #16]
 8007ee4:	f107 0108 	add.w	r1, r7, #8
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eee:	e00f      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa49 	bl	800838a <USBD_CtlError>
            err++;
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	3301      	adds	r3, #1
 8007efc:	72fb      	strb	r3, [r7, #11]
          break;
 8007efe:	e007      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa41 	bl	800838a <USBD_CtlError>
          err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f0e:	bf00      	nop
      }
      break;
 8007f10:	e037      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7c1b      	ldrb	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	f107 0208 	add.w	r2, r7, #8
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f2c:	e029      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa2a 	bl	800838a <USBD_CtlError>
        err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	e021      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7c1b      	ldrb	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f107 0208 	add.w	r2, r7, #8
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f60:	e00f      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa10 	bl	800838a <USBD_CtlError>
        err++;
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f70:	e007      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa08 	bl	800838a <USBD_CtlError>
      err++;
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f80:	bf00      	nop
  }

  if (err != 0U)
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11e      	bne.n	8007fc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d016      	beq.n	8007fbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f90:	893b      	ldrh	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88da      	ldrh	r2, [r3, #6]
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bf28      	it	cs
 8007fa0:	4613      	movcs	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa5d 	bl	800846c <USBD_CtlSendData>
 8007fb2:	e009      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9e7 	bl	800838a <USBD_CtlError>
 8007fbc:	e004      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 faae 	bl	8008520 <USBD_CtlSendStatus>
 8007fc4:	e000      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    return;
 8007fc6:	bf00      	nop
  }
}
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d131      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12d      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff0:	d829      	bhi.n	8008046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d104      	bne.n	8008014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9bc 	bl	800838a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	e01d      	b.n	8008050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fe6f 	bl	8008d04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa7a 	bl	8008520 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	e009      	b.n	8008050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	e004      	b.n	8008050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f99e 	bl	800838a <USBD_CtlError>
  }
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	4b4e      	ldr	r3, [pc, #312]	; (80081a8 <USBD_SetConfig+0x150>)
 800806e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008070:	4b4d      	ldr	r3, [pc, #308]	; (80081a8 <USBD_SetConfig+0x150>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d905      	bls.n	8008084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f985 	bl	800838a <USBD_CtlError>
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e08c      	b.n	800819e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d002      	beq.n	8008096 <USBD_SetConfig+0x3e>
 8008090:	2b03      	cmp	r3, #3
 8008092:	d029      	beq.n	80080e8 <USBD_SetConfig+0x90>
 8008094:	e075      	b.n	8008182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008096:	4b44      	ldr	r3, [pc, #272]	; (80081a8 <USBD_SetConfig+0x150>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800809e:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <USBD_SetConfig+0x150>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a8:	4b3f      	ldr	r3, [pc, #252]	; (80081a8 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe ffe7 	bl	8007082 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f962 	bl	800838a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ce:	e065      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa25 	bl	8008520 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080de:	e05d      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa1d 	bl	8008520 <USBD_CtlSendStatus>
      break;
 80080e6:	e059      	b.n	800819c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080e8:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <USBD_SetConfig+0x150>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080f8:	4b2b      	ldr	r3, [pc, #172]	; (80081a8 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008102:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe ffd6 	bl	80070ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa06 	bl	8008520 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008114:	e042      	b.n	800819c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d02a      	beq.n	800817a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fe ffc4 	bl	80070ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008132:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <USBD_SetConfig+0x150>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800813c:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <USBD_SetConfig+0x150>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe ff9d 	bl	8007082 <USBD_SetClassConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f918 	bl	800838a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe ffa9 	bl	80070ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008170:	e014      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9d4 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008178:	e010      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9d0 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008180:	e00c      	b.n	800819c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f900 	bl	800838a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe ff92 	bl	80070ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2000035c 	.word	0x2000035c

080081ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d004      	beq.n	80081c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f8e2 	bl	800838a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081c6:	e023      	b.n	8008210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	dc02      	bgt.n	80081da <USBD_GetConfig+0x2e>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc03      	bgt.n	80081e0 <USBD_GetConfig+0x34>
 80081d8:	e015      	b.n	8008206 <USBD_GetConfig+0x5a>
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d00b      	beq.n	80081f6 <USBD_GetConfig+0x4a>
 80081de:	e012      	b.n	8008206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3308      	adds	r3, #8
 80081ea:	2201      	movs	r2, #1
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f93c 	bl	800846c <USBD_CtlSendData>
        break;
 80081f4:	e00c      	b.n	8008210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2201      	movs	r2, #1
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f934 	bl	800846c <USBD_CtlSendData>
        break;
 8008204:	e004      	b.n	8008210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8be 	bl	800838a <USBD_CtlError>
        break;
 800820e:	bf00      	nop
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	2b02      	cmp	r3, #2
 800822e:	d81e      	bhi.n	800826e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d004      	beq.n	8008242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8a5 	bl	800838a <USBD_CtlError>
        break;
 8008240:	e01a      	b.n	8008278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f043 0202 	orr.w	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	330c      	adds	r3, #12
 8008262:	2202      	movs	r2, #2
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f900 	bl	800846c <USBD_CtlSendData>
      break;
 800826c:	e004      	b.n	8008278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f88a 	bl	800838a <USBD_CtlError>
      break;
 8008276:	bf00      	nop
  }
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d107      	bne.n	80082a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f940 	bl	8008520 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082a0:	e013      	b.n	80082ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d10b      	bne.n	80082c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	889b      	ldrh	r3, [r3, #4]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f930 	bl	8008520 <USBD_CtlSendStatus>
}
 80082c0:	e003      	b.n	80082ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f860 	bl	800838a <USBD_CtlError>
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d80b      	bhi.n	8008302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10c      	bne.n	800830c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f910 	bl	8008520 <USBD_CtlSendStatus>
      }
      break;
 8008300:	e004      	b.n	800830c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f840 	bl	800838a <USBD_CtlError>
      break;
 800830a:	e000      	b.n	800830e <USBD_ClrFeature+0x3c>
      break;
 800830c:	bf00      	nop
  }
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa41 	bl	80077c8 <SWAPBYTE>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fa34 	bl	80077c8 <SWAPBYTE>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fa27 	bl	80077c8 <SWAPBYTE>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	80da      	strh	r2, [r3, #6]
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008394:	2180      	movs	r1, #128	; 0x80
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fc4a 	bl	8008c30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc46 	bl	8008c30 <USBD_LL_StallEP>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d036      	beq.n	8008430 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083c6:	6938      	ldr	r0, [r7, #16]
 80083c8:	f000 f836 	bl	8008438 <USBD_GetLen>
 80083cc:	4603      	mov	r3, r0
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	2203      	movs	r2, #3
 80083f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	3301      	adds	r3, #1
 80083fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083fc:	e013      	b.n	8008426 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4413      	add	r3, r2
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	7812      	ldrb	r2, [r2, #0]
 8008408:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	3301      	adds	r3, #1
 800840e:	613b      	str	r3, [r7, #16]
    idx++;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	3301      	adds	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	3301      	adds	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e7      	bne.n	80083fe <USBD_GetString+0x52>
 800842e:	e000      	b.n	8008432 <USBD_GetString+0x86>
    return;
 8008430:	bf00      	nop
  }
}
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008448:	e005      	b.n	8008456 <USBD_GetLen+0x1e>
  {
    len++;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	3301      	adds	r3, #1
 8008454:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f5      	bne.n	800844a <USBD_GetLen+0x12>
  }

  return len;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fc55 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	2100      	movs	r1, #0
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fc44 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2203      	movs	r2, #3
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	2100      	movs	r1, #0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fc48 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 fc37 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2204      	movs	r2, #4
 800852c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc03 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2205      	movs	r2, #5
 8008552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fc11 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <SendGovnoReport>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void SendGovnoReport(uint8_t* report, uint16_t length) {
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, length);
 8008578:	887b      	ldrh	r3, [r7, #2]
 800857a:	461a      	mov	r2, r3
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4803      	ldr	r0, [pc, #12]	; (800858c <SendGovnoReport+0x20>)
 8008580:	f7fe fb72 	bl	8006c68 <USBD_CUSTOM_HID_SendReport>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20000360 	.word	0x20000360

08008590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008594:	2200      	movs	r2, #0
 8008596:	4912      	ldr	r1, [pc, #72]	; (80085e0 <MX_USB_DEVICE_Init+0x50>)
 8008598:	4812      	ldr	r0, [pc, #72]	; (80085e4 <MX_USB_DEVICE_Init+0x54>)
 800859a:	f7fe fcf5 	bl	8006f88 <USBD_Init>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085a4:	f7f9 fabc 	bl	8001b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80085a8:	490f      	ldr	r1, [pc, #60]	; (80085e8 <MX_USB_DEVICE_Init+0x58>)
 80085aa:	480e      	ldr	r0, [pc, #56]	; (80085e4 <MX_USB_DEVICE_Init+0x54>)
 80085ac:	f7fe fd1c 	bl	8006fe8 <USBD_RegisterClass>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085b6:	f7f9 fab3 	bl	8001b20 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80085ba:	490c      	ldr	r1, [pc, #48]	; (80085ec <MX_USB_DEVICE_Init+0x5c>)
 80085bc:	4809      	ldr	r0, [pc, #36]	; (80085e4 <MX_USB_DEVICE_Init+0x54>)
 80085be:	f7fe fcc9 	bl	8006f54 <USBD_CUSTOM_HID_RegisterInterface>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085c8:	f7f9 faaa 	bl	8001b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085cc:	4805      	ldr	r0, [pc, #20]	; (80085e4 <MX_USB_DEVICE_Init+0x54>)
 80085ce:	f7fe fd41 	bl	8007054 <USBD_Start>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085d8:	f7f9 faa2 	bl	8001b20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085dc:	bf00      	nop
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	200000d0 	.word	0x200000d0
 80085e4:	20000360 	.word	0x20000360
 80085e8:	2000000c 	.word	0x2000000c
 80085ec:	200000c0 	.word	0x200000c0

080085f0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008604:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008606:	4618      	mov	r0, r3
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	460a      	mov	r2, r1
 800861a:	71fb      	strb	r3, [r7, #7]
 800861c:	4613      	mov	r3, r2
 800861e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008620:	4806      	ldr	r0, [pc, #24]	; (800863c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008622:	f7fe fc35 	bl	8006e90 <USBD_CUSTOM_HID_ReceivePacket>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800862c:	f04f 33ff 	mov.w	r3, #4294967295
 8008630:	e000      	b.n	8008634 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20000360 	.word	0x20000360

08008640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2212      	movs	r2, #18
 8008650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008652:	4b03      	ldr	r3, [pc, #12]	; (8008660 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	200000ec 	.word	0x200000ec

08008664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2204      	movs	r2, #4
 8008674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008676:	4b03      	ldr	r3, [pc, #12]	; (8008684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20000100 	.word	0x20000100

08008688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	4907      	ldr	r1, [pc, #28]	; (80086bc <USBD_FS_ProductStrDescriptor+0x34>)
 800869e:	4808      	ldr	r0, [pc, #32]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086a0:	f7ff fe84 	bl	80083ac <USBD_GetString>
 80086a4:	e004      	b.n	80086b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4904      	ldr	r1, [pc, #16]	; (80086bc <USBD_FS_ProductStrDescriptor+0x34>)
 80086aa:	4805      	ldr	r0, [pc, #20]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086ac:	f7ff fe7e 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	2000063c 	.word	0x2000063c
 80086c0:	08008ec0 	.word	0x08008ec0

080086c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	4904      	ldr	r1, [pc, #16]	; (80086e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086d4:	4804      	ldr	r0, [pc, #16]	; (80086e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086d6:	f7ff fe69 	bl	80083ac <USBD_GetString>
  return USBD_StrDesc;
 80086da:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	2000063c 	.word	0x2000063c
 80086e8:	08008ee0 	.word	0x08008ee0

080086ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	221a      	movs	r2, #26
 80086fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086fe:	f000 f843 	bl	8008788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008702:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000104 	.word	0x20000104

08008710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	4907      	ldr	r1, [pc, #28]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008726:	4808      	ldr	r0, [pc, #32]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008728:	f7ff fe40 	bl	80083ac <USBD_GetString>
 800872c:	e004      	b.n	8008738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4904      	ldr	r1, [pc, #16]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008732:	4805      	ldr	r0, [pc, #20]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008734:	f7ff fe3a 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	2000063c 	.word	0x2000063c
 8008748:	08008ef4 	.word	0x08008ef4

0800874c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	6039      	str	r1, [r7, #0]
 8008756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4907      	ldr	r1, [pc, #28]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008762:	4808      	ldr	r0, [pc, #32]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008764:	f7ff fe22 	bl	80083ac <USBD_GetString>
 8008768:	e004      	b.n	8008774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	4904      	ldr	r1, [pc, #16]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800876e:	4805      	ldr	r0, [pc, #20]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008770:	f7ff fe1c 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	2000063c 	.word	0x2000063c
 8008784:	08008f08 	.word	0x08008f08

08008788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <Get_SerialNum+0x44>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <Get_SerialNum+0x48>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <Get_SerialNum+0x4c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087ae:	2208      	movs	r2, #8
 80087b0:	4909      	ldr	r1, [pc, #36]	; (80087d8 <Get_SerialNum+0x50>)
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f814 	bl	80087e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087b8:	2204      	movs	r2, #4
 80087ba:	4908      	ldr	r1, [pc, #32]	; (80087dc <Get_SerialNum+0x54>)
 80087bc:	68b8      	ldr	r0, [r7, #8]
 80087be:	f000 f80f 	bl	80087e0 <IntToUnicode>
  }
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	1fff7a10 	.word	0x1fff7a10
 80087d0:	1fff7a14 	.word	0x1fff7a14
 80087d4:	1fff7a18 	.word	0x1fff7a18
 80087d8:	20000106 	.word	0x20000106
 80087dc:	20000116 	.word	0x20000116

080087e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
 80087f6:	e027      	b.n	8008848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0f1b      	lsrs	r3, r3, #28
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	d80b      	bhi.n	8008818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	0f1b      	lsrs	r3, r3, #28
 8008804:	b2da      	uxtb	r2, r3
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4619      	mov	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	440b      	add	r3, r1
 8008810:	3230      	adds	r2, #48	; 0x30
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e00a      	b.n	800882e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	0f1b      	lsrs	r3, r3, #28
 800881c:	b2da      	uxtb	r2, r3
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	4619      	mov	r1, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	440b      	add	r3, r1
 8008828:	3237      	adds	r2, #55	; 0x37
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	3301      	adds	r3, #1
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	3301      	adds	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
 8008848:	7dfa      	ldrb	r2, [r7, #23]
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	429a      	cmp	r2, r3
 800884e:	d3d3      	bcc.n	80087f8 <IntToUnicode+0x18>
  }
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	609a      	str	r2, [r3, #8]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008880:	d13a      	bne.n	80088f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800889e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a4:	2302      	movs	r3, #2
 80088a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ac:	2303      	movs	r3, #3
 80088ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088b0:	230a      	movs	r3, #10
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	4619      	mov	r1, r3
 80088ba:	4812      	ldr	r0, [pc, #72]	; (8008904 <HAL_PCD_MspInit+0xa4>)
 80088bc:	f7fa fafc 	bl	8002eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	4a0e      	ldr	r2, [pc, #56]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ca:	6353      	str	r3, [r2, #52]	; 0x34
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088da:	6453      	str	r3, [r2, #68]	; 0x44
 80088dc:	4b08      	ldr	r3, [pc, #32]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088e8:	2200      	movs	r2, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	2043      	movs	r0, #67	; 0x43
 80088ee:	f7f9 ffc2 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088f2:	2043      	movs	r0, #67	; 0x43
 80088f4:	f7f9 ffdb 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f8:	bf00      	nop
 80088fa:	3728      	adds	r7, #40	; 0x28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40023800 	.word	0x40023800
 8008904:	40020000 	.word	0x40020000

08008908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe fbe5 	bl	80070ee <USBD_LL_SetupStage>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	4619      	mov	r1, r3
 8008956:	f7fe fc1f 	bl	8007198 <USBD_LL_DataOutStage>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	334c      	adds	r3, #76	; 0x4c
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	f7fe fcb8 	bl	80072fe <USBD_LL_DataInStage>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fdec 	bl	8007582 <USBD_LL_SOF>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ba:	2301      	movs	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d001      	beq.n	80089ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089c6:	f7f9 f8ab 	bl	8001b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fd96 	bl	8007506 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fd3e 	bl	8007462 <USBD_LL_Reset>
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fd91 	bl	8007526 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <HAL_PCD_SuspendCallback+0x48>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	4a03      	ldr	r2, [pc, #12]	; (8008a38 <HAL_PCD_SuspendCallback+0x48>)
 8008a2a:	f043 0306 	orr.w	r3, r3, #6
 8008a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed00 	.word	0xe000ed00

08008a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd81 	bl	8007552 <USBD_LL_Resume>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fdd9 	bl	8007626 <USBD_LL_IsoOUTIncomplete>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fd95 	bl	80075c2 <USBD_LL_IsoINIncomplete>
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fdeb 	bl	800768a <USBD_LL_DevConnected>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fde8 	bl	80076a0 <USBD_LL_DevDisconnected>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d13c      	bne.n	8008b62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ae8:	4a20      	ldr	r2, [pc, #128]	; (8008b6c <USBD_LL_Init+0x94>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1e      	ldr	r2, [pc, #120]	; (8008b6c <USBD_LL_Init+0x94>)
 8008af4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008af8:	4b1c      	ldr	r3, [pc, #112]	; (8008b6c <USBD_LL_Init+0x94>)
 8008afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b02:	2204      	movs	r2, #4
 8008b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b06:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b08:	2202      	movs	r2, #2
 8008b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b0c:	4b17      	ldr	r3, [pc, #92]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b14:	2202      	movs	r2, #2
 8008b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b18:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b36:	480d      	ldr	r0, [pc, #52]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b38:	f7fa fb73 	bl	8003222 <HAL_PCD_Init>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b42:	f7f8 ffed 	bl	8001b20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b46:	2180      	movs	r1, #128	; 0x80
 8008b48:	4808      	ldr	r0, [pc, #32]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b4a:	f7fb fdb2 	bl	80046b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b4e:	2240      	movs	r2, #64	; 0x40
 8008b50:	2100      	movs	r1, #0
 8008b52:	4806      	ldr	r0, [pc, #24]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b54:	f7fb fd66 	bl	8004624 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b58:	2280      	movs	r2, #128	; 0x80
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	4803      	ldr	r0, [pc, #12]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b5e:	f7fb fd61 	bl	8004624 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	2000083c 	.word	0x2000083c

08008b70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fa fc68 	bl	800345c <HAL_PCD_Start>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f930 	bl	8008df8 <USBD_Get_USB_Status>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	70fb      	strb	r3, [r7, #3]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70bb      	strb	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bce:	78bb      	ldrb	r3, [r7, #2]
 8008bd0:	883a      	ldrh	r2, [r7, #0]
 8008bd2:	78f9      	ldrb	r1, [r7, #3]
 8008bd4:	f7fb f939 	bl	8003e4a <HAL_PCD_EP_Open>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f90a 	bl	8008df8 <USBD_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fb f982 	bl	8003f1a <HAL_PCD_EP_Close>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f8eb 	bl	8008df8 <USBD_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fb fa42 	bl	80040d8 <HAL_PCD_EP_SetStall>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f8cc 	bl	8008df8 <USBD_Get_USB_Status>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fb fa87 	bl	80041a0 <HAL_PCD_EP_ClrStall>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f8ad 	bl	8008df8 <USBD_Get_USB_Status>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da0b      	bge.n	8008ce0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	333e      	adds	r3, #62	; 0x3e
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	e00b      	b.n	8008cf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008cf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fb f86c 	bl	8003e00 <HAL_PCD_SetAddress>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f862 	bl	8008df8 <USBD_Get_USB_Status>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d60:	7af9      	ldrb	r1, [r7, #11]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f7fb f96d 	bl	8004044 <HAL_PCD_EP_Transmit>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f841 	bl	8008df8 <USBD_Get_USB_Status>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	460b      	mov	r3, r1
 8008d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008da2:	7af9      	ldrb	r1, [r7, #11]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	f7fb f901 	bl	8003fae <HAL_PCD_EP_Receive>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f820 	bl	8008df8 <USBD_Get_USB_Status>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <USBD_static_malloc+0x18>)
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000d48 	.word	0x20000d48

08008de4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d817      	bhi.n	8008e3c <USBD_Get_USB_Status+0x44>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBD_Get_USB_Status+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e2b 	.word	0x08008e2b
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e37 	.word	0x08008e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e00b      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e008      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e005      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e002      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	bf00      	nop
  }
  return usb_status;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <__libc_init_array>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4d0d      	ldr	r5, [pc, #52]	; (8008e88 <__libc_init_array+0x38>)
 8008e54:	4c0d      	ldr	r4, [pc, #52]	; (8008e8c <__libc_init_array+0x3c>)
 8008e56:	1b64      	subs	r4, r4, r5
 8008e58:	10a4      	asrs	r4, r4, #2
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	42a6      	cmp	r6, r4
 8008e5e:	d109      	bne.n	8008e74 <__libc_init_array+0x24>
 8008e60:	4d0b      	ldr	r5, [pc, #44]	; (8008e90 <__libc_init_array+0x40>)
 8008e62:	4c0c      	ldr	r4, [pc, #48]	; (8008e94 <__libc_init_array+0x44>)
 8008e64:	f000 f820 	bl	8008ea8 <_init>
 8008e68:	1b64      	subs	r4, r4, r5
 8008e6a:	10a4      	asrs	r4, r4, #2
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	42a6      	cmp	r6, r4
 8008e70:	d105      	bne.n	8008e7e <__libc_init_array+0x2e>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e78:	4798      	blx	r3
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7ee      	b.n	8008e5c <__libc_init_array+0xc>
 8008e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e82:	4798      	blx	r3
 8008e84:	3601      	adds	r6, #1
 8008e86:	e7f2      	b.n	8008e6e <__libc_init_array+0x1e>
 8008e88:	08008f40 	.word	0x08008f40
 8008e8c:	08008f40 	.word	0x08008f40
 8008e90:	08008f40 	.word	0x08008f40
 8008e94:	08008f48 	.word	0x08008f48

08008e98 <memset>:
 8008e98:	4402      	add	r2, r0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d100      	bne.n	8008ea2 <memset+0xa>
 8008ea0:	4770      	bx	lr
 8008ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea6:	e7f9      	b.n	8008e9c <memset+0x4>

08008ea8 <_init>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_fini>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	bf00      	nop
 8008eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eba:	bc08      	pop	{r3}
 8008ebc:	469e      	mov	lr, r3
 8008ebe:	4770      	bx	lr
